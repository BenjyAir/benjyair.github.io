{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":1,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"810b3c779df7144563da44a3754b07a91cdc75c9","modified":1525507288169},{"_id":"themes/vexo/.DS_Store","hash":"d89897a03dcaa91b67ae425a5e5bd425527f20b3","modified":1525696851422},{"_id":"themes/vexo/.gitignore","hash":"37fb9fd49e7f944716efd3284a6bf55adb6dd0c2","modified":1525501490033},{"_id":"themes/vexo/_config.yml","hash":"0b785418db856705634f12643d0409259df4033e","modified":1525697411509},{"_id":"themes/vexo/.travis.yml","hash":"cc482f06f4ea6962058f2548dcb814b954876e76","modified":1525501490033},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1525501490034},{"_id":"themes/vexo/README.md","hash":"036ddc66e868b93411a15ed3fd5ed5e9101045a5","modified":1525501490034},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1525501490039},{"_id":"themes/vexo/package.json","hash":"8852c5a394ac59d219e5bbbcee10d573d33e1fc6","modified":1525501490039},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1525509243023},{"_id":"source/_posts/Android应用内存溢出导致应用退出的解决方案.md","hash":"dd6e79f0f908bb93cd582c6a0529c01af403d1e7","modified":1525509374348},{"_id":"source/_posts/Android简单实现圆形头像(续).md","hash":"216c889bfe383c3603b4e26675966ee909e9c44b","modified":1525509290503},{"_id":"source/_posts/Android简单实现圆形头像.md","hash":"e3f2e3598325adb4a6a343fd859d24253fe2de8c","modified":1525509277254},{"_id":"source/_posts/Swift通过代码启动Storyboard内的ViewController.md","hash":"52b2208ccaf149a4aeab4a5fe9701c2588f0b3be","modified":1525509473152},{"_id":"source/_posts/BroadcastReceiver接收顺序.md","hash":"255380dbc3931840a451eb6c99910ca3770afccc","modified":1525509212899},{"_id":"source/_posts/PubDialog----一个简单的提示对话框.md","hash":"e2fb07ff8de52a620c0252627de9b2b044ea4997","modified":1525509428754},{"_id":"source/_posts/一招搞定IOS屏幕适配.md","hash":"77338ce9f8ee899622f95981648ed240e7367089","modified":1525509491609},{"_id":"source/_posts/下拉刷新封装.md","hash":"8d9ab2e9c6dc289dc63e41e28a271a74dd15f765","modified":1525509314974},{"_id":"source/_posts/为Context-Menu.Android库增加用户体验.md","hash":"08119fa3e87af2f163f559f93fee51fdcda9d9fa","modified":1525509406379},{"_id":"source/_posts/为Context-Menu.Android库增加用户体验(续).md","hash":"17213400d6d6e4878baef4b402ee9df0176bce78","modified":1525509448778},{"_id":"source/_posts/从Framework层看Android启动.md","hash":"9f650072fc20b5840f68bc9083f022b56acd0a08","modified":1525509395283},{"_id":"source/_posts/使用Shell来编译Android项目.md","hash":"9dc8251fd18ad61c81c324c43b68bb737f0939c9","modified":1525509508312},{"_id":"source/_posts/关于WebView因url重定向而导致无法goBack的问题.md","hash":"6b6ac6c120a7d94c5354ab0ef9a11ef222d7ac81","modified":1525509362180},{"_id":"source/_posts/关于使用commons-codec.jar出现方法找不到的问题.md","hash":"8c3e31078a3bf6dde0744cac03e64cdbf827ff3e","modified":1525509344421},{"_id":"source/_posts/你试过这样分析Android界面么.md","hash":"6b1b28b8ee886438bab0cf51f58ccfcd565fd379","modified":1525509523984},{"_id":"source/_posts/爬坑IOS——第一季.md","hash":"89695a2428ff7168e74c4d1d4979bc2b4c4948e2","modified":1525509804449},{"_id":"source/_posts/策略枚举.md","hash":"80e1632f5adfe302eed2b8f821ffe40a2cc7fe15","modified":1525509439610},{"_id":"source/about/index.md","hash":"61b783c076bdb6298e275ba4528543686ca1a0b1","modified":1525503999526},{"_id":"source/_posts/自己修改的GustureLock.md","hash":"a04b9b70e625548d5cfc7ae0fe0e759db036d64f","modified":1525509459969},{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1525503994664},{"_id":"source/read/index.md","hash":"813fcbf8f43e5ac709b3dea0dacded217c6f386d","modified":1525506475697},{"_id":"source/tags/index.md","hash":"ce3ea496446720f39c8c1154db5714d0b0519e18","modified":1525506487161},{"_id":"themes/vexo/.git/config","hash":"9cf891bec062e2138910d9c40051c4d656da1345","modified":1525501490030},{"_id":"themes/vexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1525501490028},{"_id":"themes/vexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1525501484613},{"_id":"themes/vexo/.git/index","hash":"1119103689723db280d5ad3ac09c9fe26b150a08","modified":1525501490051},{"_id":"themes/vexo/.git/packed-refs","hash":"0ef8d44ef297f9c2a47f99883ea456842bc5ee3d","modified":1525501490026},{"_id":"themes/vexo/_source/.DS_Store","hash":"58f134cd17ee2b0c6e209093f307d3966f729e21","modified":1525506595924},{"_id":"themes/vexo/layout/.DS_Store","hash":"3efccdab04c647ca5b3b1c43372aacd01a81f833","modified":1525506607315},{"_id":"themes/vexo/layout/about.ejs","hash":"c8da38fdb6307c406af3e656fc9e219f9e5a4139","modified":1525501490037},{"_id":"themes/vexo/layout/archive.ejs","hash":"cb12abb19cb70e90d410a6233933eedb3f2c033a","modified":1525501490037},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1525501490037},{"_id":"themes/vexo/layout/index.ejs","hash":"9f12f5928d68d4d68175b825e18f89f3b0dfdb69","modified":1525501490037},{"_id":"themes/vexo/layout/page.ejs","hash":"a886fb7e8a9d70bc971b6dfc7210d4fa2ee671c9","modified":1525501490038},{"_id":"themes/vexo/layout/project.ejs","hash":"666be5c72bac8165e0946428642b36dd3232983e","modified":1525501490038},{"_id":"themes/vexo/layout/tags.ejs","hash":"5b326e2bd3292b3015d0666b796544d7126acfda","modified":1525501490038},{"_id":"themes/vexo/source/.DS_Store","hash":"71de49345b332e02516e8cd5f553d3a97c7c0bf7","modified":1525506613175},{"_id":"themes/vexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1525501484615},{"_id":"themes/vexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1525501484614},{"_id":"themes/vexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1525501484616},{"_id":"themes/vexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1525501484616},{"_id":"themes/vexo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1525501484615},{"_id":"themes/vexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1525501484616},{"_id":"themes/vexo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1525501484615},{"_id":"themes/vexo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1525501484614},{"_id":"themes/vexo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1525501484615},{"_id":"themes/vexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1525501484616},{"_id":"themes/vexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1525501484613},{"_id":"themes/vexo/.git/logs/HEAD","hash":"7cd7acb561d1f420670f7836a49d2fbb5083da54","modified":1525501490029},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1525501490034},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1525501490034},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1525501490035},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1525501490035},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1525501490035},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"6032a4dcc6224ad916b7898d54e91552c17396ce","modified":1525501490035},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"90334bd53e232d7b2cc5ae743b377fc5336bcd6b","modified":1525501490036},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"e544f516b23bc609cc6367190f380c879b935c21","modified":1525501490036},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1525501490036},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1525501490036},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1525501490036},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1525501490036},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1525501490037},{"_id":"themes/vexo/source/css/_config.styl","hash":"0c9c0e77d6b8813cb76494e8d757843aab9e117b","modified":1525501490039},{"_id":"themes/vexo/source/css/.DS_Store","hash":"ba4bc837e1244ec33ae15869afdd0d1ad609bb7d","modified":1525506892381},{"_id":"themes/vexo/source/css/style.styl","hash":"c09ad049c647cc089eaf00aa59e5d5d2a7f782d4","modified":1525501490046},{"_id":"themes/vexo/source/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1525501490050},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1525501490050},{"_id":"themes/vexo/.git/objects/pack/pack-fd983d1cb1fa8096a56c560e83194f624f8de37e.idx","hash":"1d7297a78f9ee7f37b1bcfa13aa99e5834757604","modified":1525501490018},{"_id":"themes/vexo/.git/refs/heads/master","hash":"53a832c26baac5e1ae6b97828639427dea818295","modified":1525501490028},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"daf87833ee4923615a67f7893d5ed5abf1ca5e00","modified":1525501490040},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1525501490040},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"cbf3f59d3c3162700eb9cbd4cf72c8470c170f81","modified":1525501490040},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"970b6fd3d05834926c69724934b798dd5a1472e6","modified":1525501490040},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"def3a6938d925c585a7da6256a6f2e90f3b7d61e","modified":1525501490041},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"3ec22606f9548681389158384dc29ddf59c8ceea","modified":1525501490041},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1525501490041},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1525501490042},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1525501490042},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1525501490042},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1525501490043},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1525501490043},{"_id":"themes/vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1525501490044},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1525501490044},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1525501490046},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"85bff3539561811b53e17e1a7d0ce57dc6d8cec0","modified":1525506842425},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1525501490044},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1525501490048},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1525501490049},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"457e8463eb2f917a3705035b6e74202a07abb194","modified":1525506843261},{"_id":"themes/vexo/.git/logs/refs/heads/master","hash":"7cd7acb561d1f420670f7836a49d2fbb5083da54","modified":1525501490029},{"_id":"themes/vexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1525501490027},{"_id":"themes/vexo/.git/logs/refs/remotes/origin/HEAD","hash":"7cd7acb561d1f420670f7836a49d2fbb5083da54","modified":1525501490027},{"_id":"themes/vexo/.git/objects/pack/pack-fd983d1cb1fa8096a56c560e83194f624f8de37e.pack","hash":"8889af41bb61ef4c1340ba2bdf573e18edb72264","modified":1525501490018},{"_id":"public/about/index.html","hash":"51bbf0066c9c440b3e0af644938a4111d510e34b","modified":1525697454925},{"_id":"public/project/index.html","hash":"ac72facd5123535164722534f3a03d9ce500db30","modified":1525697454925},{"_id":"public/read/index.html","hash":"88a084693db9cf1043104d73e3a12365ef40b6a4","modified":1525697454926},{"_id":"public/tags/index.html","hash":"095f72b962e8343e9da57a7b9ea3df41758b2e50","modified":1525697454926},{"_id":"public/2015/07/25/你试过这样分析Android界面么/index.html","hash":"36f9b1848c4b763b7124747ac0f27ca59f38aa2d","modified":1525697454926},{"_id":"public/2015/06/30/使用Shell来编译Android项目/index.html","hash":"c94bf3df724b220e17bf827498b9e246e51db6fb","modified":1525697454926},{"_id":"public/2015/03/13/Swift通过代码启动Storyboard内的ViewController/index.html","hash":"68f0f9482faa0f8712eae1d3092914f5b825d84d","modified":1525697454926},{"_id":"public/2015/03/04/自己修改的GustureLock/index.html","hash":"f2d9a896920e0c4bed3c1fb98d04cbb61645ef9f","modified":1525697454926},{"_id":"public/2015/05/15/一招搞定IOS屏幕适配/index.html","hash":"ddfcafd549d31ab0c638c3baeeafb475da84ea23","modified":1525697454926},{"_id":"public/2015/02/27/PubDialog----一个简单的提示对话框/index.html","hash":"4c4f13fe2e0851a0890c4f30d63f55f52e486595","modified":1525697454926},{"_id":"public/2015/02/28/为Context-Menu.Android库增加用户体验(续)/index.html","hash":"32d4153d50f01a47267cdd6dddb79f5ceeeec7cb","modified":1525697454926},{"_id":"public/2015/01/25/为Context-Menu.Android库增加用户体验/index.html","hash":"2bb1f9244b1926b814d40b24484d454a42290606","modified":1525697454926},{"_id":"public/2014/12/04/从Framework层看Android启动/index.html","hash":"fd500e079e2e866b27cc822aad6b444b4c213dd0","modified":1525697454926},{"_id":"public/2014/11/02/关于使用commons-codec.jar出现方法找不到的问题/index.html","hash":"b4f2389ed332a537b2fa575317766618aecebb76","modified":1525697454926},{"_id":"public/2014/11/11/Android应用内存溢出导致应用退出的解决方案/index.html","hash":"5a57479a5ce0e04d2ffd4433a30f17582c65ad75","modified":1525697454927},{"_id":"public/2014/11/11/关于WebView因url重定向而导致无法goBack的问题/index.html","hash":"c1d03fb59940e5e270ea6f52e3aa5d63288d2c6c","modified":1525697454927},{"_id":"public/archives/index.html","hash":"99840458e58643fbff362e8d00f04e7d40d42c9a","modified":1525697454927},{"_id":"public/archives/2014/index.html","hash":"f48670e092cf922701eb1d0353868b2129c974d9","modified":1525697454927},{"_id":"public/archives/page/2/index.html","hash":"aa3bf24ffd4480c4d2f78bdc00ab23367ddc8d3e","modified":1525697454927},{"_id":"public/2014/09/28/BroadcastReceiver接收顺序/index.html","hash":"39fcdad005248a44c68b56a32b61028a2e642c73","modified":1525697454927},{"_id":"public/archives/2014/09/index.html","hash":"c60036b82c8526078599cdb067870288ea66bff3","modified":1525697454927},{"_id":"public/archives/2014/10/index.html","hash":"c0349914740b1d85f5559e29bbb0f426c59c2717","modified":1525697454927},{"_id":"public/archives/2014/12/index.html","hash":"82025c8a324c523fb342ba7ea020e4e073ad34d7","modified":1525697454927},{"_id":"public/archives/2015/index.html","hash":"8c090cfb1215016a055300031dc923e18c3d7f83","modified":1525697454927},{"_id":"public/archives/2014/11/index.html","hash":"1a6f183b6b8dd1b782f287ff63a9af895d522be3","modified":1525697454927},{"_id":"public/archives/2015/01/index.html","hash":"e82deb4cd6f36952882b78319a9ce0090551391b","modified":1525697454927},{"_id":"public/archives/2015/03/index.html","hash":"b6134aff0ce525194a3db8ee75dce8e41b55e747","modified":1525697454927},{"_id":"public/archives/2015/02/index.html","hash":"c20202e52e104b490a0ca6684fb1eca60e318269","modified":1525697454927},{"_id":"public/archives/2015/05/index.html","hash":"f6ba407cfbc9ca18846e6e926dc14efa38687636","modified":1525697454927},{"_id":"public/index.html","hash":"bacb7f92ba51b56900224fe0a62a4a534c0d5246","modified":1525697454928},{"_id":"public/archives/2015/06/index.html","hash":"f3f93ddebc15d744adb7700fae9e3e5474b2f502","modified":1525697454928},{"_id":"public/archives/2015/07/index.html","hash":"f9b08cb6e2bda358d14205f4ad77a410cb48d826","modified":1525697454928},{"_id":"public/page/2/index.html","hash":"eea91fa14d7b11f10788e289357798bf414a6230","modified":1525697454928},{"_id":"public/tags/工作总结/index.html","hash":"3e32dd7267d88ba94079e25b1c891eb56c12d9b6","modified":1525697454928},{"_id":"public/tags/Swift/index.html","hash":"9caba7de9d97fe6dadaea8c750af1680703031dd","modified":1525697454928},{"_id":"public/tags/工作总结/page/2/index.html","hash":"736877fee10c6ee02ce44cf15bf8120b0e1b3e4a","modified":1525697454928},{"_id":"public/tags/我的开源/index.html","hash":"8ce13f79ad7ac7f672db6c206e8642b034baa945","modified":1525697454928},{"_id":"public/tags/读书笔记/index.html","hash":"33f3e75a26cc4078645869461c7c7db4d3cb0a51","modified":1525697454928},{"_id":"public/tags/Shell/index.html","hash":"940a8c4361fc377eb0968c6bdedc5a897494451a","modified":1525697454928},{"_id":"public/2015/05/04/爬坑IOS——第一季/index.html","hash":"d5131837e890348caa677e7e949384c4fcd5c993","modified":1525697454928},{"_id":"public/2015/02/27/策略枚举/index.html","hash":"6a17a4a22b3c0b0ffedc4762caa5d797eb9d6811","modified":1525697454928},{"_id":"public/2014/10/21/下拉刷新封装/index.html","hash":"e8c7514509fef21d398d01ddfe01394b9e4b3d8c","modified":1525697454928},{"_id":"public/2014/10/11/Android简单实现圆形头像(续)/index.html","hash":"fbab27f63f8cc98d7b36b1291fd4caff333c2849","modified":1525697454928},{"_id":"public/2014/09/30/Android简单实现圆形头像/index.html","hash":"ab1553758ea0d15f64d071001bd766a39d571a0d","modified":1525697454928},{"_id":"public/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1525697454931},{"_id":"public/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1525697454931},{"_id":"public/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1525697454931},{"_id":"public/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1525697454931},{"_id":"public/css/images/alipay.jpg","hash":"85bff3539561811b53e17e1a7d0ce57dc6d8cec0","modified":1525697454932},{"_id":"public/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1525697455166},{"_id":"public/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1525697455168},{"_id":"public/css/style.css","hash":"f3bfa7ccf605e753be75f4792c7a5a1bd353cfdf","modified":1525697455168},{"_id":"public/css/images/wechat.jpg","hash":"457e8463eb2f917a3705035b6e74202a07abb194","modified":1525697455168},{"_id":"public/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1525697455169},{"_id":"public/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1525697455174},{"_id":"public/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1525697455176},{"_id":"public/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1525697455178}],"Category":[],"Data":[],"Page":[{"title":"关于我","layout":"post","_content":"\n### 关于我\n\nAndroid 开发者，J2EE 开发者，Go 爱好者，果粉。\n喜欢不同的语言处理不同的工作。\n\n### 关于这里\n\n本 Blog 主要分享我在工作中遇到的技术难点，以及一些读书笔记，我会认真写好每一篇 Blog，力求达到精益求精。\n分享成果，让我每天都很开心。\n我的开源\n\n1. PubDialog\n一款 Android 上常用的列表对话框，使用简单，功能强大，可定制性强，类似 IOS 上的 UIActionSheet。\n2. PDEXChart\nIOS 上用 Swift 开发的图表库，在 PDChart 的基础上二次开发，支持多线图，多柱形图，不过已经废弃，改用 ios-charts 吧。\n\n### 我的作品\n\n1. 楼里\n2. 京东金融数据分析 Android\n3. 京东金融数据分析 IOS\n4. 红茶漫游\n\n### 读书\n\n最近看到有人晒自己 Github 的连续签到记录，甚是励志，自己何不也记录点什么呢？今天灵光一闪，那就记录读的书吧，顺便挑战一下自己一年可以看多少书，详情 [点击这里](/read)。\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\nlayout: post\n---\n\n### 关于我\n\nAndroid 开发者，J2EE 开发者，Go 爱好者，果粉。\n喜欢不同的语言处理不同的工作。\n\n### 关于这里\n\n本 Blog 主要分享我在工作中遇到的技术难点，以及一些读书笔记，我会认真写好每一篇 Blog，力求达到精益求精。\n分享成果，让我每天都很开心。\n我的开源\n\n1. PubDialog\n一款 Android 上常用的列表对话框，使用简单，功能强大，可定制性强，类似 IOS 上的 UIActionSheet。\n2. PDEXChart\nIOS 上用 Swift 开发的图表库，在 PDChart 的基础上二次开发，支持多线图，多柱形图，不过已经废弃，改用 ios-charts 吧。\n\n### 我的作品\n\n1. 楼里\n2. 京东金融数据分析 Android\n3. 京东金融数据分析 IOS\n4. 红茶漫游\n\n### 读书\n\n最近看到有人晒自己 Github 的连续签到记录，甚是励志，自己何不也记录点什么呢？今天灵光一闪，那就记录读的书吧，顺便挑战一下自己一年可以看多少书，详情 [点击这里](/read)。\n\n","date":"2018-05-05T07:06:39.526Z","updated":"2018-05-05T07:06:39.526Z","path":"about/index.html","comments":1,"_id":"cjgw8vdz40001oky0ucaqbmoh","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>Android 开发者，J2EE 开发者，Go 爱好者，果粉。<br>喜欢不同的语言处理不同的工作。</p>\n<h3 id=\"关于这里\"><a href=\"#关于这里\" class=\"headerlink\" title=\"关于这里\"></a>关于这里</h3><p>本 Blog 主要分享我在工作中遇到的技术难点，以及一些读书笔记，我会认真写好每一篇 Blog，力求达到精益求精。<br>分享成果，让我每天都很开心。<br>我的开源</p>\n<ol>\n<li>PubDialog<br>一款 Android 上常用的列表对话框，使用简单，功能强大，可定制性强，类似 IOS 上的 UIActionSheet。</li>\n<li>PDEXChart<br>IOS 上用 Swift 开发的图表库，在 PDChart 的基础上二次开发，支持多线图，多柱形图，不过已经废弃，改用 ios-charts 吧。</li>\n</ol>\n<h3 id=\"我的作品\"><a href=\"#我的作品\" class=\"headerlink\" title=\"我的作品\"></a>我的作品</h3><ol>\n<li>楼里</li>\n<li>京东金融数据分析 Android</li>\n<li>京东金融数据分析 IOS</li>\n<li>红茶漫游</li>\n</ol>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>最近看到有人晒自己 Github 的连续签到记录，甚是励志，自己何不也记录点什么呢？今天灵光一闪，那就记录读的书吧，顺便挑战一下自己一年可以看多少书，详情 <a href=\"/read\">点击这里</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>Android 开发者，J2EE 开发者，Go 爱好者，果粉。<br>喜欢不同的语言处理不同的工作。</p>\n<h3 id=\"关于这里\"><a href=\"#关于这里\" class=\"headerlink\" title=\"关于这里\"></a>关于这里</h3><p>本 Blog 主要分享我在工作中遇到的技术难点，以及一些读书笔记，我会认真写好每一篇 Blog，力求达到精益求精。<br>分享成果，让我每天都很开心。<br>我的开源</p>\n<ol>\n<li>PubDialog<br>一款 Android 上常用的列表对话框，使用简单，功能强大，可定制性强，类似 IOS 上的 UIActionSheet。</li>\n<li>PDEXChart<br>IOS 上用 Swift 开发的图表库，在 PDChart 的基础上二次开发，支持多线图，多柱形图，不过已经废弃，改用 ios-charts 吧。</li>\n</ol>\n<h3 id=\"我的作品\"><a href=\"#我的作品\" class=\"headerlink\" title=\"我的作品\"></a>我的作品</h3><ol>\n<li>楼里</li>\n<li>京东金融数据分析 Android</li>\n<li>京东金融数据分析 IOS</li>\n<li>红茶漫游</li>\n</ol>\n<h3 id=\"读书\"><a href=\"#读书\" class=\"headerlink\" title=\"读书\"></a>读书</h3><p>最近看到有人晒自己 Github 的连续签到记录，甚是励志，自己何不也记录点什么呢？今天灵光一闪，那就记录读的书吧，顺便挑战一下自己一年可以看多少书，详情 <a href=\"/read\">点击这里</a>。</p>\n"},{"title":"Project","layout":"project","_content":"","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n","date":"2018-05-05T07:06:34.664Z","updated":"2018-05-05T07:06:34.664Z","path":"project/index.html","comments":1,"_id":"cjgw8vdz70003oky0s96x305c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"读书","layout":"post","_content":"\n### 2015-09\n2015-09-17 创京东\n2015-09-02 星际穿越 [The Science of Interstellar]\n### 2015-08\n2015-08-12 敏捷软件需求：团队、项目群与企业级的精益需求实践\n2015-08-05 先成为自己的英雄\n### 2015-07\n2015-07-31 我敢在你怀里孤独\n2015-07-29 每一种孤独都有陪伴\n2015-07-24 iOS开发指南 从零基础到App Store上架\n### 2015-06\n2015-06-18 疯狂Java：突破程序员基本功的16课\n2015-06-10 Android应用性能优化\n### 2015-04\n2015-04-17 Swift语言快速入门\n### 2015-03\n2015-03-13 Swift语言实战入门\n2015-03-03 番茄工作法图解\n### 2015-02\n2015-02-26 Effective Java\n2015-02-05 浪潮之巅\n### 2015-01\n2015-01-12 淘宝技术这十年\n2015-01-05 三体——地球往事三部曲\n### 2014-12\n2014-12-30 啊哈 算法\n2014-12-06 深入理解Android网络编程\n2014-12-03 Android框架揭秘\n### 2014-11\n2014-11-24 深入理解Java虚拟机\n2014-11-17 Go语言程序设计\n2014-11-05 50 Android Hacks","source":"read/index.md","raw":"---\ntitle: 读书\nlayout: post\n---\n\n### 2015-09\n2015-09-17 创京东\n2015-09-02 星际穿越 [The Science of Interstellar]\n### 2015-08\n2015-08-12 敏捷软件需求：团队、项目群与企业级的精益需求实践\n2015-08-05 先成为自己的英雄\n### 2015-07\n2015-07-31 我敢在你怀里孤独\n2015-07-29 每一种孤独都有陪伴\n2015-07-24 iOS开发指南 从零基础到App Store上架\n### 2015-06\n2015-06-18 疯狂Java：突破程序员基本功的16课\n2015-06-10 Android应用性能优化\n### 2015-04\n2015-04-17 Swift语言快速入门\n### 2015-03\n2015-03-13 Swift语言实战入门\n2015-03-03 番茄工作法图解\n### 2015-02\n2015-02-26 Effective Java\n2015-02-05 浪潮之巅\n### 2015-01\n2015-01-12 淘宝技术这十年\n2015-01-05 三体——地球往事三部曲\n### 2014-12\n2014-12-30 啊哈 算法\n2014-12-06 深入理解Android网络编程\n2014-12-03 Android框架揭秘\n### 2014-11\n2014-11-24 深入理解Java虚拟机\n2014-11-17 Go语言程序设计\n2014-11-05 50 Android Hacks","date":"2018-05-05T07:47:55.697Z","updated":"2018-05-05T07:47:55.697Z","path":"read/index.html","comments":1,"_id":"cjgw8ve0o0018oky090umijh0","content":"<h3 id=\"2015-09\"><a href=\"#2015-09\" class=\"headerlink\" title=\"2015-09\"></a>2015-09</h3><p>2015-09-17 创京东<br>2015-09-02 星际穿越 [The Science of Interstellar]</p>\n<h3 id=\"2015-08\"><a href=\"#2015-08\" class=\"headerlink\" title=\"2015-08\"></a>2015-08</h3><p>2015-08-12 敏捷软件需求：团队、项目群与企业级的精益需求实践<br>2015-08-05 先成为自己的英雄</p>\n<h3 id=\"2015-07\"><a href=\"#2015-07\" class=\"headerlink\" title=\"2015-07\"></a>2015-07</h3><p>2015-07-31 我敢在你怀里孤独<br>2015-07-29 每一种孤独都有陪伴<br>2015-07-24 iOS开发指南 从零基础到App Store上架</p>\n<h3 id=\"2015-06\"><a href=\"#2015-06\" class=\"headerlink\" title=\"2015-06\"></a>2015-06</h3><p>2015-06-18 疯狂Java：突破程序员基本功的16课<br>2015-06-10 Android应用性能优化</p>\n<h3 id=\"2015-04\"><a href=\"#2015-04\" class=\"headerlink\" title=\"2015-04\"></a>2015-04</h3><p>2015-04-17 Swift语言快速入门</p>\n<h3 id=\"2015-03\"><a href=\"#2015-03\" class=\"headerlink\" title=\"2015-03\"></a>2015-03</h3><p>2015-03-13 Swift语言实战入门<br>2015-03-03 番茄工作法图解</p>\n<h3 id=\"2015-02\"><a href=\"#2015-02\" class=\"headerlink\" title=\"2015-02\"></a>2015-02</h3><p>2015-02-26 Effective Java<br>2015-02-05 浪潮之巅</p>\n<h3 id=\"2015-01\"><a href=\"#2015-01\" class=\"headerlink\" title=\"2015-01\"></a>2015-01</h3><p>2015-01-12 淘宝技术这十年<br>2015-01-05 三体——地球往事三部曲</p>\n<h3 id=\"2014-12\"><a href=\"#2014-12\" class=\"headerlink\" title=\"2014-12\"></a>2014-12</h3><p>2014-12-30 啊哈 算法<br>2014-12-06 深入理解Android网络编程<br>2014-12-03 Android框架揭秘</p>\n<h3 id=\"2014-11\"><a href=\"#2014-11\" class=\"headerlink\" title=\"2014-11\"></a>2014-11</h3><p>2014-11-24 深入理解Java虚拟机<br>2014-11-17 Go语言程序设计<br>2014-11-05 50 Android Hacks</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"2015-09\"><a href=\"#2015-09\" class=\"headerlink\" title=\"2015-09\"></a>2015-09</h3><p>2015-09-17 创京东<br>2015-09-02 星际穿越 [The Science of Interstellar]</p>\n<h3 id=\"2015-08\"><a href=\"#2015-08\" class=\"headerlink\" title=\"2015-08\"></a>2015-08</h3><p>2015-08-12 敏捷软件需求：团队、项目群与企业级的精益需求实践<br>2015-08-05 先成为自己的英雄</p>\n<h3 id=\"2015-07\"><a href=\"#2015-07\" class=\"headerlink\" title=\"2015-07\"></a>2015-07</h3><p>2015-07-31 我敢在你怀里孤独<br>2015-07-29 每一种孤独都有陪伴<br>2015-07-24 iOS开发指南 从零基础到App Store上架</p>\n<h3 id=\"2015-06\"><a href=\"#2015-06\" class=\"headerlink\" title=\"2015-06\"></a>2015-06</h3><p>2015-06-18 疯狂Java：突破程序员基本功的16课<br>2015-06-10 Android应用性能优化</p>\n<h3 id=\"2015-04\"><a href=\"#2015-04\" class=\"headerlink\" title=\"2015-04\"></a>2015-04</h3><p>2015-04-17 Swift语言快速入门</p>\n<h3 id=\"2015-03\"><a href=\"#2015-03\" class=\"headerlink\" title=\"2015-03\"></a>2015-03</h3><p>2015-03-13 Swift语言实战入门<br>2015-03-03 番茄工作法图解</p>\n<h3 id=\"2015-02\"><a href=\"#2015-02\" class=\"headerlink\" title=\"2015-02\"></a>2015-02</h3><p>2015-02-26 Effective Java<br>2015-02-05 浪潮之巅</p>\n<h3 id=\"2015-01\"><a href=\"#2015-01\" class=\"headerlink\" title=\"2015-01\"></a>2015-01</h3><p>2015-01-12 淘宝技术这十年<br>2015-01-05 三体——地球往事三部曲</p>\n<h3 id=\"2014-12\"><a href=\"#2014-12\" class=\"headerlink\" title=\"2014-12\"></a>2014-12</h3><p>2014-12-30 啊哈 算法<br>2014-12-06 深入理解Android网络编程<br>2014-12-03 Android框架揭秘</p>\n<h3 id=\"2014-11\"><a href=\"#2014-11\" class=\"headerlink\" title=\"2014-11\"></a>2014-11</h3><p>2014-11-24 深入理解Java虚拟机<br>2014-11-17 Go语言程序设计<br>2014-11-05 50 Android Hacks</p>\n"},{"title":"标签云","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签云\nlayout: tags\n---\n","date":"2018-05-05T07:48:07.161Z","updated":"2018-05-05T07:48:07.161Z","path":"tags/index.html","comments":1,"_id":"cjgw8ve0p001aoky0aw0j2fwx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android 应用内存溢出导致应用退出的解决方案","layout":"post","date":"2014-11-11T15:33:33.000Z","_content":"\n昨天项目里遇到了一个严重问题，用户在使用一段时间应用之后，便会非常慢，最终导致内存溢出而崩溃，这个问题几乎让我们的一切努力白费。我几乎花了一整天的时间才终于找到了问题所在。问题的原因让我完全意料不到。\n\n在分析原因的时候我使用的是 Eclipse 的 Memory AnalysisTools + DDMS，这套工具真是在关键时候解决了我的大问题。\n附上 Memory Analysis 插件的[下载地址](http://www.eclipse.org/mat/downloads.php)\n只使用DDMS也可以看出在activity切换过程中的内存变化，但是不能并发现问题的具体所在，所以我们需要MAT(Memory AnalysisTools)来分析具体是那个类引发的问题。上图\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141111211142.png)\n\n上图大家应该都看的懂吧，不懂的我简单说一下，也不要嫌弃我啰嗦:\n\n> * 1位置是开始监控 一般在启动应用之后就可以点上来查看记录了\n> * 2位置是保存分析到文件，装了Memory Analysis之后便可以直接打开分析界面\n> * 3位置是查看内存数值的区域，内存变化的过程基本上就是在这里分析出来的\n\n具体的使用大家可以参考这篇文章 [http://www.360doc.com/content/12/1023/14/203871_243274421.shtml](http://www.360doc.com/content/12/1023/14/203871_243274421.shtml)，解决问题的过程真的是非常的快乐的，我希望大家也可以通过这个过程get新技能，而不是一味的 copy。\n\n分析的过程我也就不多说了 好多次的分析才找到了问题所在，依然直接说结果:\n\n现在大家在写app的时候通常会使用一个集合来保存整个 Activity。或放在 BaseActivity 里，或放在 Application 里，\n然后在退出应用的时候遍历集合逐个调用finish方法，以此来达到退出整个应用，这些方法在网上很多写法，也是大多数人推荐的做法，但我如今碰到的问题就是这里导致的。我的测试结果是，虽然在每个activity的finish方法里把自己从容器里移除自己，但依然因为这个导致activity不能释放，如此循环往复导致了内存溢出。找到了问题所在就好解决多了，就怕有问题自己也摸不到头绪。其实如果自己控制好每个界面的启动和销毁，这样的做法完全是多此一举的，如果你实在想这样做，推荐的是使用广播的方法，在每个 Activity 里面注册一个广播，应用退出的时候通过广播来关闭所有 Activity，不要忘了在 onDestroy 里注销广播哟。\n\n### ps\n我曾经也深信不疑的使用网上的各种现成的代码，但如今，我想至少应该测试过会再使用才行，不要人云亦云，知其然知其所以然，才能最大的提升自己的能力。感谢项目经理的耐心教导。\n另外**MAT**工具推荐大家都学习一下，特别是大型项目一定要严格控制内存，否则会死的很惨。\n","source":"_posts/Android应用内存溢出导致应用退出的解决方案.md","raw":"---\ntitle: Android 应用内存溢出导致应用退出的解决方案\nlayout: post\ndate: 2014/11/11 23:33:33\ntags : 工作总结\n---\n\n昨天项目里遇到了一个严重问题，用户在使用一段时间应用之后，便会非常慢，最终导致内存溢出而崩溃，这个问题几乎让我们的一切努力白费。我几乎花了一整天的时间才终于找到了问题所在。问题的原因让我完全意料不到。\n\n在分析原因的时候我使用的是 Eclipse 的 Memory AnalysisTools + DDMS，这套工具真是在关键时候解决了我的大问题。\n附上 Memory Analysis 插件的[下载地址](http://www.eclipse.org/mat/downloads.php)\n只使用DDMS也可以看出在activity切换过程中的内存变化，但是不能并发现问题的具体所在，所以我们需要MAT(Memory AnalysisTools)来分析具体是那个类引发的问题。上图\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141111211142.png)\n\n上图大家应该都看的懂吧，不懂的我简单说一下，也不要嫌弃我啰嗦:\n\n> * 1位置是开始监控 一般在启动应用之后就可以点上来查看记录了\n> * 2位置是保存分析到文件，装了Memory Analysis之后便可以直接打开分析界面\n> * 3位置是查看内存数值的区域，内存变化的过程基本上就是在这里分析出来的\n\n具体的使用大家可以参考这篇文章 [http://www.360doc.com/content/12/1023/14/203871_243274421.shtml](http://www.360doc.com/content/12/1023/14/203871_243274421.shtml)，解决问题的过程真的是非常的快乐的，我希望大家也可以通过这个过程get新技能，而不是一味的 copy。\n\n分析的过程我也就不多说了 好多次的分析才找到了问题所在，依然直接说结果:\n\n现在大家在写app的时候通常会使用一个集合来保存整个 Activity。或放在 BaseActivity 里，或放在 Application 里，\n然后在退出应用的时候遍历集合逐个调用finish方法，以此来达到退出整个应用，这些方法在网上很多写法，也是大多数人推荐的做法，但我如今碰到的问题就是这里导致的。我的测试结果是，虽然在每个activity的finish方法里把自己从容器里移除自己，但依然因为这个导致activity不能释放，如此循环往复导致了内存溢出。找到了问题所在就好解决多了，就怕有问题自己也摸不到头绪。其实如果自己控制好每个界面的启动和销毁，这样的做法完全是多此一举的，如果你实在想这样做，推荐的是使用广播的方法，在每个 Activity 里面注册一个广播，应用退出的时候通过广播来关闭所有 Activity，不要忘了在 onDestroy 里注销广播哟。\n\n### ps\n我曾经也深信不疑的使用网上的各种现成的代码，但如今，我想至少应该测试过会再使用才行，不要人云亦云，知其然知其所以然，才能最大的提升自己的能力。感谢项目经理的耐心教导。\n另外**MAT**工具推荐大家都学习一下，特别是大型项目一定要严格控制内存，否则会死的很惨。\n","slug":"Android应用内存溢出导致应用退出的解决方案","published":1,"updated":"2018-05-05T08:36:14.348Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdz00000oky0ll26lmbl","content":"<p>昨天项目里遇到了一个严重问题，用户在使用一段时间应用之后，便会非常慢，最终导致内存溢出而崩溃，这个问题几乎让我们的一切努力白费。我几乎花了一整天的时间才终于找到了问题所在。问题的原因让我完全意料不到。</p>\n<p>在分析原因的时候我使用的是 Eclipse 的 Memory AnalysisTools + DDMS，这套工具真是在关键时候解决了我的大问题。<br>附上 Memory Analysis 插件的<a href=\"http://www.eclipse.org/mat/downloads.php\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>只使用DDMS也可以看出在activity切换过程中的内存变化，但是不能并发现问题的具体所在，所以我们需要MAT(Memory AnalysisTools)来分析具体是那个类引发的问题。上图</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141111211142.png\" alt=\"tool-editor\"></p>\n<p>上图大家应该都看的懂吧，不懂的我简单说一下，也不要嫌弃我啰嗦:</p>\n<blockquote>\n<ul>\n<li>1位置是开始监控 一般在启动应用之后就可以点上来查看记录了</li>\n<li>2位置是保存分析到文件，装了Memory Analysis之后便可以直接打开分析界面</li>\n<li>3位置是查看内存数值的区域，内存变化的过程基本上就是在这里分析出来的</li>\n</ul>\n</blockquote>\n<p>具体的使用大家可以参考这篇文章 <a href=\"http://www.360doc.com/content/12/1023/14/203871_243274421.shtml\" target=\"_blank\" rel=\"noopener\">http://www.360doc.com/content/12/1023/14/203871_243274421.shtml</a>，解决问题的过程真的是非常的快乐的，我希望大家也可以通过这个过程get新技能，而不是一味的 copy。</p>\n<p>分析的过程我也就不多说了 好多次的分析才找到了问题所在，依然直接说结果:</p>\n<p>现在大家在写app的时候通常会使用一个集合来保存整个 Activity。或放在 BaseActivity 里，或放在 Application 里，<br>然后在退出应用的时候遍历集合逐个调用finish方法，以此来达到退出整个应用，这些方法在网上很多写法，也是大多数人推荐的做法，但我如今碰到的问题就是这里导致的。我的测试结果是，虽然在每个activity的finish方法里把自己从容器里移除自己，但依然因为这个导致activity不能释放，如此循环往复导致了内存溢出。找到了问题所在就好解决多了，就怕有问题自己也摸不到头绪。其实如果自己控制好每个界面的启动和销毁，这样的做法完全是多此一举的，如果你实在想这样做，推荐的是使用广播的方法，在每个 Activity 里面注册一个广播，应用退出的时候通过广播来关闭所有 Activity，不要忘了在 onDestroy 里注销广播哟。</p>\n<h3 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h3><p>我曾经也深信不疑的使用网上的各种现成的代码，但如今，我想至少应该测试过会再使用才行，不要人云亦云，知其然知其所以然，才能最大的提升自己的能力。感谢项目经理的耐心教导。<br>另外<strong>MAT</strong>工具推荐大家都学习一下，特别是大型项目一定要严格控制内存，否则会死的很惨。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天项目里遇到了一个严重问题，用户在使用一段时间应用之后，便会非常慢，最终导致内存溢出而崩溃，这个问题几乎让我们的一切努力白费。我几乎花了一整天的时间才终于找到了问题所在。问题的原因让我完全意料不到。</p>\n<p>在分析原因的时候我使用的是 Eclipse 的 Memory AnalysisTools + DDMS，这套工具真是在关键时候解决了我的大问题。<br>附上 Memory Analysis 插件的<a href=\"http://www.eclipse.org/mat/downloads.php\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>只使用DDMS也可以看出在activity切换过程中的内存变化，但是不能并发现问题的具体所在，所以我们需要MAT(Memory AnalysisTools)来分析具体是那个类引发的问题。上图</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141111211142.png\" alt=\"tool-editor\"></p>\n<p>上图大家应该都看的懂吧，不懂的我简单说一下，也不要嫌弃我啰嗦:</p>\n<blockquote>\n<ul>\n<li>1位置是开始监控 一般在启动应用之后就可以点上来查看记录了</li>\n<li>2位置是保存分析到文件，装了Memory Analysis之后便可以直接打开分析界面</li>\n<li>3位置是查看内存数值的区域，内存变化的过程基本上就是在这里分析出来的</li>\n</ul>\n</blockquote>\n<p>具体的使用大家可以参考这篇文章 <a href=\"http://www.360doc.com/content/12/1023/14/203871_243274421.shtml\" target=\"_blank\" rel=\"noopener\">http://www.360doc.com/content/12/1023/14/203871_243274421.shtml</a>，解决问题的过程真的是非常的快乐的，我希望大家也可以通过这个过程get新技能，而不是一味的 copy。</p>\n<p>分析的过程我也就不多说了 好多次的分析才找到了问题所在，依然直接说结果:</p>\n<p>现在大家在写app的时候通常会使用一个集合来保存整个 Activity。或放在 BaseActivity 里，或放在 Application 里，<br>然后在退出应用的时候遍历集合逐个调用finish方法，以此来达到退出整个应用，这些方法在网上很多写法，也是大多数人推荐的做法，但我如今碰到的问题就是这里导致的。我的测试结果是，虽然在每个activity的finish方法里把自己从容器里移除自己，但依然因为这个导致activity不能释放，如此循环往复导致了内存溢出。找到了问题所在就好解决多了，就怕有问题自己也摸不到头绪。其实如果自己控制好每个界面的启动和销毁，这样的做法完全是多此一举的，如果你实在想这样做，推荐的是使用广播的方法，在每个 Activity 里面注册一个广播，应用退出的时候通过广播来关闭所有 Activity，不要忘了在 onDestroy 里注销广播哟。</p>\n<h3 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h3><p>我曾经也深信不疑的使用网上的各种现成的代码，但如今，我想至少应该测试过会再使用才行，不要人云亦云，知其然知其所以然，才能最大的提升自己的能力。感谢项目经理的耐心教导。<br>另外<strong>MAT</strong>工具推荐大家都学习一下，特别是大型项目一定要严格控制内存，否则会死的很惨。</p>\n"},{"title":"Android 简单实现圆形头像(续)","layout":"post","date":"2014-10-11T13:16:25.000Z","_content":"\n上一篇文章里面详细讲解了用自己的方式实现圆形头像，如今发现之前的代码效率并不高，因为每次都要 createBitmap 和转换图片，createBitmap 是一件很费内存的事，而频繁转换是一件很费 cpu 的事，这样费手机资源肯定必然是不行的，并且随着自己对 Imageloader 的深入使用，发现使用 Imageloader 还有另外一种更简单的方法来实现这样的效果，或许能解决这样的问题。\n\n------\n\n下面我详细介绍下，先看代码:\n\n```java\n DisplayImageOptions options = new DisplayImageOptions.Builder()\n    .showImageForEmptyUri(R.drawable.default_image)\n    .showImageOnFail(R.drawable.default_image)\n    .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)\n    .bitmapConfig(Config.RGB_565)\n\t.cacheInMemory(true)\n\t.cacheOnDisk(true)\n\t.resetViewBeforeLoading(true)\n\t.displayer(new RoundedBitmapDisplayer(112)).build();\n```\n\n这里面的 displayer 方法可以接收实现 BitmapDisplayer 接口的对象，关键点就在这里，Imageloader 有默认的可以实现圆角的 Displayer 那就是 FadeInBitmapDisplayer（int durationMillis），durationMillis 就是圆角的半径。用他就不用之前自己那么麻烦的方法了。\n\n### 完整代码\nImageloader 的初始化方法没变，同上一篇 blog，这里只展示一下显示的工具类。\n\n```java\n//显示圆角的option\npublic static DisplayImageOptions options ;\n\t\npublic static <T extends ImageView> void displayImage2Circle(T container， String url) {\n    if(options == null){\n        options = new DisplayImageOptions.Builder()\n            .showImageForEmptyUri(R.drawable.default_image)\n            .showImageOnFail(R.drawable.default_image)\n            .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)\n            .bitmapConfig(Config.RGB_565)\n            .cacheInMemory(true)\n            .cacheOnDisk(true)\n            .resetViewBeforeLoading(true)\n            // 我们的图片大小是70dp 所以我这里半径=70*1.6 ，其他情况可以自己算，或者动态设置\n            .displayer(new RoundedBitmapDisplayer(112)) \n            .build();\n    }\n\tImageLoader.getInstance().displayImage(url, container, options);\n}\n```\n\n### 附 :\n其他 displayer\n\n```java\ndisplayer：  \n        RoundedBitmapDisplayer（int roundPixels）设置圆角图片  \n        FakeBitmapDisplayer（）这个类什么都没做  \n        FadeInBitmapDisplayer（int durationMillis）设置图片渐显的时间  \n        SimpleBitmapDisplayer()正常显示一张图片\n```\n\n### 疑问\n\nImageloader 缓存的图片是转换之前的 bitmap 呢还是之后的呢？\n> * 如果是之前的，那执行效率并不会较之前我实现的方法提高多少，只是转换的工作交给了 Imageloader，每次还是要转换.\n> * 如果缓存的是转换之后的圆角 bitmap 那效率就会大大提高，而我也希望是这样的，但这样拓展性可能会降低。\n\n等有时间了我会深入研究一下 Imageloader 的源码，把结果写出来。\n","source":"_posts/Android简单实现圆形头像(续).md","raw":"---\ntitle: Android 简单实现圆形头像(续)\nlayout: post\ndate: 2014/10/11 21:16:25\ntags : 工作总结\n---\n\n上一篇文章里面详细讲解了用自己的方式实现圆形头像，如今发现之前的代码效率并不高，因为每次都要 createBitmap 和转换图片，createBitmap 是一件很费内存的事，而频繁转换是一件很费 cpu 的事，这样费手机资源肯定必然是不行的，并且随着自己对 Imageloader 的深入使用，发现使用 Imageloader 还有另外一种更简单的方法来实现这样的效果，或许能解决这样的问题。\n\n------\n\n下面我详细介绍下，先看代码:\n\n```java\n DisplayImageOptions options = new DisplayImageOptions.Builder()\n    .showImageForEmptyUri(R.drawable.default_image)\n    .showImageOnFail(R.drawable.default_image)\n    .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)\n    .bitmapConfig(Config.RGB_565)\n\t.cacheInMemory(true)\n\t.cacheOnDisk(true)\n\t.resetViewBeforeLoading(true)\n\t.displayer(new RoundedBitmapDisplayer(112)).build();\n```\n\n这里面的 displayer 方法可以接收实现 BitmapDisplayer 接口的对象，关键点就在这里，Imageloader 有默认的可以实现圆角的 Displayer 那就是 FadeInBitmapDisplayer（int durationMillis），durationMillis 就是圆角的半径。用他就不用之前自己那么麻烦的方法了。\n\n### 完整代码\nImageloader 的初始化方法没变，同上一篇 blog，这里只展示一下显示的工具类。\n\n```java\n//显示圆角的option\npublic static DisplayImageOptions options ;\n\t\npublic static <T extends ImageView> void displayImage2Circle(T container， String url) {\n    if(options == null){\n        options = new DisplayImageOptions.Builder()\n            .showImageForEmptyUri(R.drawable.default_image)\n            .showImageOnFail(R.drawable.default_image)\n            .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)\n            .bitmapConfig(Config.RGB_565)\n            .cacheInMemory(true)\n            .cacheOnDisk(true)\n            .resetViewBeforeLoading(true)\n            // 我们的图片大小是70dp 所以我这里半径=70*1.6 ，其他情况可以自己算，或者动态设置\n            .displayer(new RoundedBitmapDisplayer(112)) \n            .build();\n    }\n\tImageLoader.getInstance().displayImage(url, container, options);\n}\n```\n\n### 附 :\n其他 displayer\n\n```java\ndisplayer：  \n        RoundedBitmapDisplayer（int roundPixels）设置圆角图片  \n        FakeBitmapDisplayer（）这个类什么都没做  \n        FadeInBitmapDisplayer（int durationMillis）设置图片渐显的时间  \n        SimpleBitmapDisplayer()正常显示一张图片\n```\n\n### 疑问\n\nImageloader 缓存的图片是转换之前的 bitmap 呢还是之后的呢？\n> * 如果是之前的，那执行效率并不会较之前我实现的方法提高多少，只是转换的工作交给了 Imageloader，每次还是要转换.\n> * 如果缓存的是转换之后的圆角 bitmap 那效率就会大大提高，而我也希望是这样的，但这样拓展性可能会降低。\n\n等有时间了我会深入研究一下 Imageloader 的源码，把结果写出来。\n","slug":"Android简单实现圆形头像(续)","published":1,"updated":"2018-05-05T08:34:50.503Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdz50002oky01mc8nmio","content":"<p>上一篇文章里面详细讲解了用自己的方式实现圆形头像，如今发现之前的代码效率并不高，因为每次都要 createBitmap 和转换图片，createBitmap 是一件很费内存的事，而频繁转换是一件很费 cpu 的事，这样费手机资源肯定必然是不行的，并且随着自己对 Imageloader 的深入使用，发现使用 Imageloader 还有另外一种更简单的方法来实现这样的效果，或许能解决这样的问题。</p>\n<hr>\n<p>下面我详细介绍下，先看代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DisplayImageOptions options = <span class=\"keyword\">new</span> DisplayImageOptions.Builder()</span><br><span class=\"line\">   .showImageForEmptyUri(R.drawable.default_image)</span><br><span class=\"line\">   .showImageOnFail(R.drawable.default_image)</span><br><span class=\"line\">   .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)</span><br><span class=\"line\">   .bitmapConfig(Config.RGB_565)</span><br><span class=\"line\">.cacheInMemory(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">.cacheOnDisk(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">.resetViewBeforeLoading(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">.displayer(<span class=\"keyword\">new</span> RoundedBitmapDisplayer(<span class=\"number\">112</span>)).build();</span><br></pre></td></tr></table></figure>\n<p>这里面的 displayer 方法可以接收实现 BitmapDisplayer 接口的对象，关键点就在这里，Imageloader 有默认的可以实现圆角的 Displayer 那就是 FadeInBitmapDisplayer（int durationMillis），durationMillis 就是圆角的半径。用他就不用之前自己那么麻烦的方法了。</p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>Imageloader 的初始化方法没变，同上一篇 blog，这里只展示一下显示的工具类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//显示圆角的option</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DisplayImageOptions options ;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends ImageView&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayImage2Circle</span><span class=\"params\">(T container， String url)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(options == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        options = <span class=\"keyword\">new</span> DisplayImageOptions.Builder()</span><br><span class=\"line\">            .showImageForEmptyUri(R.drawable.default_image)</span><br><span class=\"line\">            .showImageOnFail(R.drawable.default_image)</span><br><span class=\"line\">            .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)</span><br><span class=\"line\">            .bitmapConfig(Config.RGB_565)</span><br><span class=\"line\">            .cacheInMemory(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .cacheOnDisk(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .resetViewBeforeLoading(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 我们的图片大小是70dp 所以我这里半径=70*1.6 ，其他情况可以自己算，或者动态设置</span></span><br><span class=\"line\">            .displayer(<span class=\"keyword\">new</span> RoundedBitmapDisplayer(<span class=\"number\">112</span>)) </span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tImageLoader.getInstance().displayImage(url, container, options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附 :\"></a>附 :</h3><p>其他 displayer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">displayer：  </span><br><span class=\"line\">        RoundedBitmapDisplayer（<span class=\"keyword\">int</span> roundPixels）设置圆角图片  </span><br><span class=\"line\">        FakeBitmapDisplayer（）这个类什么都没做  </span><br><span class=\"line\">        FadeInBitmapDisplayer（<span class=\"keyword\">int</span> durationMillis）设置图片渐显的时间  </span><br><span class=\"line\">        SimpleBitmapDisplayer()正常显示一张图片</span><br></pre></td></tr></table></figure>\n<h3 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h3><p>Imageloader 缓存的图片是转换之前的 bitmap 呢还是之后的呢？</p>\n<blockquote>\n<ul>\n<li>如果是之前的，那执行效率并不会较之前我实现的方法提高多少，只是转换的工作交给了 Imageloader，每次还是要转换.</li>\n<li>如果缓存的是转换之后的圆角 bitmap 那效率就会大大提高，而我也希望是这样的，但这样拓展性可能会降低。</li>\n</ul>\n</blockquote>\n<p>等有时间了我会深入研究一下 Imageloader 的源码，把结果写出来。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇文章里面详细讲解了用自己的方式实现圆形头像，如今发现之前的代码效率并不高，因为每次都要 createBitmap 和转换图片，createBitmap 是一件很费内存的事，而频繁转换是一件很费 cpu 的事，这样费手机资源肯定必然是不行的，并且随着自己对 Imageloader 的深入使用，发现使用 Imageloader 还有另外一种更简单的方法来实现这样的效果，或许能解决这样的问题。</p>\n<hr>\n<p>下面我详细介绍下，先看代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DisplayImageOptions options = <span class=\"keyword\">new</span> DisplayImageOptions.Builder()</span><br><span class=\"line\">   .showImageForEmptyUri(R.drawable.default_image)</span><br><span class=\"line\">   .showImageOnFail(R.drawable.default_image)</span><br><span class=\"line\">   .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)</span><br><span class=\"line\">   .bitmapConfig(Config.RGB_565)</span><br><span class=\"line\">.cacheInMemory(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">.cacheOnDisk(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">.resetViewBeforeLoading(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">.displayer(<span class=\"keyword\">new</span> RoundedBitmapDisplayer(<span class=\"number\">112</span>)).build();</span><br></pre></td></tr></table></figure>\n<p>这里面的 displayer 方法可以接收实现 BitmapDisplayer 接口的对象，关键点就在这里，Imageloader 有默认的可以实现圆角的 Displayer 那就是 FadeInBitmapDisplayer（int durationMillis），durationMillis 就是圆角的半径。用他就不用之前自己那么麻烦的方法了。</p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><p>Imageloader 的初始化方法没变，同上一篇 blog，这里只展示一下显示的工具类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//显示圆角的option</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DisplayImageOptions options ;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends ImageView&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayImage2Circle</span><span class=\"params\">(T container， String url)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(options == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        options = <span class=\"keyword\">new</span> DisplayImageOptions.Builder()</span><br><span class=\"line\">            .showImageForEmptyUri(R.drawable.default_image)</span><br><span class=\"line\">            .showImageOnFail(R.drawable.default_image)</span><br><span class=\"line\">            .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)</span><br><span class=\"line\">            .bitmapConfig(Config.RGB_565)</span><br><span class=\"line\">            .cacheInMemory(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .cacheOnDisk(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .resetViewBeforeLoading(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            <span class=\"comment\">// 我们的图片大小是70dp 所以我这里半径=70*1.6 ，其他情况可以自己算，或者动态设置</span></span><br><span class=\"line\">            .displayer(<span class=\"keyword\">new</span> RoundedBitmapDisplayer(<span class=\"number\">112</span>)) </span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tImageLoader.getInstance().displayImage(url, container, options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附 :\"></a>附 :</h3><p>其他 displayer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">displayer：  </span><br><span class=\"line\">        RoundedBitmapDisplayer（<span class=\"keyword\">int</span> roundPixels）设置圆角图片  </span><br><span class=\"line\">        FakeBitmapDisplayer（）这个类什么都没做  </span><br><span class=\"line\">        FadeInBitmapDisplayer（<span class=\"keyword\">int</span> durationMillis）设置图片渐显的时间  </span><br><span class=\"line\">        SimpleBitmapDisplayer()正常显示一张图片</span><br></pre></td></tr></table></figure>\n<h3 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h3><p>Imageloader 缓存的图片是转换之前的 bitmap 呢还是之后的呢？</p>\n<blockquote>\n<ul>\n<li>如果是之前的，那执行效率并不会较之前我实现的方法提高多少，只是转换的工作交给了 Imageloader，每次还是要转换.</li>\n<li>如果缓存的是转换之后的圆角 bitmap 那效率就会大大提高，而我也希望是这样的，但这样拓展性可能会降低。</li>\n</ul>\n</blockquote>\n<p>等有时间了我会深入研究一下 Imageloader 的源码，把结果写出来。</p>\n"},{"title":"Android 简单实现圆形头像","layout":"post","date":"2014-09-30T02:11:44.000Z","_content":"\n今天项目中即时通信工具部分要把好友头像由方形转换成圆形，大概也是跟上时代的潮流吧，毕竟连 QQ 都开始使用圆形头像了，我在这里记录一下修改过程。\n\n在网上找了一番之后，大概解决方法有两种\n> * 使用自定义组件继承 ImageView\n> * 通过对 BitMap 重绘得到\n\n第一种方式，有许多开源框架可以实现，如 [**CircleImageView**](https://github.com/nostra13/Android-Universal-Image-Loader)&nbsp;,由于我们项目中图片缓存及显示使用的是 [**Android-Universal-Image-Loader**](https://github.com/nostra13/Android-Universal-Image-Loader)，而他本身支持在获取到网络图片之后增加回调，那我毫无疑问的选择了第二种方式实现，\n\n首先是圆形图片转换的方法\n\n```java\n/**\n * 将图片转为圆型  不标准的图形从中心截取\n * \n * @param bitmap\n * @return\n */\npublic static Bitmap getRoundedCornerBitmap(Bitmap bitmap) {\n\tint width = bitmap.getWidth();\n\tint height = bitmap.getHeight();\n\tBitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);\n\tCanvas canvas = new Canvas(output);\n\t// 切圆的直径\n\tint minLength = width > height ? height : width;\n\tfinal int color = 0xff424242;\n\tfinal Paint paint = new Paint();\n\tint x = (width - minLength) / 2;\n\tint y = (height - minLength) / 2;\n\tfinal Rect rect = new Rect(x, y, x + minLength, y + minLength);\n\tfinal RectF rectF = new RectF(rect);\n\tfinal float roundPx = minLength / 2;\n\n\tpaint.setAntiAlias(true);\n\tcanvas.drawARGB(0, 0, 0, 0);\n\tpaint.setColor(color);\n\tcanvas.drawRoundRect(rectF, roundPx, roundPx, paint);\n\tpaint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));\n\tcanvas.drawBitmap(bitmap, rect, rect, paint);\n\treturn output;\n}\n```\n再然后是显示图片工具类\n\n```java\npublic static SimpleImageLoadingListener listener;\n\npublic static <T extends ImageView> void displayImage2Circle(T container, String url) {\n\tif (listener == null) {\n\t\tlistener = new SimpleImageLoadingListener() {\n\t\t\t@Override\n\t\t\tpublic void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n\t\t\t\tsuper.onLoadingComplete(imageUri, view, loadedImage);\n\t\t\t\t((ImageView) view).setImageBitmap(getRoundedCornerBitmap(loadedImage));\n\t\t\t}\n\t\t};\n\t}\n\tImageLoader.getInstance().displayImage(url, container, listener);\n}\n```\n这样只要是需要把图片显示为圆形的地方直接调用 displayImage2Circle 这个方法即可\n\n\n------\n\n本以为已经大功告成，没想到使用之后却发现图片四周仿佛被切掉一部分一样，如图:\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20140930151619.png)\n\n> * 起先以为是图片有白边，后来发现不是，[图片地址](http://img0.bdstatic.com/img/image/shouye/mxzyq-11795342220.jpg)\n> * 然后又以为是半径没算对,验证之后再次被排除\n> * 最终把原因定位到了 Image-Loader 上,解决办法如下:\n\nImageLoaderConfiguration 的 defaultDisplayImageOptions 方法需要一个 DisplayImageOptions 参数而 DisplayImageOptions 的参数的 imageScaleType 属性默认的是 ImageScaleType.IN_SAMPLE_POWER_OF_2 就是这个属性导致的图片不圆,查了一下文档\n\n```java\n/** \n * 图片的缩放方式 \n */  \nimageScaleType(ImageScaleType imageScaleType)  \nimageScaleType:  \n    EXACTLY :图像将完全按比例缩小的目标大小  \n    EXACTLY_STRETCHED:图片会完全缩放到目标大小  \n    IN_SAMPLE_INT:图像将被二次采样,并且倍数为整数倍  \n    IN_SAMPLE_POWER_OF_2:图片将降低2倍，直到下一减少步骤，使图像更小的目标大小  \n    NONE:图片不会调整  \n```\n\nIN_SAMPLE_POWER_OF_2 模式下缩放是成倍缩放的所以导致实际显示的要比我设定的宽一些,改成 EXACTLY_STRETCHED 之后问题得到解决\n\n最后展示一下最终效果\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20140930154619.png)\n\n以及 Image-Loader 的完整设置\n\n```java\nprivate void initImageLoader() {\n\tDisplayImageOptions options = new DisplayImageOptions.Builder()\n    .showImageForEmptyUri(R.drawable.default_image) \n    .showImageOnFail(R.drawable.default_image) \n    .imageScaleType(ImageScaleType.EXACTLY_STRETCHED) \n    .bitmapConfig(Config.RGB_565) \n    .cacheInMemory(true)\n    .cacheOnDisk(true)\n    .resetViewBeforeLoading(true)\n    .build();\n\t\n\tFile cacheDir = StorageUtils.getOwnCacheDirectory(getApplicationContext(), Util.getCachePath()); \n\t\n\tImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this)\n    .denyCacheImageMultipleSizesInMemory()\n    .memoryCache(new LruMemoryCache(2 * 1024 * 1024))\n    .threadPoolSize(4)\n    .memoryCacheSize(2 * 1024 * 1024)\n    .diskCache(new UnlimitedDiscCache(cacheDir)) // 缓存路径\n    .diskCacheSize(50 * 1024 * 1024)\n    .diskCacheFileCount(100)\n    .defaultDisplayImageOptions(options) \n    .build();\n\t\n\t ImageLoader.getInstance().init(config);  \n\n}\n```\n\n公司项目我就不放源码了，核心代码都在上面了，有问题可以和我联系。\n","source":"_posts/Android简单实现圆形头像.md","raw":"---\ntitle: Android 简单实现圆形头像\nlayout: post\ndate: 2014/9/30 10:11:44\ntags : 工作总结\n---\n\n今天项目中即时通信工具部分要把好友头像由方形转换成圆形，大概也是跟上时代的潮流吧，毕竟连 QQ 都开始使用圆形头像了，我在这里记录一下修改过程。\n\n在网上找了一番之后，大概解决方法有两种\n> * 使用自定义组件继承 ImageView\n> * 通过对 BitMap 重绘得到\n\n第一种方式，有许多开源框架可以实现，如 [**CircleImageView**](https://github.com/nostra13/Android-Universal-Image-Loader)&nbsp;,由于我们项目中图片缓存及显示使用的是 [**Android-Universal-Image-Loader**](https://github.com/nostra13/Android-Universal-Image-Loader)，而他本身支持在获取到网络图片之后增加回调，那我毫无疑问的选择了第二种方式实现，\n\n首先是圆形图片转换的方法\n\n```java\n/**\n * 将图片转为圆型  不标准的图形从中心截取\n * \n * @param bitmap\n * @return\n */\npublic static Bitmap getRoundedCornerBitmap(Bitmap bitmap) {\n\tint width = bitmap.getWidth();\n\tint height = bitmap.getHeight();\n\tBitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);\n\tCanvas canvas = new Canvas(output);\n\t// 切圆的直径\n\tint minLength = width > height ? height : width;\n\tfinal int color = 0xff424242;\n\tfinal Paint paint = new Paint();\n\tint x = (width - minLength) / 2;\n\tint y = (height - minLength) / 2;\n\tfinal Rect rect = new Rect(x, y, x + minLength, y + minLength);\n\tfinal RectF rectF = new RectF(rect);\n\tfinal float roundPx = minLength / 2;\n\n\tpaint.setAntiAlias(true);\n\tcanvas.drawARGB(0, 0, 0, 0);\n\tpaint.setColor(color);\n\tcanvas.drawRoundRect(rectF, roundPx, roundPx, paint);\n\tpaint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));\n\tcanvas.drawBitmap(bitmap, rect, rect, paint);\n\treturn output;\n}\n```\n再然后是显示图片工具类\n\n```java\npublic static SimpleImageLoadingListener listener;\n\npublic static <T extends ImageView> void displayImage2Circle(T container, String url) {\n\tif (listener == null) {\n\t\tlistener = new SimpleImageLoadingListener() {\n\t\t\t@Override\n\t\t\tpublic void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {\n\t\t\t\tsuper.onLoadingComplete(imageUri, view, loadedImage);\n\t\t\t\t((ImageView) view).setImageBitmap(getRoundedCornerBitmap(loadedImage));\n\t\t\t}\n\t\t};\n\t}\n\tImageLoader.getInstance().displayImage(url, container, listener);\n}\n```\n这样只要是需要把图片显示为圆形的地方直接调用 displayImage2Circle 这个方法即可\n\n\n------\n\n本以为已经大功告成，没想到使用之后却发现图片四周仿佛被切掉一部分一样，如图:\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20140930151619.png)\n\n> * 起先以为是图片有白边，后来发现不是，[图片地址](http://img0.bdstatic.com/img/image/shouye/mxzyq-11795342220.jpg)\n> * 然后又以为是半径没算对,验证之后再次被排除\n> * 最终把原因定位到了 Image-Loader 上,解决办法如下:\n\nImageLoaderConfiguration 的 defaultDisplayImageOptions 方法需要一个 DisplayImageOptions 参数而 DisplayImageOptions 的参数的 imageScaleType 属性默认的是 ImageScaleType.IN_SAMPLE_POWER_OF_2 就是这个属性导致的图片不圆,查了一下文档\n\n```java\n/** \n * 图片的缩放方式 \n */  \nimageScaleType(ImageScaleType imageScaleType)  \nimageScaleType:  \n    EXACTLY :图像将完全按比例缩小的目标大小  \n    EXACTLY_STRETCHED:图片会完全缩放到目标大小  \n    IN_SAMPLE_INT:图像将被二次采样,并且倍数为整数倍  \n    IN_SAMPLE_POWER_OF_2:图片将降低2倍，直到下一减少步骤，使图像更小的目标大小  \n    NONE:图片不会调整  \n```\n\nIN_SAMPLE_POWER_OF_2 模式下缩放是成倍缩放的所以导致实际显示的要比我设定的宽一些,改成 EXACTLY_STRETCHED 之后问题得到解决\n\n最后展示一下最终效果\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20140930154619.png)\n\n以及 Image-Loader 的完整设置\n\n```java\nprivate void initImageLoader() {\n\tDisplayImageOptions options = new DisplayImageOptions.Builder()\n    .showImageForEmptyUri(R.drawable.default_image) \n    .showImageOnFail(R.drawable.default_image) \n    .imageScaleType(ImageScaleType.EXACTLY_STRETCHED) \n    .bitmapConfig(Config.RGB_565) \n    .cacheInMemory(true)\n    .cacheOnDisk(true)\n    .resetViewBeforeLoading(true)\n    .build();\n\t\n\tFile cacheDir = StorageUtils.getOwnCacheDirectory(getApplicationContext(), Util.getCachePath()); \n\t\n\tImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this)\n    .denyCacheImageMultipleSizesInMemory()\n    .memoryCache(new LruMemoryCache(2 * 1024 * 1024))\n    .threadPoolSize(4)\n    .memoryCacheSize(2 * 1024 * 1024)\n    .diskCache(new UnlimitedDiscCache(cacheDir)) // 缓存路径\n    .diskCacheSize(50 * 1024 * 1024)\n    .diskCacheFileCount(100)\n    .defaultDisplayImageOptions(options) \n    .build();\n\t\n\t ImageLoader.getInstance().init(config);  \n\n}\n```\n\n公司项目我就不放源码了，核心代码都在上面了，有问题可以和我联系。\n","slug":"Android简单实现圆形头像","published":1,"updated":"2018-05-05T08:34:37.254Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzb0005oky0v75tvery","content":"<p>今天项目中即时通信工具部分要把好友头像由方形转换成圆形，大概也是跟上时代的潮流吧，毕竟连 QQ 都开始使用圆形头像了，我在这里记录一下修改过程。</p>\n<p>在网上找了一番之后，大概解决方法有两种</p>\n<blockquote>\n<ul>\n<li>使用自定义组件继承 ImageView</li>\n<li>通过对 BitMap 重绘得到</li>\n</ul>\n</blockquote>\n<p>第一种方式，有许多开源框架可以实现，如 <a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\" target=\"_blank\" rel=\"noopener\"><strong>CircleImageView</strong></a>&nbsp;,由于我们项目中图片缓存及显示使用的是 <a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\" target=\"_blank\" rel=\"noopener\"><strong>Android-Universal-Image-Loader</strong></a>，而他本身支持在获取到网络图片之后增加回调，那我毫无疑问的选择了第二种方式实现，</p>\n<p>首先是圆形图片转换的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将图片转为圆型  不标准的图形从中心截取</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bitmap</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">getRoundedCornerBitmap</span><span class=\"params\">(Bitmap bitmap)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> width = bitmap.getWidth();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> height = bitmap.getHeight();</span><br><span class=\"line\">\tBitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);</span><br><span class=\"line\">\tCanvas canvas = <span class=\"keyword\">new</span> Canvas(output);</span><br><span class=\"line\">\t<span class=\"comment\">// 切圆的直径</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> minLength = width &gt; height ? height : width;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> color = <span class=\"number\">0xff424242</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Paint paint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = (width - minLength) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y = (height - minLength) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Rect rect = <span class=\"keyword\">new</span> Rect(x, y, x + minLength, y + minLength);</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> RectF rectF = <span class=\"keyword\">new</span> RectF(rect);</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> roundPx = minLength / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpaint.setAntiAlias(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tcanvas.drawARGB(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tpaint.setColor(color);</span><br><span class=\"line\">\tcanvas.drawRoundRect(rectF, roundPx, roundPx, paint);</span><br><span class=\"line\">\tpaint.setXfermode(<span class=\"keyword\">new</span> PorterDuffXfermode(Mode.SRC_IN));</span><br><span class=\"line\">\tcanvas.drawBitmap(bitmap, rect, rect, paint);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再然后是显示图片工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SimpleImageLoadingListener listener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends ImageView&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayImage2Circle</span><span class=\"params\">(T container, String url)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (listener == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tlistener = <span class=\"keyword\">new</span> SimpleImageLoadingListener() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadingComplete</span><span class=\"params\">(String imageUri, View view, Bitmap loadedImage)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">super</span>.onLoadingComplete(imageUri, view, loadedImage);</span><br><span class=\"line\">\t\t\t\t((ImageView) view).setImageBitmap(getRoundedCornerBitmap(loadedImage));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tImageLoader.getInstance().displayImage(url, container, listener);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样只要是需要把图片显示为圆形的地方直接调用 displayImage2Circle 这个方法即可</p>\n<hr>\n<p>本以为已经大功告成，没想到使用之后却发现图片四周仿佛被切掉一部分一样，如图:</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20140930151619.png\" alt=\"tool-editor\"></p>\n<blockquote>\n<ul>\n<li>起先以为是图片有白边，后来发现不是，<a href=\"http://img0.bdstatic.com/img/image/shouye/mxzyq-11795342220.jpg\" target=\"_blank\" rel=\"noopener\">图片地址</a></li>\n<li>然后又以为是半径没算对,验证之后再次被排除</li>\n<li>最终把原因定位到了 Image-Loader 上,解决办法如下:</li>\n</ul>\n</blockquote>\n<p>ImageLoaderConfiguration 的 defaultDisplayImageOptions 方法需要一个 DisplayImageOptions 参数而 DisplayImageOptions 的参数的 imageScaleType 属性默认的是 ImageScaleType.IN_SAMPLE_POWER_OF_2 就是这个属性导致的图片不圆,查了一下文档</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 图片的缩放方式 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\">imageScaleType(ImageScaleType imageScaleType)  </span><br><span class=\"line\">imageScaleType:  </span><br><span class=\"line\">    EXACTLY :图像将完全按比例缩小的目标大小  </span><br><span class=\"line\">    EXACTLY_STRETCHED:图片会完全缩放到目标大小  </span><br><span class=\"line\">    IN_SAMPLE_INT:图像将被二次采样,并且倍数为整数倍  </span><br><span class=\"line\">    IN_SAMPLE_POWER_OF_2:图片将降低<span class=\"number\">2</span>倍，直到下一减少步骤，使图像更小的目标大小  </span><br><span class=\"line\">    NONE:图片不会调整</span><br></pre></td></tr></table></figure>\n<p>IN_SAMPLE_POWER_OF_2 模式下缩放是成倍缩放的所以导致实际显示的要比我设定的宽一些,改成 EXACTLY_STRETCHED 之后问题得到解决</p>\n<p>最后展示一下最终效果</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20140930154619.png\" alt=\"tool-editor\"></p>\n<p>以及 Image-Loader 的完整设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initImageLoader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tDisplayImageOptions options = <span class=\"keyword\">new</span> DisplayImageOptions.Builder()</span><br><span class=\"line\">    .showImageForEmptyUri(R.drawable.default_image) </span><br><span class=\"line\">    .showImageOnFail(R.drawable.default_image) </span><br><span class=\"line\">    .imageScaleType(ImageScaleType.EXACTLY_STRETCHED) </span><br><span class=\"line\">    .bitmapConfig(Config.RGB_565) </span><br><span class=\"line\">    .cacheInMemory(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    .cacheOnDisk(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    .resetViewBeforeLoading(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tFile cacheDir = StorageUtils.getOwnCacheDirectory(getApplicationContext(), Util.getCachePath()); </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tImageLoaderConfiguration config = <span class=\"keyword\">new</span> ImageLoaderConfiguration.Builder(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    .denyCacheImageMultipleSizesInMemory()</span><br><span class=\"line\">    .memoryCache(<span class=\"keyword\">new</span> LruMemoryCache(<span class=\"number\">2</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>))</span><br><span class=\"line\">    .threadPoolSize(<span class=\"number\">4</span>)</span><br><span class=\"line\">    .memoryCacheSize(<span class=\"number\">2</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>)</span><br><span class=\"line\">    .diskCache(<span class=\"keyword\">new</span> UnlimitedDiscCache(cacheDir)) <span class=\"comment\">// 缓存路径</span></span><br><span class=\"line\">    .diskCacheSize(<span class=\"number\">50</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>)</span><br><span class=\"line\">    .diskCacheFileCount(<span class=\"number\">100</span>)</span><br><span class=\"line\">    .defaultDisplayImageOptions(options) </span><br><span class=\"line\">    .build();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t ImageLoader.getInstance().init(config);  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>公司项目我就不放源码了，核心代码都在上面了，有问题可以和我联系。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天项目中即时通信工具部分要把好友头像由方形转换成圆形，大概也是跟上时代的潮流吧，毕竟连 QQ 都开始使用圆形头像了，我在这里记录一下修改过程。</p>\n<p>在网上找了一番之后，大概解决方法有两种</p>\n<blockquote>\n<ul>\n<li>使用自定义组件继承 ImageView</li>\n<li>通过对 BitMap 重绘得到</li>\n</ul>\n</blockquote>\n<p>第一种方式，有许多开源框架可以实现，如 <a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\" target=\"_blank\" rel=\"noopener\"><strong>CircleImageView</strong></a>&nbsp;,由于我们项目中图片缓存及显示使用的是 <a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\" target=\"_blank\" rel=\"noopener\"><strong>Android-Universal-Image-Loader</strong></a>，而他本身支持在获取到网络图片之后增加回调，那我毫无疑问的选择了第二种方式实现，</p>\n<p>首先是圆形图片转换的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将图片转为圆型  不标准的图形从中心截取</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> bitmap</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">getRoundedCornerBitmap</span><span class=\"params\">(Bitmap bitmap)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> width = bitmap.getWidth();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> height = bitmap.getHeight();</span><br><span class=\"line\">\tBitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);</span><br><span class=\"line\">\tCanvas canvas = <span class=\"keyword\">new</span> Canvas(output);</span><br><span class=\"line\">\t<span class=\"comment\">// 切圆的直径</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> minLength = width &gt; height ? height : width;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> color = <span class=\"number\">0xff424242</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Paint paint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = (width - minLength) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y = (height - minLength) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Rect rect = <span class=\"keyword\">new</span> Rect(x, y, x + minLength, y + minLength);</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> RectF rectF = <span class=\"keyword\">new</span> RectF(rect);</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> roundPx = minLength / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpaint.setAntiAlias(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tcanvas.drawARGB(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tpaint.setColor(color);</span><br><span class=\"line\">\tcanvas.drawRoundRect(rectF, roundPx, roundPx, paint);</span><br><span class=\"line\">\tpaint.setXfermode(<span class=\"keyword\">new</span> PorterDuffXfermode(Mode.SRC_IN));</span><br><span class=\"line\">\tcanvas.drawBitmap(bitmap, rect, rect, paint);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再然后是显示图片工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SimpleImageLoadingListener listener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends ImageView&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayImage2Circle</span><span class=\"params\">(T container, String url)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (listener == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tlistener = <span class=\"keyword\">new</span> SimpleImageLoadingListener() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadingComplete</span><span class=\"params\">(String imageUri, View view, Bitmap loadedImage)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">super</span>.onLoadingComplete(imageUri, view, loadedImage);</span><br><span class=\"line\">\t\t\t\t((ImageView) view).setImageBitmap(getRoundedCornerBitmap(loadedImage));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tImageLoader.getInstance().displayImage(url, container, listener);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样只要是需要把图片显示为圆形的地方直接调用 displayImage2Circle 这个方法即可</p>\n<hr>\n<p>本以为已经大功告成，没想到使用之后却发现图片四周仿佛被切掉一部分一样，如图:</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20140930151619.png\" alt=\"tool-editor\"></p>\n<blockquote>\n<ul>\n<li>起先以为是图片有白边，后来发现不是，<a href=\"http://img0.bdstatic.com/img/image/shouye/mxzyq-11795342220.jpg\" target=\"_blank\" rel=\"noopener\">图片地址</a></li>\n<li>然后又以为是半径没算对,验证之后再次被排除</li>\n<li>最终把原因定位到了 Image-Loader 上,解决办法如下:</li>\n</ul>\n</blockquote>\n<p>ImageLoaderConfiguration 的 defaultDisplayImageOptions 方法需要一个 DisplayImageOptions 参数而 DisplayImageOptions 的参数的 imageScaleType 属性默认的是 ImageScaleType.IN_SAMPLE_POWER_OF_2 就是这个属性导致的图片不圆,查了一下文档</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 图片的缩放方式 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\">imageScaleType(ImageScaleType imageScaleType)  </span><br><span class=\"line\">imageScaleType:  </span><br><span class=\"line\">    EXACTLY :图像将完全按比例缩小的目标大小  </span><br><span class=\"line\">    EXACTLY_STRETCHED:图片会完全缩放到目标大小  </span><br><span class=\"line\">    IN_SAMPLE_INT:图像将被二次采样,并且倍数为整数倍  </span><br><span class=\"line\">    IN_SAMPLE_POWER_OF_2:图片将降低<span class=\"number\">2</span>倍，直到下一减少步骤，使图像更小的目标大小  </span><br><span class=\"line\">    NONE:图片不会调整</span><br></pre></td></tr></table></figure>\n<p>IN_SAMPLE_POWER_OF_2 模式下缩放是成倍缩放的所以导致实际显示的要比我设定的宽一些,改成 EXACTLY_STRETCHED 之后问题得到解决</p>\n<p>最后展示一下最终效果</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20140930154619.png\" alt=\"tool-editor\"></p>\n<p>以及 Image-Loader 的完整设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initImageLoader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tDisplayImageOptions options = <span class=\"keyword\">new</span> DisplayImageOptions.Builder()</span><br><span class=\"line\">    .showImageForEmptyUri(R.drawable.default_image) </span><br><span class=\"line\">    .showImageOnFail(R.drawable.default_image) </span><br><span class=\"line\">    .imageScaleType(ImageScaleType.EXACTLY_STRETCHED) </span><br><span class=\"line\">    .bitmapConfig(Config.RGB_565) </span><br><span class=\"line\">    .cacheInMemory(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    .cacheOnDisk(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    .resetViewBeforeLoading(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    .build();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tFile cacheDir = StorageUtils.getOwnCacheDirectory(getApplicationContext(), Util.getCachePath()); </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tImageLoaderConfiguration config = <span class=\"keyword\">new</span> ImageLoaderConfiguration.Builder(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    .denyCacheImageMultipleSizesInMemory()</span><br><span class=\"line\">    .memoryCache(<span class=\"keyword\">new</span> LruMemoryCache(<span class=\"number\">2</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>))</span><br><span class=\"line\">    .threadPoolSize(<span class=\"number\">4</span>)</span><br><span class=\"line\">    .memoryCacheSize(<span class=\"number\">2</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>)</span><br><span class=\"line\">    .diskCache(<span class=\"keyword\">new</span> UnlimitedDiscCache(cacheDir)) <span class=\"comment\">// 缓存路径</span></span><br><span class=\"line\">    .diskCacheSize(<span class=\"number\">50</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>)</span><br><span class=\"line\">    .diskCacheFileCount(<span class=\"number\">100</span>)</span><br><span class=\"line\">    .defaultDisplayImageOptions(options) </span><br><span class=\"line\">    .build();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t ImageLoader.getInstance().init(config);  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>公司项目我就不放源码了，核心代码都在上面了，有问题可以和我联系。</p>\n"},{"title":"Swift 通过代码启动 Storyboard 内的 ViewController","layout":"post","date":"2015-03-13T15:10:09.000Z","_content":"\nIOS 设计布局的方式有3种，1、代码编写，2、xib 文件，3、storyboard，三种方式的好坏及使用我就不细说了，网上资料很多，我这里主要说下我在使用 storyboard 中遇到的问题。\n\n### 问题\nstoryboard 是 Apple 最新的设计界面的方式。第一次使用我就被他的功能所吸引，简直比 Android 的方便了不止 10 倍，集设计和交互，编码为一身，基本上都可以作为原型开发工具了。作为初学者，我在选择界面开发的时候果断的选择了storyboard，可是在使用他的时候出现了问题，问题是这样的，启动应用首先是闪屏，然后根据是否登录分别进入登录页或者主页。这个时候我通过普通的方式启动 ViewController 发现一片漆黑。即使在 storyboard 里面绑定了对应的 ViewController 也是如此。\n\n### 解决\n现如今网上 Swift 的资料甚是稀缺，这个问题我解决了好久，后来想到通过 xib 方式启动V iewController 的时候可以加一个 xibname 的属性来加载xib文件，那么有没有这样的一种方式也能启动 ViewController 的时候同时加载 storyboard 呢，后来我发现 OC 有这样的一种方式，我对着 OC 的代码又查了 Swift 的 API 发现果然不出我所料。具体代码如下：\n\n```swift\nvar story =  UIStoryboard(name: \"Main\", bundle: nil)\nvar controller = story.instantiateViewControllerWithIdentifier(\"id\") \n\t\t\t\tas UIViewController\nself.presentViewController(controller, animated: true, nil)\n```\n其中 id 为 UIViewController 在 storyboard 属性面板中的 Storyboard ID， 这样就可以实现一个 storyboard 文件设计所有的 UIViewController 了 在跳转的时候需要逻辑的时候就使用代码的方式，不需要逻辑的时候就直接使用 Segue。这样的方式适合一个人开发，或者前期设计的时候使用。因为所有的布局在一个文件里面多人操作提交的时候容易出错。不过好像新版的已经解决的 git 提交识别问题了。不过这也不是什么大问题啦。\n\n### Ps\n其实我在想到这样的解决方案的时候没有写的这么简单的，在弄了好久没有解决的时候我临时的方案是使用xib，类似 Android 的布局与代码解耦的方式类似。布局在 xib 文件里面，逻辑在 UIViewController 里面，这样也解决了本文的问题，只是有好东西不能用心里不舒服啊，终于在昨晚 3 点的时候灵光一闪想到了解决方法。今天一来测试，果然不出所料。至此我可以正式踏入 IOS 的大门啦，甚是欢喜。","source":"_posts/Swift通过代码启动Storyboard内的ViewController.md","raw":"---\ntitle: Swift 通过代码启动 Storyboard 内的 ViewController\nlayout: post\ndate: 2015/03/13 23:10:09\ntags : Swift\n---\n\nIOS 设计布局的方式有3种，1、代码编写，2、xib 文件，3、storyboard，三种方式的好坏及使用我就不细说了，网上资料很多，我这里主要说下我在使用 storyboard 中遇到的问题。\n\n### 问题\nstoryboard 是 Apple 最新的设计界面的方式。第一次使用我就被他的功能所吸引，简直比 Android 的方便了不止 10 倍，集设计和交互，编码为一身，基本上都可以作为原型开发工具了。作为初学者，我在选择界面开发的时候果断的选择了storyboard，可是在使用他的时候出现了问题，问题是这样的，启动应用首先是闪屏，然后根据是否登录分别进入登录页或者主页。这个时候我通过普通的方式启动 ViewController 发现一片漆黑。即使在 storyboard 里面绑定了对应的 ViewController 也是如此。\n\n### 解决\n现如今网上 Swift 的资料甚是稀缺，这个问题我解决了好久，后来想到通过 xib 方式启动V iewController 的时候可以加一个 xibname 的属性来加载xib文件，那么有没有这样的一种方式也能启动 ViewController 的时候同时加载 storyboard 呢，后来我发现 OC 有这样的一种方式，我对着 OC 的代码又查了 Swift 的 API 发现果然不出我所料。具体代码如下：\n\n```swift\nvar story =  UIStoryboard(name: \"Main\", bundle: nil)\nvar controller = story.instantiateViewControllerWithIdentifier(\"id\") \n\t\t\t\tas UIViewController\nself.presentViewController(controller, animated: true, nil)\n```\n其中 id 为 UIViewController 在 storyboard 属性面板中的 Storyboard ID， 这样就可以实现一个 storyboard 文件设计所有的 UIViewController 了 在跳转的时候需要逻辑的时候就使用代码的方式，不需要逻辑的时候就直接使用 Segue。这样的方式适合一个人开发，或者前期设计的时候使用。因为所有的布局在一个文件里面多人操作提交的时候容易出错。不过好像新版的已经解决的 git 提交识别问题了。不过这也不是什么大问题啦。\n\n### Ps\n其实我在想到这样的解决方案的时候没有写的这么简单的，在弄了好久没有解决的时候我临时的方案是使用xib，类似 Android 的布局与代码解耦的方式类似。布局在 xib 文件里面，逻辑在 UIViewController 里面，这样也解决了本文的问题，只是有好东西不能用心里不舒服啊，终于在昨晚 3 点的时候灵光一闪想到了解决方法。今天一来测试，果然不出所料。至此我可以正式踏入 IOS 的大门啦，甚是欢喜。","slug":"Swift通过代码启动Storyboard内的ViewController","published":1,"updated":"2018-05-05T08:37:53.152Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzc0006oky0u2wsplv0","content":"<p>IOS 设计布局的方式有3种，1、代码编写，2、xib 文件，3、storyboard，三种方式的好坏及使用我就不细说了，网上资料很多，我这里主要说下我在使用 storyboard 中遇到的问题。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>storyboard 是 Apple 最新的设计界面的方式。第一次使用我就被他的功能所吸引，简直比 Android 的方便了不止 10 倍，集设计和交互，编码为一身，基本上都可以作为原型开发工具了。作为初学者，我在选择界面开发的时候果断的选择了storyboard，可是在使用他的时候出现了问题，问题是这样的，启动应用首先是闪屏，然后根据是否登录分别进入登录页或者主页。这个时候我通过普通的方式启动 ViewController 发现一片漆黑。即使在 storyboard 里面绑定了对应的 ViewController 也是如此。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>现如今网上 Swift 的资料甚是稀缺，这个问题我解决了好久，后来想到通过 xib 方式启动V iewController 的时候可以加一个 xibname 的属性来加载xib文件，那么有没有这样的一种方式也能启动 ViewController 的时候同时加载 storyboard 呢，后来我发现 OC 有这样的一种方式，我对着 OC 的代码又查了 Swift 的 API 发现果然不出我所料。具体代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> story =  <span class=\"type\">UIStoryboard</span>(name: <span class=\"string\">\"Main\"</span>, bundle: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> controller = story.instantiateViewControllerWithIdentifier(<span class=\"string\">\"id\"</span>) </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">as</span> <span class=\"type\">UIViewController</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.presentViewController(controller, animated: <span class=\"literal\">true</span>, <span class=\"literal\">nil</span>)</span><br></pre></td></tr></table></figure>\n<p>其中 id 为 UIViewController 在 storyboard 属性面板中的 Storyboard ID， 这样就可以实现一个 storyboard 文件设计所有的 UIViewController 了 在跳转的时候需要逻辑的时候就使用代码的方式，不需要逻辑的时候就直接使用 Segue。这样的方式适合一个人开发，或者前期设计的时候使用。因为所有的布局在一个文件里面多人操作提交的时候容易出错。不过好像新版的已经解决的 git 提交识别问题了。不过这也不是什么大问题啦。</p>\n<h3 id=\"Ps\"><a href=\"#Ps\" class=\"headerlink\" title=\"Ps\"></a>Ps</h3><p>其实我在想到这样的解决方案的时候没有写的这么简单的，在弄了好久没有解决的时候我临时的方案是使用xib，类似 Android 的布局与代码解耦的方式类似。布局在 xib 文件里面，逻辑在 UIViewController 里面，这样也解决了本文的问题，只是有好东西不能用心里不舒服啊，终于在昨晚 3 点的时候灵光一闪想到了解决方法。今天一来测试，果然不出所料。至此我可以正式踏入 IOS 的大门啦，甚是欢喜。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>IOS 设计布局的方式有3种，1、代码编写，2、xib 文件，3、storyboard，三种方式的好坏及使用我就不细说了，网上资料很多，我这里主要说下我在使用 storyboard 中遇到的问题。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>storyboard 是 Apple 最新的设计界面的方式。第一次使用我就被他的功能所吸引，简直比 Android 的方便了不止 10 倍，集设计和交互，编码为一身，基本上都可以作为原型开发工具了。作为初学者，我在选择界面开发的时候果断的选择了storyboard，可是在使用他的时候出现了问题，问题是这样的，启动应用首先是闪屏，然后根据是否登录分别进入登录页或者主页。这个时候我通过普通的方式启动 ViewController 发现一片漆黑。即使在 storyboard 里面绑定了对应的 ViewController 也是如此。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>现如今网上 Swift 的资料甚是稀缺，这个问题我解决了好久，后来想到通过 xib 方式启动V iewController 的时候可以加一个 xibname 的属性来加载xib文件，那么有没有这样的一种方式也能启动 ViewController 的时候同时加载 storyboard 呢，后来我发现 OC 有这样的一种方式，我对着 OC 的代码又查了 Swift 的 API 发现果然不出我所料。具体代码如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> story =  <span class=\"type\">UIStoryboard</span>(name: <span class=\"string\">\"Main\"</span>, bundle: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> controller = story.instantiateViewControllerWithIdentifier(<span class=\"string\">\"id\"</span>) </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">as</span> <span class=\"type\">UIViewController</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.presentViewController(controller, animated: <span class=\"literal\">true</span>, <span class=\"literal\">nil</span>)</span><br></pre></td></tr></table></figure>\n<p>其中 id 为 UIViewController 在 storyboard 属性面板中的 Storyboard ID， 这样就可以实现一个 storyboard 文件设计所有的 UIViewController 了 在跳转的时候需要逻辑的时候就使用代码的方式，不需要逻辑的时候就直接使用 Segue。这样的方式适合一个人开发，或者前期设计的时候使用。因为所有的布局在一个文件里面多人操作提交的时候容易出错。不过好像新版的已经解决的 git 提交识别问题了。不过这也不是什么大问题啦。</p>\n<h3 id=\"Ps\"><a href=\"#Ps\" class=\"headerlink\" title=\"Ps\"></a>Ps</h3><p>其实我在想到这样的解决方案的时候没有写的这么简单的，在弄了好久没有解决的时候我临时的方案是使用xib，类似 Android 的布局与代码解耦的方式类似。布局在 xib 文件里面，逻辑在 UIViewController 里面，这样也解决了本文的问题，只是有好东西不能用心里不舒服啊，终于在昨晚 3 点的时候灵光一闪想到了解决方法。今天一来测试，果然不出所料。至此我可以正式踏入 IOS 的大门啦，甚是欢喜。</p>\n"},{"title":"BroadcastReceiver 接收顺序","layout":"post","date":"2014-09-28T12:46:25.000Z","_content":"\n今天项目里有这样一个需求，访问一个请求并把手机号作为参数传过去，同时拦截收到的短信验证码，自动填进 EditText，一个看似很简单的功能。然而在真机上测试竟然没有拦截到，把优先级调到最大也无济于事。\n\n四处寻访，原来 BroadcastReceiver 除了有优先级顺序之外，还有注册的顺序。\n\n大家都知道广播分有序广播和无序广播，有序广播和无序广播的区别就是，有序广播可以被任何一个接受者消耗掉，而无序广播则不可以，注册的话既可以在代码里面动态注册，也可以在 Manifest 里面直接声明，屌丝青年大多会直接在 Manifest 里面定义注册，文艺青年一般使用代码动态注册。这两种方式接受的广播的顺序是不一样的。\n\n一般来说有序广播在同等优先级的情况下有这样的顺序\n> * 动态注册的 BroadcastReceiver，先注册的先接收\n> * Manifest 里注册的 BroadcastReceiver，接收广播的顺序与 String[] java.io.File.list() 顺序一致\n\n在不同优先级的情况下\n> * 有序广播按优先级顺序接收\n> * 无序广播因为是异步的所以接收 Broadcast 的顺序不确定。\n\n\n| 假设有如下优先级的 5 个接收器  并且 B 先于 C 注册     |\n| --------   | \n| 1.动态A（优先级=1）      | \n| 2.动态B（优先级=2）      |  \n| 3.动态C（优先级=2）      |\n| 4.静态D（优先级=1)       |\n| 5.静态E（优先级=2）      |\n| 那么实际接收顺序应为：  B C E A D  |\n\n-----\n## 关于 String[] java.io.File.list()\n\n我们以开机时候发出的广播 android.intent.action.BOOT_COMPLETED 为例，这是个无序广播。如果应用想要开启自启动，那么就要监听这个广播，程序启动之前，动态广播接收器肯定是无法使用的，只能在 XML 中静态注册。大家都知道，第三方应用是存放在 /data/app 目录下，当安装完毕之后，你会找到一个文件，他的名字是以与安装的应用包名开始的，然后可能会跟着\"-数字.apk\"，比如：com.android.test-1.apk。接收的顺序与这个名字是有关的！那么关系是怎样的呢？\n> * 系统在开机的时候，会按着一个顺序解析apk，首先，会解析手机中的 /system/framework 这个目录，原生系统中，这下面就一个 apk - framework-res.apk，当然各个厂商也会加入自己的内容\n> * 然后受到重视的文件夹按顺序分别为：\n/system/app，\n/vendor/app，\n/data/app，\n/drm/app-private\n那么每个文件夹下解析的顺序是怎样的呢？我们先只看 /data/app，也就是用户安装的第三方应用的存放位置，这与下面代码返回结果的顺序是一致的\nFile file = new File(\"/data/app/\");\nString[] files = file.list();\n也就是说，我们按顺序打印这个数组，就能知道哪个接收器会先接收到这个广播，哪个会后接收到。","source":"_posts/BroadcastReceiver接收顺序.md","raw":"---\ntitle: BroadcastReceiver 接收顺序\nlayout: post\ndate: 2014/9/28 20:46:25\ntags : 工作总结\n---\n\n今天项目里有这样一个需求，访问一个请求并把手机号作为参数传过去，同时拦截收到的短信验证码，自动填进 EditText，一个看似很简单的功能。然而在真机上测试竟然没有拦截到，把优先级调到最大也无济于事。\n\n四处寻访，原来 BroadcastReceiver 除了有优先级顺序之外，还有注册的顺序。\n\n大家都知道广播分有序广播和无序广播，有序广播和无序广播的区别就是，有序广播可以被任何一个接受者消耗掉，而无序广播则不可以，注册的话既可以在代码里面动态注册，也可以在 Manifest 里面直接声明，屌丝青年大多会直接在 Manifest 里面定义注册，文艺青年一般使用代码动态注册。这两种方式接受的广播的顺序是不一样的。\n\n一般来说有序广播在同等优先级的情况下有这样的顺序\n> * 动态注册的 BroadcastReceiver，先注册的先接收\n> * Manifest 里注册的 BroadcastReceiver，接收广播的顺序与 String[] java.io.File.list() 顺序一致\n\n在不同优先级的情况下\n> * 有序广播按优先级顺序接收\n> * 无序广播因为是异步的所以接收 Broadcast 的顺序不确定。\n\n\n| 假设有如下优先级的 5 个接收器  并且 B 先于 C 注册     |\n| --------   | \n| 1.动态A（优先级=1）      | \n| 2.动态B（优先级=2）      |  \n| 3.动态C（优先级=2）      |\n| 4.静态D（优先级=1)       |\n| 5.静态E（优先级=2）      |\n| 那么实际接收顺序应为：  B C E A D  |\n\n-----\n## 关于 String[] java.io.File.list()\n\n我们以开机时候发出的广播 android.intent.action.BOOT_COMPLETED 为例，这是个无序广播。如果应用想要开启自启动，那么就要监听这个广播，程序启动之前，动态广播接收器肯定是无法使用的，只能在 XML 中静态注册。大家都知道，第三方应用是存放在 /data/app 目录下，当安装完毕之后，你会找到一个文件，他的名字是以与安装的应用包名开始的，然后可能会跟着\"-数字.apk\"，比如：com.android.test-1.apk。接收的顺序与这个名字是有关的！那么关系是怎样的呢？\n> * 系统在开机的时候，会按着一个顺序解析apk，首先，会解析手机中的 /system/framework 这个目录，原生系统中，这下面就一个 apk - framework-res.apk，当然各个厂商也会加入自己的内容\n> * 然后受到重视的文件夹按顺序分别为：\n/system/app，\n/vendor/app，\n/data/app，\n/drm/app-private\n那么每个文件夹下解析的顺序是怎样的呢？我们先只看 /data/app，也就是用户安装的第三方应用的存放位置，这与下面代码返回结果的顺序是一致的\nFile file = new File(\"/data/app/\");\nString[] files = file.list();\n也就是说，我们按顺序打印这个数组，就能知道哪个接收器会先接收到这个广播，哪个会后接收到。","slug":"BroadcastReceiver接收顺序","published":1,"updated":"2018-05-05T08:33:32.899Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdze0007oky0vpmw7ovi","content":"<p>今天项目里有这样一个需求，访问一个请求并把手机号作为参数传过去，同时拦截收到的短信验证码，自动填进 EditText，一个看似很简单的功能。然而在真机上测试竟然没有拦截到，把优先级调到最大也无济于事。</p>\n<p>四处寻访，原来 BroadcastReceiver 除了有优先级顺序之外，还有注册的顺序。</p>\n<p>大家都知道广播分有序广播和无序广播，有序广播和无序广播的区别就是，有序广播可以被任何一个接受者消耗掉，而无序广播则不可以，注册的话既可以在代码里面动态注册，也可以在 Manifest 里面直接声明，屌丝青年大多会直接在 Manifest 里面定义注册，文艺青年一般使用代码动态注册。这两种方式接受的广播的顺序是不一样的。</p>\n<p>一般来说有序广播在同等优先级的情况下有这样的顺序</p>\n<blockquote>\n<ul>\n<li>动态注册的 BroadcastReceiver，先注册的先接收</li>\n<li>Manifest 里注册的 BroadcastReceiver，接收广播的顺序与 String[] java.io.File.list() 顺序一致</li>\n</ul>\n</blockquote>\n<p>在不同优先级的情况下</p>\n<blockquote>\n<ul>\n<li>有序广播按优先级顺序接收</li>\n<li>无序广播因为是异步的所以接收 Broadcast 的顺序不确定。</li>\n</ul>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>假设有如下优先级的 5 个接收器  并且 B 先于 C 注册</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.动态A（优先级=1）</td>\n</tr>\n<tr>\n<td>2.动态B（优先级=2）</td>\n</tr>\n<tr>\n<td>3.动态C（优先级=2）</td>\n</tr>\n<tr>\n<td>4.静态D（优先级=1)</td>\n</tr>\n<tr>\n<td>5.静态E（优先级=2）</td>\n</tr>\n<tr>\n<td>那么实际接收顺序应为：  B C E A D</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"关于-String-java-io-File-list\"><a href=\"#关于-String-java-io-File-list\" class=\"headerlink\" title=\"关于 String[] java.io.File.list()\"></a>关于 String[] java.io.File.list()</h2><p>我们以开机时候发出的广播 android.intent.action.BOOT_COMPLETED 为例，这是个无序广播。如果应用想要开启自启动，那么就要监听这个广播，程序启动之前，动态广播接收器肯定是无法使用的，只能在 XML 中静态注册。大家都知道，第三方应用是存放在 /data/app 目录下，当安装完毕之后，你会找到一个文件，他的名字是以与安装的应用包名开始的，然后可能会跟着”-数字.apk”，比如：com.android.test-1.apk。接收的顺序与这个名字是有关的！那么关系是怎样的呢？</p>\n<blockquote>\n<ul>\n<li>系统在开机的时候，会按着一个顺序解析apk，首先，会解析手机中的 /system/framework 这个目录，原生系统中，这下面就一个 apk - framework-res.apk，当然各个厂商也会加入自己的内容</li>\n<li>然后受到重视的文件夹按顺序分别为：<br>/system/app，<br>/vendor/app，<br>/data/app，<br>/drm/app-private<br>那么每个文件夹下解析的顺序是怎样的呢？我们先只看 /data/app，也就是用户安装的第三方应用的存放位置，这与下面代码返回结果的顺序是一致的<br>File file = new File(“/data/app/“);<br>String[] files = file.list();<br>也就是说，我们按顺序打印这个数组，就能知道哪个接收器会先接收到这个广播，哪个会后接收到。</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>今天项目里有这样一个需求，访问一个请求并把手机号作为参数传过去，同时拦截收到的短信验证码，自动填进 EditText，一个看似很简单的功能。然而在真机上测试竟然没有拦截到，把优先级调到最大也无济于事。</p>\n<p>四处寻访，原来 BroadcastReceiver 除了有优先级顺序之外，还有注册的顺序。</p>\n<p>大家都知道广播分有序广播和无序广播，有序广播和无序广播的区别就是，有序广播可以被任何一个接受者消耗掉，而无序广播则不可以，注册的话既可以在代码里面动态注册，也可以在 Manifest 里面直接声明，屌丝青年大多会直接在 Manifest 里面定义注册，文艺青年一般使用代码动态注册。这两种方式接受的广播的顺序是不一样的。</p>\n<p>一般来说有序广播在同等优先级的情况下有这样的顺序</p>\n<blockquote>\n<ul>\n<li>动态注册的 BroadcastReceiver，先注册的先接收</li>\n<li>Manifest 里注册的 BroadcastReceiver，接收广播的顺序与 String[] java.io.File.list() 顺序一致</li>\n</ul>\n</blockquote>\n<p>在不同优先级的情况下</p>\n<blockquote>\n<ul>\n<li>有序广播按优先级顺序接收</li>\n<li>无序广播因为是异步的所以接收 Broadcast 的顺序不确定。</li>\n</ul>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>假设有如下优先级的 5 个接收器  并且 B 先于 C 注册</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.动态A（优先级=1）</td>\n</tr>\n<tr>\n<td>2.动态B（优先级=2）</td>\n</tr>\n<tr>\n<td>3.动态C（优先级=2）</td>\n</tr>\n<tr>\n<td>4.静态D（优先级=1)</td>\n</tr>\n<tr>\n<td>5.静态E（优先级=2）</td>\n</tr>\n<tr>\n<td>那么实际接收顺序应为：  B C E A D</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"关于-String-java-io-File-list\"><a href=\"#关于-String-java-io-File-list\" class=\"headerlink\" title=\"关于 String[] java.io.File.list()\"></a>关于 String[] java.io.File.list()</h2><p>我们以开机时候发出的广播 android.intent.action.BOOT_COMPLETED 为例，这是个无序广播。如果应用想要开启自启动，那么就要监听这个广播，程序启动之前，动态广播接收器肯定是无法使用的，只能在 XML 中静态注册。大家都知道，第三方应用是存放在 /data/app 目录下，当安装完毕之后，你会找到一个文件，他的名字是以与安装的应用包名开始的，然后可能会跟着”-数字.apk”，比如：com.android.test-1.apk。接收的顺序与这个名字是有关的！那么关系是怎样的呢？</p>\n<blockquote>\n<ul>\n<li>系统在开机的时候，会按着一个顺序解析apk，首先，会解析手机中的 /system/framework 这个目录，原生系统中，这下面就一个 apk - framework-res.apk，当然各个厂商也会加入自己的内容</li>\n<li>然后受到重视的文件夹按顺序分别为：<br>/system/app，<br>/vendor/app，<br>/data/app，<br>/drm/app-private<br>那么每个文件夹下解析的顺序是怎样的呢？我们先只看 /data/app，也就是用户安装的第三方应用的存放位置，这与下面代码返回结果的顺序是一致的<br>File file = new File(“/data/app/“);<br>String[] files = file.list();<br>也就是说，我们按顺序打印这个数组，就能知道哪个接收器会先接收到这个广播，哪个会后接收到。</li>\n</ul>\n</blockquote>\n"},{"title":"PubDialog ---- 一个简单的提示对话框","layout":"post","date":"2015-02-27T09:56:12.000Z","_content":"\n项目里需要做一个有多个选项的单选对话框，类似 QQ 的 Dialog 风格，实现起来倒是不难，只是这样的功能我在之前的项目里就写过一次，这次又要为一些小的改动再写一遍。干脆，我把这样的 Dialog 封装一下开源出来，也方便自己以后再用到的时候就不再需要做重复的工作。加上自己一直想写个开源项目，所以这次借着这股东风，PubDialog 诞生了。PubDialog 是一个类似 IOS 风格的对话框，我封装了一些简单的功能，方便在大部分场合快速实现选择对话框的功能。\n\n### 使用\n\n```java\n\n//初始化一个字符数组\nList<String> list = new ArrayList<>(3);\nlist.add(\"Send message\");\nlist.add(\"Like profile\");\nlist.add(\"Add to favorites\");\n\n//初始化PubDialogFragment\nPubDialogFragment pubDialog = PubDialogFragment.newInstance(list, false);\n\n//设置回调(也可以不设置)\npubDialog.setItemClickListener(new PubDialogFragment.ItemClickListener() {\n\n    @Override\n    public void onItemClick(View clickedView, DialogObject dialogObject, \n    \tint groupIndex, int itemIndex) {\n    \t//在回调中处理事件\n        Intent intent;\n        if (itemIndex == 1) {\n            Uri uri = Uri.parse(\"https://github.com/KokerWang/PubDialog\");\n            intent = new Intent(Intent.ACTION_VIEW, uri);\n        } else {\n            Uri uri = Uri.parse(\"http://www.kokerwang.com\");\n            intent = new Intent(Intent.ACTION_VIEW, uri);\n        }\n        startActivity(intent);\n    }\n});\n\n//在使用的地方\npubDialog.show(getSupportFragmentManager(), \"setting\");\n\n```\n### 功能定制\n\n* 字体颜色\n* 背景\n* icon\n* 多分组\n\n更多定制功能请留意API\n\n### 效果\n\n![PubDialog](http://oneylt1vv.bkt.clouddn.com/pubdialog_show_demo.gif)\n\n* [项目地址](https://github.com/BenjyAir/PubDialog) (包含示例项目和lib库)\n\n* [下载Demo](https://github.com/BenjyAir/PubDialog/blob/master/apk/PubDialogExample-debug.apk?raw=true)\n","source":"_posts/PubDialog----一个简单的提示对话框.md","raw":"---\ntitle: PubDialog ---- 一个简单的提示对话框\nlayout: post\ndate: 2015/02/27 17:56:12\ntags : 我的开源\n---\n\n项目里需要做一个有多个选项的单选对话框，类似 QQ 的 Dialog 风格，实现起来倒是不难，只是这样的功能我在之前的项目里就写过一次，这次又要为一些小的改动再写一遍。干脆，我把这样的 Dialog 封装一下开源出来，也方便自己以后再用到的时候就不再需要做重复的工作。加上自己一直想写个开源项目，所以这次借着这股东风，PubDialog 诞生了。PubDialog 是一个类似 IOS 风格的对话框，我封装了一些简单的功能，方便在大部分场合快速实现选择对话框的功能。\n\n### 使用\n\n```java\n\n//初始化一个字符数组\nList<String> list = new ArrayList<>(3);\nlist.add(\"Send message\");\nlist.add(\"Like profile\");\nlist.add(\"Add to favorites\");\n\n//初始化PubDialogFragment\nPubDialogFragment pubDialog = PubDialogFragment.newInstance(list, false);\n\n//设置回调(也可以不设置)\npubDialog.setItemClickListener(new PubDialogFragment.ItemClickListener() {\n\n    @Override\n    public void onItemClick(View clickedView, DialogObject dialogObject, \n    \tint groupIndex, int itemIndex) {\n    \t//在回调中处理事件\n        Intent intent;\n        if (itemIndex == 1) {\n            Uri uri = Uri.parse(\"https://github.com/KokerWang/PubDialog\");\n            intent = new Intent(Intent.ACTION_VIEW, uri);\n        } else {\n            Uri uri = Uri.parse(\"http://www.kokerwang.com\");\n            intent = new Intent(Intent.ACTION_VIEW, uri);\n        }\n        startActivity(intent);\n    }\n});\n\n//在使用的地方\npubDialog.show(getSupportFragmentManager(), \"setting\");\n\n```\n### 功能定制\n\n* 字体颜色\n* 背景\n* icon\n* 多分组\n\n更多定制功能请留意API\n\n### 效果\n\n![PubDialog](http://oneylt1vv.bkt.clouddn.com/pubdialog_show_demo.gif)\n\n* [项目地址](https://github.com/BenjyAir/PubDialog) (包含示例项目和lib库)\n\n* [下载Demo](https://github.com/BenjyAir/PubDialog/blob/master/apk/PubDialogExample-debug.apk?raw=true)\n","slug":"PubDialog----一个简单的提示对话框","published":1,"updated":"2018-05-05T08:37:08.754Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzg000aoky0eoli9i57","content":"<p>项目里需要做一个有多个选项的单选对话框，类似 QQ 的 Dialog 风格，实现起来倒是不难，只是这样的功能我在之前的项目里就写过一次，这次又要为一些小的改动再写一遍。干脆，我把这样的 Dialog 封装一下开源出来，也方便自己以后再用到的时候就不再需要做重复的工作。加上自己一直想写个开源项目，所以这次借着这股东风，PubDialog 诞生了。PubDialog 是一个类似 IOS 风格的对话框，我封装了一些简单的功能，方便在大部分场合快速实现选择对话框的功能。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化一个字符数组</span></span><br><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"Send message\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"Like profile\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"Add to favorites\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化PubDialogFragment</span></span><br><span class=\"line\">PubDialogFragment pubDialog = PubDialogFragment.newInstance(list, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置回调(也可以不设置)</span></span><br><span class=\"line\">pubDialog.setItemClickListener(<span class=\"keyword\">new</span> PubDialogFragment.ItemClickListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(View clickedView, DialogObject dialogObject, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    \t<span class=\"keyword\">int</span> groupIndex, <span class=\"keyword\">int</span> itemIndex)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//在回调中处理事件</span></span><br><span class=\"line\">        Intent intent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (itemIndex == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            Uri uri = Uri.parse(<span class=\"string\">\"https://github.com/KokerWang/PubDialog\"</span>);</span><br><span class=\"line\">            intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Uri uri = Uri.parse(<span class=\"string\">\"http://www.kokerwang.com\"</span>);</span><br><span class=\"line\">            intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在使用的地方</span></span><br><span class=\"line\">pubDialog.show(getSupportFragmentManager(), <span class=\"string\">\"setting\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"功能定制\"><a href=\"#功能定制\" class=\"headerlink\" title=\"功能定制\"></a>功能定制</h3><ul>\n<li>字体颜色</li>\n<li>背景</li>\n<li>icon</li>\n<li>多分组</li>\n</ul>\n<p>更多定制功能请留意API</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/pubdialog_show_demo.gif\" alt=\"PubDialog\"></p>\n<ul>\n<li><p><a href=\"https://github.com/BenjyAir/PubDialog\" target=\"_blank\" rel=\"noopener\">项目地址</a> (包含示例项目和lib库)</p>\n</li>\n<li><p><a href=\"https://github.com/BenjyAir/PubDialog/blob/master/apk/PubDialogExample-debug.apk?raw=true\" target=\"_blank\" rel=\"noopener\">下载Demo</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>项目里需要做一个有多个选项的单选对话框，类似 QQ 的 Dialog 风格，实现起来倒是不难，只是这样的功能我在之前的项目里就写过一次，这次又要为一些小的改动再写一遍。干脆，我把这样的 Dialog 封装一下开源出来，也方便自己以后再用到的时候就不再需要做重复的工作。加上自己一直想写个开源项目，所以这次借着这股东风，PubDialog 诞生了。PubDialog 是一个类似 IOS 风格的对话框，我封装了一些简单的功能，方便在大部分场合快速实现选择对话框的功能。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化一个字符数组</span></span><br><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"Send message\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"Like profile\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"Add to favorites\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化PubDialogFragment</span></span><br><span class=\"line\">PubDialogFragment pubDialog = PubDialogFragment.newInstance(list, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置回调(也可以不设置)</span></span><br><span class=\"line\">pubDialog.setItemClickListener(<span class=\"keyword\">new</span> PubDialogFragment.ItemClickListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(View clickedView, DialogObject dialogObject, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    \t<span class=\"keyword\">int</span> groupIndex, <span class=\"keyword\">int</span> itemIndex)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//在回调中处理事件</span></span><br><span class=\"line\">        Intent intent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (itemIndex == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            Uri uri = Uri.parse(<span class=\"string\">\"https://github.com/KokerWang/PubDialog\"</span>);</span><br><span class=\"line\">            intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Uri uri = Uri.parse(<span class=\"string\">\"http://www.kokerwang.com\"</span>);</span><br><span class=\"line\">            intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在使用的地方</span></span><br><span class=\"line\">pubDialog.show(getSupportFragmentManager(), <span class=\"string\">\"setting\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"功能定制\"><a href=\"#功能定制\" class=\"headerlink\" title=\"功能定制\"></a>功能定制</h3><ul>\n<li>字体颜色</li>\n<li>背景</li>\n<li>icon</li>\n<li>多分组</li>\n</ul>\n<p>更多定制功能请留意API</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/pubdialog_show_demo.gif\" alt=\"PubDialog\"></p>\n<ul>\n<li><p><a href=\"https://github.com/BenjyAir/PubDialog\" target=\"_blank\" rel=\"noopener\">项目地址</a> (包含示例项目和lib库)</p>\n</li>\n<li><p><a href=\"https://github.com/BenjyAir/PubDialog/blob/master/apk/PubDialogExample-debug.apk?raw=true\" target=\"_blank\" rel=\"noopener\">下载Demo</a></p>\n</li>\n</ul>\n"},{"title":"一招搞定 IOS 屏幕适配","layout":"post","date":"2015-05-15T15:57:19.000Z","_content":"\n首先从一首歌说起，你还在，你还在，头悬梁，锥刺股，做做做做适配么？你还以为使用宏定义，纯代码编写，就能高枕无忧么？你还把分辨率转像素当成当成卖身资本么？你还在格子间码子冲刺过劳死么？ no no no no no no no no no no no no ~ ~ 。人生苦短，IOS 应用适配所有 iPhone 的梦想，你可以复制。------[挖掘机技术哪家强](http://www.bilibili.com/video/av1572046/)\n\n### 一个图\n\n![PubDialog](http://oneylt1vv.bkt.clouddn.com/20150515173315.png)\n\n### 一段话\n\n第一步，第二步，就不多说了，重点是第三部。一般先点 Add Missing Constraints 增加约束，加完之后就可以适配所有的设备了。如果你动了布局点 Update Constraints 更新约束，如果布局和约束不符点 Update Frames 更新布局，如果添加了新的组件之后接着点 Add Missing Constraints 添加新的约束即可。\n\n### 结束\n\n好了，就是这么简单（纯代码编写 UI 的请略过）。","source":"_posts/一招搞定IOS屏幕适配.md","raw":"---\ntitle: 一招搞定 IOS 屏幕适配\nlayout: post\ndate: 2015/05/15 23:57:19\ntags : Swift\n---\n\n首先从一首歌说起，你还在，你还在，头悬梁，锥刺股，做做做做适配么？你还以为使用宏定义，纯代码编写，就能高枕无忧么？你还把分辨率转像素当成当成卖身资本么？你还在格子间码子冲刺过劳死么？ no no no no no no no no no no no no ~ ~ 。人生苦短，IOS 应用适配所有 iPhone 的梦想，你可以复制。------[挖掘机技术哪家强](http://www.bilibili.com/video/av1572046/)\n\n### 一个图\n\n![PubDialog](http://oneylt1vv.bkt.clouddn.com/20150515173315.png)\n\n### 一段话\n\n第一步，第二步，就不多说了，重点是第三部。一般先点 Add Missing Constraints 增加约束，加完之后就可以适配所有的设备了。如果你动了布局点 Update Constraints 更新约束，如果布局和约束不符点 Update Frames 更新布局，如果添加了新的组件之后接着点 Add Missing Constraints 添加新的约束即可。\n\n### 结束\n\n好了，就是这么简单（纯代码编写 UI 的请略过）。","slug":"一招搞定IOS屏幕适配","published":1,"updated":"2018-05-05T08:38:11.609Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzi000coky0d0aawv43","content":"<p>首先从一首歌说起，你还在，你还在，头悬梁，锥刺股，做做做做适配么？你还以为使用宏定义，纯代码编写，就能高枕无忧么？你还把分辨率转像素当成当成卖身资本么？你还在格子间码子冲刺过劳死么？ no no no no no no no no no no no no ~ ~ 。人生苦短，IOS 应用适配所有 iPhone 的梦想，你可以复制。——<a href=\"http://www.bilibili.com/video/av1572046/\" target=\"_blank\" rel=\"noopener\">挖掘机技术哪家强</a></p>\n<h3 id=\"一个图\"><a href=\"#一个图\" class=\"headerlink\" title=\"一个图\"></a>一个图</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20150515173315.png\" alt=\"PubDialog\"></p>\n<h3 id=\"一段话\"><a href=\"#一段话\" class=\"headerlink\" title=\"一段话\"></a>一段话</h3><p>第一步，第二步，就不多说了，重点是第三部。一般先点 Add Missing Constraints 增加约束，加完之后就可以适配所有的设备了。如果你动了布局点 Update Constraints 更新约束，如果布局和约束不符点 Update Frames 更新布局，如果添加了新的组件之后接着点 Add Missing Constraints 添加新的约束即可。</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>好了，就是这么简单（纯代码编写 UI 的请略过）。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先从一首歌说起，你还在，你还在，头悬梁，锥刺股，做做做做适配么？你还以为使用宏定义，纯代码编写，就能高枕无忧么？你还把分辨率转像素当成当成卖身资本么？你还在格子间码子冲刺过劳死么？ no no no no no no no no no no no no ~ ~ 。人生苦短，IOS 应用适配所有 iPhone 的梦想，你可以复制。——<a href=\"http://www.bilibili.com/video/av1572046/\" target=\"_blank\" rel=\"noopener\">挖掘机技术哪家强</a></p>\n<h3 id=\"一个图\"><a href=\"#一个图\" class=\"headerlink\" title=\"一个图\"></a>一个图</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20150515173315.png\" alt=\"PubDialog\"></p>\n<h3 id=\"一段话\"><a href=\"#一段话\" class=\"headerlink\" title=\"一段话\"></a>一段话</h3><p>第一步，第二步，就不多说了，重点是第三部。一般先点 Add Missing Constraints 增加约束，加完之后就可以适配所有的设备了。如果你动了布局点 Update Constraints 更新约束，如果布局和约束不符点 Update Frames 更新布局，如果添加了新的组件之后接着点 Add Missing Constraints 添加新的约束即可。</p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>好了，就是这么简单（纯代码编写 UI 的请略过）。</p>\n"},{"title":"为 Context-Menu.Android 库增加用户体验","layout":"post","date":"2015-01-25T14:01:53.000Z","_content":"\nGithub 上面有很多的开源库，除了工具库之外，还有大量的UI库供我们使用，在使用这些UI库的时候开源者本人可能会给我们一些可以自定义的功能，可是在某种情况下，我们还需要对一些作者没有开放的功能进行定制，那我们就只能通过修改源码的方式来实现了，今天我介绍一下我对开源项目 Context-Menu.Android 的部分定制过程\n\n### 介绍\n[Context-Menu.Android](https://github.com/Yalantis/Context-Menu.Android) 是由Yalantis开源的一个上下文菜单的UI库，如下图，非常的酷炫。\n\n![ContextMenu](https://d13yacurqjgara.cloudfront.net/users/125056/screenshots/1785274/99miles-profile-light_1-1-4.gif)\n\n使用起来也非常的简单，具体使用大家可以在 Github 上看作者的使用介绍，我在这里就不在赘述。\n\n### 问题\n在使用这个库的时候，我遇到了如下问题：\n\n当菜单打开的时候点击旁边灰色的部分该菜单 Menu 不能消失，只能点击任意一个 Item 或者点击返回键才能让其隐藏，那么我认为这样的体验是不好的。\n\n### 解决\n思路：给灰色背景布局加一个点击事件，该事件的处理就是 Menu 的点击处理，只不过不调用 Item 的回调方法，有了思路，那么找起来就简单的多了。\n\n1.  首先我们需要找到完成点击动画的代码。打开 ContextMenuDialogFragment.java 我们可以轻易找到点击事件是在实现了 MenuAdapter.OnItemClickListener 接口的 onClick 方法中。那么我们进入 MenuAdapter.java，在这里我们终于找到了点击事件的代码。\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150125161035.png)\n从代码中可以看出，只要我们给灰色的布局加上一个这个事件调用该方法就能达到我们的目的。\n\n2.  其次我们需要找到灰色的布局组件。接下来进入该 Fragment 的布局文件 fragment_menu.xml 在这里我们发现了背景其实就是一个 RelativeLayout，那事情就好办多了，给这个 RelativeLayout 加上 id，在 ContextMenuDialogFragment 的 initViews 方 法中初始化一下该组件\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150125161418.png)\n\n3.  最后 给 RelativeLayout 加上 OnClickListener 事件,然后调用之前关闭动画的那个方法。我的做法是直接给 MenuAdapter 新增加一个 dismissMenu 方法，去除无用的代码并指定默认点击的是第一个组件，因为出现的动画是由第一个 Item 开始的，所以这里把默认的执行动画由第一个来结束也最合理，代码如下\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150125161919.png)\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150125162038.png)\n\n测试一下，大功告成\n\n### 遗留问题\n点击手机返回键的时候 Menu 是直接消失的，并没有执行结束动画，由于 Fragment 没有 OnKeyDown 方法，并且该组件继承自 DialogFragment，我在使尝试了几种办法之后最终无果，只好暂时放弃。等以后有时间再解决这个问题\n\n项目的话由于涉及到开源协议，而我又不想弄分支所以就不发布修改版的库了，不过看上面的介绍大家也足可以做到我说的效果，还能帮助大家理解这个库，何乐而不为。如果实在有困难你可以联系我。\n\n","source":"_posts/为Context-Menu.Android库增加用户体验.md","raw":"---\ntitle: 为 Context-Menu.Android 库增加用户体验\nlayout: post\ndate: 2015/01/25 22:01:53\ntags : 工作总结\n---\n\nGithub 上面有很多的开源库，除了工具库之外，还有大量的UI库供我们使用，在使用这些UI库的时候开源者本人可能会给我们一些可以自定义的功能，可是在某种情况下，我们还需要对一些作者没有开放的功能进行定制，那我们就只能通过修改源码的方式来实现了，今天我介绍一下我对开源项目 Context-Menu.Android 的部分定制过程\n\n### 介绍\n[Context-Menu.Android](https://github.com/Yalantis/Context-Menu.Android) 是由Yalantis开源的一个上下文菜单的UI库，如下图，非常的酷炫。\n\n![ContextMenu](https://d13yacurqjgara.cloudfront.net/users/125056/screenshots/1785274/99miles-profile-light_1-1-4.gif)\n\n使用起来也非常的简单，具体使用大家可以在 Github 上看作者的使用介绍，我在这里就不在赘述。\n\n### 问题\n在使用这个库的时候，我遇到了如下问题：\n\n当菜单打开的时候点击旁边灰色的部分该菜单 Menu 不能消失，只能点击任意一个 Item 或者点击返回键才能让其隐藏，那么我认为这样的体验是不好的。\n\n### 解决\n思路：给灰色背景布局加一个点击事件，该事件的处理就是 Menu 的点击处理，只不过不调用 Item 的回调方法，有了思路，那么找起来就简单的多了。\n\n1.  首先我们需要找到完成点击动画的代码。打开 ContextMenuDialogFragment.java 我们可以轻易找到点击事件是在实现了 MenuAdapter.OnItemClickListener 接口的 onClick 方法中。那么我们进入 MenuAdapter.java，在这里我们终于找到了点击事件的代码。\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150125161035.png)\n从代码中可以看出，只要我们给灰色的布局加上一个这个事件调用该方法就能达到我们的目的。\n\n2.  其次我们需要找到灰色的布局组件。接下来进入该 Fragment 的布局文件 fragment_menu.xml 在这里我们发现了背景其实就是一个 RelativeLayout，那事情就好办多了，给这个 RelativeLayout 加上 id，在 ContextMenuDialogFragment 的 initViews 方 法中初始化一下该组件\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150125161418.png)\n\n3.  最后 给 RelativeLayout 加上 OnClickListener 事件,然后调用之前关闭动画的那个方法。我的做法是直接给 MenuAdapter 新增加一个 dismissMenu 方法，去除无用的代码并指定默认点击的是第一个组件，因为出现的动画是由第一个 Item 开始的，所以这里把默认的执行动画由第一个来结束也最合理，代码如下\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150125161919.png)\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150125162038.png)\n\n测试一下，大功告成\n\n### 遗留问题\n点击手机返回键的时候 Menu 是直接消失的，并没有执行结束动画，由于 Fragment 没有 OnKeyDown 方法，并且该组件继承自 DialogFragment，我在使尝试了几种办法之后最终无果，只好暂时放弃。等以后有时间再解决这个问题\n\n项目的话由于涉及到开源协议，而我又不想弄分支所以就不发布修改版的库了，不过看上面的介绍大家也足可以做到我说的效果，还能帮助大家理解这个库，何乐而不为。如果实在有困难你可以联系我。\n\n","slug":"为Context-Menu.Android库增加用户体验","published":1,"updated":"2018-05-05T08:36:46.379Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzk000foky0c8gcm2g3","content":"<p>Github 上面有很多的开源库，除了工具库之外，还有大量的UI库供我们使用，在使用这些UI库的时候开源者本人可能会给我们一些可以自定义的功能，可是在某种情况下，我们还需要对一些作者没有开放的功能进行定制，那我们就只能通过修改源码的方式来实现了，今天我介绍一下我对开源项目 Context-Menu.Android 的部分定制过程</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><a href=\"https://github.com/Yalantis/Context-Menu.Android\" target=\"_blank\" rel=\"noopener\">Context-Menu.Android</a> 是由Yalantis开源的一个上下文菜单的UI库，如下图，非常的酷炫。</p>\n<p><img src=\"https://d13yacurqjgara.cloudfront.net/users/125056/screenshots/1785274/99miles-profile-light_1-1-4.gif\" alt=\"ContextMenu\"></p>\n<p>使用起来也非常的简单，具体使用大家可以在 Github 上看作者的使用介绍，我在这里就不在赘述。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在使用这个库的时候，我遇到了如下问题：</p>\n<p>当菜单打开的时候点击旁边灰色的部分该菜单 Menu 不能消失，只能点击任意一个 Item 或者点击返回键才能让其隐藏，那么我认为这样的体验是不好的。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>思路：给灰色背景布局加一个点击事件，该事件的处理就是 Menu 的点击处理，只不过不调用 Item 的回调方法，有了思路，那么找起来就简单的多了。</p>\n<ol>\n<li><p>首先我们需要找到完成点击动画的代码。打开 ContextMenuDialogFragment.java 我们可以轻易找到点击事件是在实现了 MenuAdapter.OnItemClickListener 接口的 onClick 方法中。那么我们进入 MenuAdapter.java，在这里我们终于找到了点击事件的代码。<br><img src=\"http://oneylt1vv.bkt.clouddn.com/20150125161035.png\" alt=\"tool-editor\"><br>从代码中可以看出，只要我们给灰色的布局加上一个这个事件调用该方法就能达到我们的目的。</p>\n</li>\n<li><p>其次我们需要找到灰色的布局组件。接下来进入该 Fragment 的布局文件 fragment_menu.xml 在这里我们发现了背景其实就是一个 RelativeLayout，那事情就好办多了，给这个 RelativeLayout 加上 id，在 ContextMenuDialogFragment 的 initViews 方 法中初始化一下该组件<br><img src=\"http://oneylt1vv.bkt.clouddn.com/20150125161418.png\" alt=\"tool-editor\"></p>\n</li>\n<li><p>最后 给 RelativeLayout 加上 OnClickListener 事件,然后调用之前关闭动画的那个方法。我的做法是直接给 MenuAdapter 新增加一个 dismissMenu 方法，去除无用的代码并指定默认点击的是第一个组件，因为出现的动画是由第一个 Item 开始的，所以这里把默认的执行动画由第一个来结束也最合理，代码如下<br><img src=\"http://oneylt1vv.bkt.clouddn.com/20150125161919.png\" alt=\"tool-editor\"><br><img src=\"http://oneylt1vv.bkt.clouddn.com/20150125162038.png\" alt=\"tool-editor\"></p>\n</li>\n</ol>\n<p>测试一下，大功告成</p>\n<h3 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h3><p>点击手机返回键的时候 Menu 是直接消失的，并没有执行结束动画，由于 Fragment 没有 OnKeyDown 方法，并且该组件继承自 DialogFragment，我在使尝试了几种办法之后最终无果，只好暂时放弃。等以后有时间再解决这个问题</p>\n<p>项目的话由于涉及到开源协议，而我又不想弄分支所以就不发布修改版的库了，不过看上面的介绍大家也足可以做到我说的效果，还能帮助大家理解这个库，何乐而不为。如果实在有困难你可以联系我。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Github 上面有很多的开源库，除了工具库之外，还有大量的UI库供我们使用，在使用这些UI库的时候开源者本人可能会给我们一些可以自定义的功能，可是在某种情况下，我们还需要对一些作者没有开放的功能进行定制，那我们就只能通过修改源码的方式来实现了，今天我介绍一下我对开源项目 Context-Menu.Android 的部分定制过程</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p><a href=\"https://github.com/Yalantis/Context-Menu.Android\" target=\"_blank\" rel=\"noopener\">Context-Menu.Android</a> 是由Yalantis开源的一个上下文菜单的UI库，如下图，非常的酷炫。</p>\n<p><img src=\"https://d13yacurqjgara.cloudfront.net/users/125056/screenshots/1785274/99miles-profile-light_1-1-4.gif\" alt=\"ContextMenu\"></p>\n<p>使用起来也非常的简单，具体使用大家可以在 Github 上看作者的使用介绍，我在这里就不在赘述。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在使用这个库的时候，我遇到了如下问题：</p>\n<p>当菜单打开的时候点击旁边灰色的部分该菜单 Menu 不能消失，只能点击任意一个 Item 或者点击返回键才能让其隐藏，那么我认为这样的体验是不好的。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>思路：给灰色背景布局加一个点击事件，该事件的处理就是 Menu 的点击处理，只不过不调用 Item 的回调方法，有了思路，那么找起来就简单的多了。</p>\n<ol>\n<li><p>首先我们需要找到完成点击动画的代码。打开 ContextMenuDialogFragment.java 我们可以轻易找到点击事件是在实现了 MenuAdapter.OnItemClickListener 接口的 onClick 方法中。那么我们进入 MenuAdapter.java，在这里我们终于找到了点击事件的代码。<br><img src=\"http://oneylt1vv.bkt.clouddn.com/20150125161035.png\" alt=\"tool-editor\"><br>从代码中可以看出，只要我们给灰色的布局加上一个这个事件调用该方法就能达到我们的目的。</p>\n</li>\n<li><p>其次我们需要找到灰色的布局组件。接下来进入该 Fragment 的布局文件 fragment_menu.xml 在这里我们发现了背景其实就是一个 RelativeLayout，那事情就好办多了，给这个 RelativeLayout 加上 id，在 ContextMenuDialogFragment 的 initViews 方 法中初始化一下该组件<br><img src=\"http://oneylt1vv.bkt.clouddn.com/20150125161418.png\" alt=\"tool-editor\"></p>\n</li>\n<li><p>最后 给 RelativeLayout 加上 OnClickListener 事件,然后调用之前关闭动画的那个方法。我的做法是直接给 MenuAdapter 新增加一个 dismissMenu 方法，去除无用的代码并指定默认点击的是第一个组件，因为出现的动画是由第一个 Item 开始的，所以这里把默认的执行动画由第一个来结束也最合理，代码如下<br><img src=\"http://oneylt1vv.bkt.clouddn.com/20150125161919.png\" alt=\"tool-editor\"><br><img src=\"http://oneylt1vv.bkt.clouddn.com/20150125162038.png\" alt=\"tool-editor\"></p>\n</li>\n</ol>\n<p>测试一下，大功告成</p>\n<h3 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h3><p>点击手机返回键的时候 Menu 是直接消失的，并没有执行结束动画，由于 Fragment 没有 OnKeyDown 方法，并且该组件继承自 DialogFragment，我在使尝试了几种办法之后最终无果，只好暂时放弃。等以后有时间再解决这个问题</p>\n<p>项目的话由于涉及到开源协议，而我又不想弄分支所以就不发布修改版的库了，不过看上面的介绍大家也足可以做到我说的效果，还能帮助大家理解这个库，何乐而不为。如果实在有困难你可以联系我。</p>\n"},{"title":"为 Context-Menu.Android 库增加用户体验(续)","layout":"post","date":"2015-02-28T08:40:22.000Z","_content":"\n在我的另一篇博客 **为Context-Menu.Android库增加用户体验** 里面留下了一个遗留问题就是给 DialogFragment 添加 OnKeyListener，当时朋友说这个很不好弄，加上当时项目比较紧自己也没有细细研究就把问题放了下来。今天在写 PubDialog 这个项目的时候又遇到了同样的问题，总不能再撂下吧，于是自己抱着试试的心态来解决这个问题，没想到这个问题原来如此简单。\n\n### 解决\n\n```java\n\n@Override\npublic View onCreateView(LayoutInflater inflater,\n             ViewGroup container, Bundle savedInstanceState) {\n\n    /* do something */\n\n    getDialog().setOnKeyListener(new DialogInterface.OnKeyListener() {\n        @Override\n        public boolean onKey(DialogInterface dialog, int keyCode,\n                             KeyEvent event) {\n            /* 处理 */\n            return false;\n        }\n    });\n    return rootView;\n}\n\n```\n\n就是如此简单！！\n\n### 拓展\n该 Dialog 有大片的空白区域我顺便在下方做了一个小的 Tip 区，每次取出一条提示在里面展示。\n如图：\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150228181307.jpg)\n\n同时把这个项目放在Github上了\n\n[地址](https://github.com/BenjyAir/Sack) \n\n需要的可以拿去\n","source":"_posts/为Context-Menu.Android库增加用户体验(续).md","raw":"---\ntitle: 为 Context-Menu.Android 库增加用户体验(续)\nlayout: post\ndate: 2015/02/28 16:40:22\ntags : 工作总结\n---\n\n在我的另一篇博客 **为Context-Menu.Android库增加用户体验** 里面留下了一个遗留问题就是给 DialogFragment 添加 OnKeyListener，当时朋友说这个很不好弄，加上当时项目比较紧自己也没有细细研究就把问题放了下来。今天在写 PubDialog 这个项目的时候又遇到了同样的问题，总不能再撂下吧，于是自己抱着试试的心态来解决这个问题，没想到这个问题原来如此简单。\n\n### 解决\n\n```java\n\n@Override\npublic View onCreateView(LayoutInflater inflater,\n             ViewGroup container, Bundle savedInstanceState) {\n\n    /* do something */\n\n    getDialog().setOnKeyListener(new DialogInterface.OnKeyListener() {\n        @Override\n        public boolean onKey(DialogInterface dialog, int keyCode,\n                             KeyEvent event) {\n            /* 处理 */\n            return false;\n        }\n    });\n    return rootView;\n}\n\n```\n\n就是如此简单！！\n\n### 拓展\n该 Dialog 有大片的空白区域我顺便在下方做了一个小的 Tip 区，每次取出一条提示在里面展示。\n如图：\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150228181307.jpg)\n\n同时把这个项目放在Github上了\n\n[地址](https://github.com/BenjyAir/Sack) \n\n需要的可以拿去\n","slug":"为Context-Menu.Android库增加用户体验(续)","published":1,"updated":"2018-05-05T08:37:28.778Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzn000goky0iz71ulur","content":"<p>在我的另一篇博客 <strong>为Context-Menu.Android库增加用户体验</strong> 里面留下了一个遗留问题就是给 DialogFragment 添加 OnKeyListener，当时朋友说这个很不好弄，加上当时项目比较紧自己也没有细细研究就把问题放了下来。今天在写 PubDialog 这个项目的时候又遇到了同样的问题，总不能再撂下吧，于是自己抱着试试的心态来解决这个问题，没想到这个问题原来如此简单。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* do something */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    getDialog().setOnKeyListener(<span class=\"keyword\">new</span> DialogInterface.OnKeyListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKey</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> keyCode,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             KeyEvent event)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/* 处理 */</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rootView;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是如此简单！！</p>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p>该 Dialog 有大片的空白区域我顺便在下方做了一个小的 Tip 区，每次取出一条提示在里面展示。<br>如图：</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20150228181307.jpg\" alt=\"tool-editor\"></p>\n<p>同时把这个项目放在Github上了</p>\n<p><a href=\"https://github.com/BenjyAir/Sack\" target=\"_blank\" rel=\"noopener\">地址</a> </p>\n<p>需要的可以拿去</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在我的另一篇博客 <strong>为Context-Menu.Android库增加用户体验</strong> 里面留下了一个遗留问题就是给 DialogFragment 添加 OnKeyListener，当时朋友说这个很不好弄，加上当时项目比较紧自己也没有细细研究就把问题放了下来。今天在写 PubDialog 这个项目的时候又遇到了同样的问题，总不能再撂下吧，于是自己抱着试试的心态来解决这个问题，没想到这个问题原来如此简单。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* do something */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    getDialog().setOnKeyListener(<span class=\"keyword\">new</span> DialogInterface.OnKeyListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onKey</span><span class=\"params\">(DialogInterface dialog, <span class=\"keyword\">int</span> keyCode,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             KeyEvent event)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/* 处理 */</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rootView;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是如此简单！！</p>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><p>该 Dialog 有大片的空白区域我顺便在下方做了一个小的 Tip 区，每次取出一条提示在里面展示。<br>如图：</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20150228181307.jpg\" alt=\"tool-editor\"></p>\n<p>同时把这个项目放在Github上了</p>\n<p><a href=\"https://github.com/BenjyAir/Sack\" target=\"_blank\" rel=\"noopener\">地址</a> </p>\n<p>需要的可以拿去</p>\n"},{"title":"从 Framework 层看 Android 启动","layout":"post","date":"2014-12-04T05:01:13.000Z","_content":"\n众所周知，Linux 中所有的进程都是有 init 进程创建并运行的，Android 系统基于 Linux 内核，所以也存在着 init 进程。\ninit进程启动的过程比较复杂，但是在准备工作做好之后，会通过 jni 创建 Dalvik 虚拟机，然后启动 Android 的核心 Zygote 进程，这个进程将成为所有应用进程的孵化器存在。下面我通过几个图来说明这个过程。\n\n### Init 进程启动以及 Zygote 启动\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141204181105.jpg)\n\n上图是启动 Android 设备之后的进程，可以明显看到在 init 进程启动之后启动了 Zygote 进程，而 Zygote 作为之后的大部分进程的父进程存在。\n\n### Zygote 启动应用程序\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141204181056.jpg)\n\n上图是 Zygote 进程启动应用程序的流程图，Zygote 进程调用 fork（）函数创建出 Zygote 子进程，子进程共享父进程的代码区和链接信息，但是注意，新的 Android 应用程序并非通过 fork（）来重新装载已有的进程代码区，而是动态的加载到复制出的Dalvik虚拟机上，而后，Zygote 进程将执行流程交给应用程序，Android 应用程序开始运行，新生的应用程序拥有 Zygote 的进程库和资源的链接信息，所以运行速度很快。\n\n### Android Framework 的启动过程\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141204181100.jpg)\n\n上图是 Android Framework 的启动过程，Zygote 启动 Dalvik 虚拟机后，会在生成一个 Dalvik 虚拟机示例，以便运行名称为 SystemServer 的 Java 服务，SystemServer 用于运行 Audio Flinger 与 Surface Flinger 本地服务，运行完本地服务之后开始运行 Android Framework 的 Java 服务，也就是我们在 Android 系统架构图中 Application Framework 中的各种 Manager Server\n下图我们从代码层看 Android Framework 的启动过程\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141204181052.jpg)\n\n### Binder IPC 机制\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141204181047.jpg)\n\n由于 Android 应用程序与系统服务不在同一个系统进程中，这里就引入的 Binder IPC 机制，服务使用者调用 foo（）服务代理函数，而后 foo（）服务代理函数通过 Binder RPC 调用 Foo 服务的 foo（）服务 Stub 函数\n\n首先服务使用者调用 foo（）代理函数，传递 Binder RPC 数据，该数据包含引用 Foo 服务的请求。Binder RPC 数据经过 Marshalling 处理后，由 Service Framework 生成 Binder IPC 数据，然后通过 Binder Driver 传递给 Service Server 端\n\nService Server 端收到 Binder IPC 数据后，由 Service Framework 对数据进行 UnMarshalling 处理，然后传递给 Service Stub的onTransact（）函数，Service Stub 根据 Binder IPC 数据中的 RPC 代码判断它是一个针对 Foo服务的foo（）服务 Stub 函数的 Binder RPC，最后， 以 Binder IPC 数据中包含的 Binder RPC 数据为参数，调用 foo（）服务的 Stub 函数。至此，就是 Binder IPC 的整个流程。\n\n————摘自《Android框架揭秘》 以上部分是这本书中的大部分知识的总结，其中的这几幅图更是这些重点简单明了的描述。当然 Binder 机制只看图还是不能深入了解的，因为内容比较多，所以还是推荐看书，写的不错。","source":"_posts/从Framework层看Android启动.md","raw":"---\ntitle: 从 Framework 层看 Android 启动\nlayout: post\ndate: 2014/12/04 13:01:13\ntags : 读书笔记\n---\n\n众所周知，Linux 中所有的进程都是有 init 进程创建并运行的，Android 系统基于 Linux 内核，所以也存在着 init 进程。\ninit进程启动的过程比较复杂，但是在准备工作做好之后，会通过 jni 创建 Dalvik 虚拟机，然后启动 Android 的核心 Zygote 进程，这个进程将成为所有应用进程的孵化器存在。下面我通过几个图来说明这个过程。\n\n### Init 进程启动以及 Zygote 启动\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141204181105.jpg)\n\n上图是启动 Android 设备之后的进程，可以明显看到在 init 进程启动之后启动了 Zygote 进程，而 Zygote 作为之后的大部分进程的父进程存在。\n\n### Zygote 启动应用程序\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141204181056.jpg)\n\n上图是 Zygote 进程启动应用程序的流程图，Zygote 进程调用 fork（）函数创建出 Zygote 子进程，子进程共享父进程的代码区和链接信息，但是注意，新的 Android 应用程序并非通过 fork（）来重新装载已有的进程代码区，而是动态的加载到复制出的Dalvik虚拟机上，而后，Zygote 进程将执行流程交给应用程序，Android 应用程序开始运行，新生的应用程序拥有 Zygote 的进程库和资源的链接信息，所以运行速度很快。\n\n### Android Framework 的启动过程\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141204181100.jpg)\n\n上图是 Android Framework 的启动过程，Zygote 启动 Dalvik 虚拟机后，会在生成一个 Dalvik 虚拟机示例，以便运行名称为 SystemServer 的 Java 服务，SystemServer 用于运行 Audio Flinger 与 Surface Flinger 本地服务，运行完本地服务之后开始运行 Android Framework 的 Java 服务，也就是我们在 Android 系统架构图中 Application Framework 中的各种 Manager Server\n下图我们从代码层看 Android Framework 的启动过程\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141204181052.jpg)\n\n### Binder IPC 机制\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20141204181047.jpg)\n\n由于 Android 应用程序与系统服务不在同一个系统进程中，这里就引入的 Binder IPC 机制，服务使用者调用 foo（）服务代理函数，而后 foo（）服务代理函数通过 Binder RPC 调用 Foo 服务的 foo（）服务 Stub 函数\n\n首先服务使用者调用 foo（）代理函数，传递 Binder RPC 数据，该数据包含引用 Foo 服务的请求。Binder RPC 数据经过 Marshalling 处理后，由 Service Framework 生成 Binder IPC 数据，然后通过 Binder Driver 传递给 Service Server 端\n\nService Server 端收到 Binder IPC 数据后，由 Service Framework 对数据进行 UnMarshalling 处理，然后传递给 Service Stub的onTransact（）函数，Service Stub 根据 Binder IPC 数据中的 RPC 代码判断它是一个针对 Foo服务的foo（）服务 Stub 函数的 Binder RPC，最后， 以 Binder IPC 数据中包含的 Binder RPC 数据为参数，调用 foo（）服务的 Stub 函数。至此，就是 Binder IPC 的整个流程。\n\n————摘自《Android框架揭秘》 以上部分是这本书中的大部分知识的总结，其中的这几幅图更是这些重点简单明了的描述。当然 Binder 机制只看图还是不能深入了解的，因为内容比较多，所以还是推荐看书，写的不错。","slug":"从Framework层看Android启动","published":1,"updated":"2018-05-05T08:36:35.283Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzo000joky0uwrbfqxt","content":"<p>众所周知，Linux 中所有的进程都是有 init 进程创建并运行的，Android 系统基于 Linux 内核，所以也存在着 init 进程。<br>init进程启动的过程比较复杂，但是在准备工作做好之后，会通过 jni 创建 Dalvik 虚拟机，然后启动 Android 的核心 Zygote 进程，这个进程将成为所有应用进程的孵化器存在。下面我通过几个图来说明这个过程。</p>\n<h3 id=\"Init-进程启动以及-Zygote-启动\"><a href=\"#Init-进程启动以及-Zygote-启动\" class=\"headerlink\" title=\"Init 进程启动以及 Zygote 启动\"></a>Init 进程启动以及 Zygote 启动</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141204181105.jpg\" alt=\"tool-editor\"></p>\n<p>上图是启动 Android 设备之后的进程，可以明显看到在 init 进程启动之后启动了 Zygote 进程，而 Zygote 作为之后的大部分进程的父进程存在。</p>\n<h3 id=\"Zygote-启动应用程序\"><a href=\"#Zygote-启动应用程序\" class=\"headerlink\" title=\"Zygote 启动应用程序\"></a>Zygote 启动应用程序</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141204181056.jpg\" alt=\"tool-editor\"></p>\n<p>上图是 Zygote 进程启动应用程序的流程图，Zygote 进程调用 fork（）函数创建出 Zygote 子进程，子进程共享父进程的代码区和链接信息，但是注意，新的 Android 应用程序并非通过 fork（）来重新装载已有的进程代码区，而是动态的加载到复制出的Dalvik虚拟机上，而后，Zygote 进程将执行流程交给应用程序，Android 应用程序开始运行，新生的应用程序拥有 Zygote 的进程库和资源的链接信息，所以运行速度很快。</p>\n<h3 id=\"Android-Framework-的启动过程\"><a href=\"#Android-Framework-的启动过程\" class=\"headerlink\" title=\"Android Framework 的启动过程\"></a>Android Framework 的启动过程</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141204181100.jpg\" alt=\"tool-editor\"></p>\n<p>上图是 Android Framework 的启动过程，Zygote 启动 Dalvik 虚拟机后，会在生成一个 Dalvik 虚拟机示例，以便运行名称为 SystemServer 的 Java 服务，SystemServer 用于运行 Audio Flinger 与 Surface Flinger 本地服务，运行完本地服务之后开始运行 Android Framework 的 Java 服务，也就是我们在 Android 系统架构图中 Application Framework 中的各种 Manager Server<br>下图我们从代码层看 Android Framework 的启动过程</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141204181052.jpg\" alt=\"tool-editor\"></p>\n<h3 id=\"Binder-IPC-机制\"><a href=\"#Binder-IPC-机制\" class=\"headerlink\" title=\"Binder IPC 机制\"></a>Binder IPC 机制</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141204181047.jpg\" alt=\"tool-editor\"></p>\n<p>由于 Android 应用程序与系统服务不在同一个系统进程中，这里就引入的 Binder IPC 机制，服务使用者调用 foo（）服务代理函数，而后 foo（）服务代理函数通过 Binder RPC 调用 Foo 服务的 foo（）服务 Stub 函数</p>\n<p>首先服务使用者调用 foo（）代理函数，传递 Binder RPC 数据，该数据包含引用 Foo 服务的请求。Binder RPC 数据经过 Marshalling 处理后，由 Service Framework 生成 Binder IPC 数据，然后通过 Binder Driver 传递给 Service Server 端</p>\n<p>Service Server 端收到 Binder IPC 数据后，由 Service Framework 对数据进行 UnMarshalling 处理，然后传递给 Service Stub的onTransact（）函数，Service Stub 根据 Binder IPC 数据中的 RPC 代码判断它是一个针对 Foo服务的foo（）服务 Stub 函数的 Binder RPC，最后， 以 Binder IPC 数据中包含的 Binder RPC 数据为参数，调用 foo（）服务的 Stub 函数。至此，就是 Binder IPC 的整个流程。</p>\n<p>————摘自《Android框架揭秘》 以上部分是这本书中的大部分知识的总结，其中的这几幅图更是这些重点简单明了的描述。当然 Binder 机制只看图还是不能深入了解的，因为内容比较多，所以还是推荐看书，写的不错。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>众所周知，Linux 中所有的进程都是有 init 进程创建并运行的，Android 系统基于 Linux 内核，所以也存在着 init 进程。<br>init进程启动的过程比较复杂，但是在准备工作做好之后，会通过 jni 创建 Dalvik 虚拟机，然后启动 Android 的核心 Zygote 进程，这个进程将成为所有应用进程的孵化器存在。下面我通过几个图来说明这个过程。</p>\n<h3 id=\"Init-进程启动以及-Zygote-启动\"><a href=\"#Init-进程启动以及-Zygote-启动\" class=\"headerlink\" title=\"Init 进程启动以及 Zygote 启动\"></a>Init 进程启动以及 Zygote 启动</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141204181105.jpg\" alt=\"tool-editor\"></p>\n<p>上图是启动 Android 设备之后的进程，可以明显看到在 init 进程启动之后启动了 Zygote 进程，而 Zygote 作为之后的大部分进程的父进程存在。</p>\n<h3 id=\"Zygote-启动应用程序\"><a href=\"#Zygote-启动应用程序\" class=\"headerlink\" title=\"Zygote 启动应用程序\"></a>Zygote 启动应用程序</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141204181056.jpg\" alt=\"tool-editor\"></p>\n<p>上图是 Zygote 进程启动应用程序的流程图，Zygote 进程调用 fork（）函数创建出 Zygote 子进程，子进程共享父进程的代码区和链接信息，但是注意，新的 Android 应用程序并非通过 fork（）来重新装载已有的进程代码区，而是动态的加载到复制出的Dalvik虚拟机上，而后，Zygote 进程将执行流程交给应用程序，Android 应用程序开始运行，新生的应用程序拥有 Zygote 的进程库和资源的链接信息，所以运行速度很快。</p>\n<h3 id=\"Android-Framework-的启动过程\"><a href=\"#Android-Framework-的启动过程\" class=\"headerlink\" title=\"Android Framework 的启动过程\"></a>Android Framework 的启动过程</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141204181100.jpg\" alt=\"tool-editor\"></p>\n<p>上图是 Android Framework 的启动过程，Zygote 启动 Dalvik 虚拟机后，会在生成一个 Dalvik 虚拟机示例，以便运行名称为 SystemServer 的 Java 服务，SystemServer 用于运行 Audio Flinger 与 Surface Flinger 本地服务，运行完本地服务之后开始运行 Android Framework 的 Java 服务，也就是我们在 Android 系统架构图中 Application Framework 中的各种 Manager Server<br>下图我们从代码层看 Android Framework 的启动过程</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141204181052.jpg\" alt=\"tool-editor\"></p>\n<h3 id=\"Binder-IPC-机制\"><a href=\"#Binder-IPC-机制\" class=\"headerlink\" title=\"Binder IPC 机制\"></a>Binder IPC 机制</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20141204181047.jpg\" alt=\"tool-editor\"></p>\n<p>由于 Android 应用程序与系统服务不在同一个系统进程中，这里就引入的 Binder IPC 机制，服务使用者调用 foo（）服务代理函数，而后 foo（）服务代理函数通过 Binder RPC 调用 Foo 服务的 foo（）服务 Stub 函数</p>\n<p>首先服务使用者调用 foo（）代理函数，传递 Binder RPC 数据，该数据包含引用 Foo 服务的请求。Binder RPC 数据经过 Marshalling 处理后，由 Service Framework 生成 Binder IPC 数据，然后通过 Binder Driver 传递给 Service Server 端</p>\n<p>Service Server 端收到 Binder IPC 数据后，由 Service Framework 对数据进行 UnMarshalling 处理，然后传递给 Service Stub的onTransact（）函数，Service Stub 根据 Binder IPC 数据中的 RPC 代码判断它是一个针对 Foo服务的foo（）服务 Stub 函数的 Binder RPC，最后， 以 Binder IPC 数据中包含的 Binder RPC 数据为参数，调用 foo（）服务的 Stub 函数。至此，就是 Binder IPC 的整个流程。</p>\n<p>————摘自《Android框架揭秘》 以上部分是这本书中的大部分知识的总结，其中的这几幅图更是这些重点简单明了的描述。当然 Binder 机制只看图还是不能深入了解的，因为内容比较多，所以还是推荐看书，写的不错。</p>\n"},{"title":"关于 WebView 因 url 重定向而导致无法 goBack 的问题","layout":"post","date":"2014-11-11T15:13:50.000Z","_content":"\n最近项目中有一些界面需要嵌入 wap 页，在按返回键的时候让 WebView goBack, 大部分界面都是可以正常回退的,可是某些会重定向的地址却无法正常 goBack，原因是，退回重定向之前的 url 又被重定向了回来,网上的解决办法是自己控制一个 url 集合,我试了一下非常麻烦,因为我们还需要 goForward 功能,仅仅使用一个 LinkedList 还满足不了需求.最终还是放弃了这样的做法,后来终于在 stackOverflow 上找到了解决的办法,解决的方法真是格外的简单.直接看代码\n\n为了让 WebView 控制界面里面的 url 跳转,我们一般都会设置 WebViewClient ，并重写 shouldOverrideUrlLoading 方法，让 WebView 加载点击 url，一般的例子代码如下:\n\n```java\nwebView.setWebViewClient(new WebViewClient() {\n\n\t@Override\n\tpublic boolean shouldOverrideUrlLoading(WebView view, String url) {\n\t\t view.loadUrl(url);\n\t\treturn true;\n\t}\n});\n```\n\n解决办法:\n\n```java\nwebView.setWebViewClient(new WebViewClient() {\n\n\t@Override\n\tpublic boolean shouldOverrideUrlLoading(WebView view, String url) {\n\t\t \n\t\treturn false;\n\t}\n});\n```\n\n万万没想到解决办法就在 api 里面,shouldOverrideUrlLoading这个方法的 api 如下:\n\nGive the host application a chance to take over the control when a new url is about to be loaded in the current WebView. If WebViewClient is not provided, by default WebView will ask Activity Manager to choose the proper handler for the url. If WebViewClient is provided, return true means the host application handles the url, while return false means the current WebView handles the url.\n\n就是说如果 application 处理这个 url 则返回 true,如果 WebView 处理这个 url 则返回 false.我们让 WebView 处理了这个 url 就应该返回 false,否则相当于处理的两(多)次,而这也是这个问题出现的原因所在.\n\n后来我又看了一下 WebViewClient 的其他方法发现原来好多问题都可以在这里解决,只是之前用的不多不知道有这些方法,例如:\n\n> * onPageStarted 在页面加载开始时调用.\n> * onPageFinished 在页面加载结束时调用.\n> * onLoadResource 在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次.\n\n如果你还需要更丰富的处理效果那么推荐你用 WebChromeClient.\n\n\nps: 最近国内 github 好不稳定啊，大家还是翻墙吧.","source":"_posts/关于WebView因url重定向而导致无法goBack的问题.md","raw":"---\ntitle: 关于 WebView 因 url 重定向而导致无法 goBack 的问题\nlayout: post\ndate: 2014/11/11 23:13:50\ntags : 工作总结\n---\n\n最近项目中有一些界面需要嵌入 wap 页，在按返回键的时候让 WebView goBack, 大部分界面都是可以正常回退的,可是某些会重定向的地址却无法正常 goBack，原因是，退回重定向之前的 url 又被重定向了回来,网上的解决办法是自己控制一个 url 集合,我试了一下非常麻烦,因为我们还需要 goForward 功能,仅仅使用一个 LinkedList 还满足不了需求.最终还是放弃了这样的做法,后来终于在 stackOverflow 上找到了解决的办法,解决的方法真是格外的简单.直接看代码\n\n为了让 WebView 控制界面里面的 url 跳转,我们一般都会设置 WebViewClient ，并重写 shouldOverrideUrlLoading 方法，让 WebView 加载点击 url，一般的例子代码如下:\n\n```java\nwebView.setWebViewClient(new WebViewClient() {\n\n\t@Override\n\tpublic boolean shouldOverrideUrlLoading(WebView view, String url) {\n\t\t view.loadUrl(url);\n\t\treturn true;\n\t}\n});\n```\n\n解决办法:\n\n```java\nwebView.setWebViewClient(new WebViewClient() {\n\n\t@Override\n\tpublic boolean shouldOverrideUrlLoading(WebView view, String url) {\n\t\t \n\t\treturn false;\n\t}\n});\n```\n\n万万没想到解决办法就在 api 里面,shouldOverrideUrlLoading这个方法的 api 如下:\n\nGive the host application a chance to take over the control when a new url is about to be loaded in the current WebView. If WebViewClient is not provided, by default WebView will ask Activity Manager to choose the proper handler for the url. If WebViewClient is provided, return true means the host application handles the url, while return false means the current WebView handles the url.\n\n就是说如果 application 处理这个 url 则返回 true,如果 WebView 处理这个 url 则返回 false.我们让 WebView 处理了这个 url 就应该返回 false,否则相当于处理的两(多)次,而这也是这个问题出现的原因所在.\n\n后来我又看了一下 WebViewClient 的其他方法发现原来好多问题都可以在这里解决,只是之前用的不多不知道有这些方法,例如:\n\n> * onPageStarted 在页面加载开始时调用.\n> * onPageFinished 在页面加载结束时调用.\n> * onLoadResource 在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次.\n\n如果你还需要更丰富的处理效果那么推荐你用 WebChromeClient.\n\n\nps: 最近国内 github 好不稳定啊，大家还是翻墙吧.","slug":"关于WebView因url重定向而导致无法goBack的问题","published":1,"updated":"2018-05-05T08:36:02.180Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzq000loky0ngltmb28","content":"<p>最近项目中有一些界面需要嵌入 wap 页，在按返回键的时候让 WebView goBack, 大部分界面都是可以正常回退的,可是某些会重定向的地址却无法正常 goBack，原因是，退回重定向之前的 url 又被重定向了回来,网上的解决办法是自己控制一个 url 集合,我试了一下非常麻烦,因为我们还需要 goForward 功能,仅仅使用一个 LinkedList 还满足不了需求.最终还是放弃了这样的做法,后来终于在 stackOverflow 上找到了解决的办法,解决的方法真是格外的简单.直接看代码</p>\n<p>为了让 WebView 控制界面里面的 url 跳转,我们一般都会设置 WebViewClient ，并重写 shouldOverrideUrlLoading 方法，让 WebView 加载点击 url，一般的例子代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">\t\t view.loadUrl(url);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>解决办法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>万万没想到解决办法就在 api 里面,shouldOverrideUrlLoading这个方法的 api 如下:</p>\n<p>Give the host application a chance to take over the control when a new url is about to be loaded in the current WebView. If WebViewClient is not provided, by default WebView will ask Activity Manager to choose the proper handler for the url. If WebViewClient is provided, return true means the host application handles the url, while return false means the current WebView handles the url.</p>\n<p>就是说如果 application 处理这个 url 则返回 true,如果 WebView 处理这个 url 则返回 false.我们让 WebView 处理了这个 url 就应该返回 false,否则相当于处理的两(多)次,而这也是这个问题出现的原因所在.</p>\n<p>后来我又看了一下 WebViewClient 的其他方法发现原来好多问题都可以在这里解决,只是之前用的不多不知道有这些方法,例如:</p>\n<blockquote>\n<ul>\n<li>onPageStarted 在页面加载开始时调用.</li>\n<li>onPageFinished 在页面加载结束时调用.</li>\n<li>onLoadResource 在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次.</li>\n</ul>\n</blockquote>\n<p>如果你还需要更丰富的处理效果那么推荐你用 WebChromeClient.</p>\n<p>ps: 最近国内 github 好不稳定啊，大家还是翻墙吧.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近项目中有一些界面需要嵌入 wap 页，在按返回键的时候让 WebView goBack, 大部分界面都是可以正常回退的,可是某些会重定向的地址却无法正常 goBack，原因是，退回重定向之前的 url 又被重定向了回来,网上的解决办法是自己控制一个 url 集合,我试了一下非常麻烦,因为我们还需要 goForward 功能,仅仅使用一个 LinkedList 还满足不了需求.最终还是放弃了这样的做法,后来终于在 stackOverflow 上找到了解决的办法,解决的方法真是格外的简单.直接看代码</p>\n<p>为了让 WebView 控制界面里面的 url 跳转,我们一般都会设置 WebViewClient ，并重写 shouldOverrideUrlLoading 方法，让 WebView 加载点击 url，一般的例子代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">\t\t view.loadUrl(url);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>解决办法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>万万没想到解决办法就在 api 里面,shouldOverrideUrlLoading这个方法的 api 如下:</p>\n<p>Give the host application a chance to take over the control when a new url is about to be loaded in the current WebView. If WebViewClient is not provided, by default WebView will ask Activity Manager to choose the proper handler for the url. If WebViewClient is provided, return true means the host application handles the url, while return false means the current WebView handles the url.</p>\n<p>就是说如果 application 处理这个 url 则返回 true,如果 WebView 处理这个 url 则返回 false.我们让 WebView 处理了这个 url 就应该返回 false,否则相当于处理的两(多)次,而这也是这个问题出现的原因所在.</p>\n<p>后来我又看了一下 WebViewClient 的其他方法发现原来好多问题都可以在这里解决,只是之前用的不多不知道有这些方法,例如:</p>\n<blockquote>\n<ul>\n<li>onPageStarted 在页面加载开始时调用.</li>\n<li>onPageFinished 在页面加载结束时调用.</li>\n<li>onLoadResource 在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次.</li>\n</ul>\n</blockquote>\n<p>如果你还需要更丰富的处理效果那么推荐你用 WebChromeClient.</p>\n<p>ps: 最近国内 github 好不稳定啊，大家还是翻墙吧.</p>\n"},{"title":"使用 Shell 来编译 Android 项目","layout":"post","date":"2015-06-30T15:10:44.000Z","_content":"\n使用 Gradle 构建项目很久了，为了少敲命令行，我自己写了个简单的 Shell 脚本。\n\n### 脚本\n在项目目录下(不是 app moudle 目录下) 建一个 Shell 脚本 b.sh ，内容如下：\n\n```python\n\n#!/bin/sh\necho \"清理缓存...\"\n./gradlew clean\necho \"清理成功\"\necho \"开始编译...\"\n./gradlew build\necho \"编译成功\"\nopen ./app/build/outputs/apk/\n\n```\n注：如果你的 moudle 名字不是 app 那你就把脚本里面的 app 改名成你自己的 moudle 名字。\n\n以后需要构建项目的话直接在 Terminal 里面敲 sh b.sh 就可以啦。\n\n刚开始学 Shell ，脚本比较简单，不过也算是学以致用了。\n","source":"_posts/使用Shell来编译Android项目.md","raw":"---\ntitle: 使用 Shell 来编译 Android 项目\nlayout: post\ndate: 2015/06/30 23:10:44\ntags : Shell\n---\n\n使用 Gradle 构建项目很久了，为了少敲命令行，我自己写了个简单的 Shell 脚本。\n\n### 脚本\n在项目目录下(不是 app moudle 目录下) 建一个 Shell 脚本 b.sh ，内容如下：\n\n```python\n\n#!/bin/sh\necho \"清理缓存...\"\n./gradlew clean\necho \"清理成功\"\necho \"开始编译...\"\n./gradlew build\necho \"编译成功\"\nopen ./app/build/outputs/apk/\n\n```\n注：如果你的 moudle 名字不是 app 那你就把脚本里面的 app 改名成你自己的 moudle 名字。\n\n以后需要构建项目的话直接在 Terminal 里面敲 sh b.sh 就可以啦。\n\n刚开始学 Shell ，脚本比较简单，不过也算是学以致用了。\n","slug":"使用Shell来编译Android项目","published":1,"updated":"2018-05-05T08:38:28.312Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzr000ooky0dbz6h5xt","content":"<p>使用 Gradle 构建项目很久了，为了少敲命令行，我自己写了个简单的 Shell 脚本。</p>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p>在项目目录下(不是 app moudle 目录下) 建一个 Shell 脚本 b.sh ，内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\">echo <span class=\"string\">\"清理缓存...\"</span></span><br><span class=\"line\">./gradlew clean</span><br><span class=\"line\">echo <span class=\"string\">\"清理成功\"</span></span><br><span class=\"line\">echo <span class=\"string\">\"开始编译...\"</span></span><br><span class=\"line\">./gradlew build</span><br><span class=\"line\">echo <span class=\"string\">\"编译成功\"</span></span><br><span class=\"line\">open ./app/build/outputs/apk/</span><br></pre></td></tr></table></figure>\n<p>注：如果你的 moudle 名字不是 app 那你就把脚本里面的 app 改名成你自己的 moudle 名字。</p>\n<p>以后需要构建项目的话直接在 Terminal 里面敲 sh b.sh 就可以啦。</p>\n<p>刚开始学 Shell ，脚本比较简单，不过也算是学以致用了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 Gradle 构建项目很久了，为了少敲命令行，我自己写了个简单的 Shell 脚本。</p>\n<h3 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h3><p>在项目目录下(不是 app moudle 目录下) 建一个 Shell 脚本 b.sh ，内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\">echo <span class=\"string\">\"清理缓存...\"</span></span><br><span class=\"line\">./gradlew clean</span><br><span class=\"line\">echo <span class=\"string\">\"清理成功\"</span></span><br><span class=\"line\">echo <span class=\"string\">\"开始编译...\"</span></span><br><span class=\"line\">./gradlew build</span><br><span class=\"line\">echo <span class=\"string\">\"编译成功\"</span></span><br><span class=\"line\">open ./app/build/outputs/apk/</span><br></pre></td></tr></table></figure>\n<p>注：如果你的 moudle 名字不是 app 那你就把脚本里面的 app 改名成你自己的 moudle 名字。</p>\n<p>以后需要构建项目的话直接在 Terminal 里面敲 sh b.sh 就可以啦。</p>\n<p>刚开始学 Shell ，脚本比较简单，不过也算是学以致用了。</p>\n"},{"title":"你试过这样分析 Android 界面么","layout":"post","date":"2015-07-25T13:17:24.000Z","_content":"\n常常有时候界面不是我们自己写的需要我们去改，常常有时候我们需要参考别人的 APP 的布局来写自己的应用，常常有时候我们自己写的界面需要调试一些隐藏界面。难，怎么办，我来教你一个办法。\n\n### 正题\n\n在 Android 开发者选项里面有几个设置大家可能没注意到过，我要说的就是通过那里面的设置来分析，首先打开开发者选项，勾上显示布局界限，然后如下图：\n\n![](http://oneylt1vv.bkt.clouddn.com/20150725141853.png)\n\n上图中图四个蓝色尖角包着的就是这个组件的大小，矩形外面的紫色（粉色）部分就是 margin 的宽度，而组件内部如果有空白的话一般就是 padding，但是不排除是图片的白色边框，同时，如果有隐藏组件的话也会在这个模式下显示出来，读者可以自己亲自测试一下，另外呢，也可以用这个模式来区分组件是原生的还是嵌进去的 web 页，查看组件变化的时候的移动过程等，尤其是在 UI 显示异常的时候特别有用。总之，用处多多。\n\n### 其他\n\n除了这个功能，在开发者选项里面还有一些其他的功能也挺有用的，比如:\n> * 保持唤醒状态———— 可以让你在测试的实惠手机不锁屏。\n> * 指针位置————这个不多说啦，除了位置还可以看出来速度，比自己用 Log 看方便些。\n> * 显示所有ANR————这个我觉得还是有用的，要不只是一闪而过。\n> * 不保持活动项————这个建议不要开，因为有时候需要调试一些后台的程序。","source":"_posts/你试过这样分析Android界面么.md","raw":"---\ntitle: 你试过这样分析 Android 界面么\nlayout: post\ndate: 2015/07/25 21:17:24\ntags : 工作总结\n---\n\n常常有时候界面不是我们自己写的需要我们去改，常常有时候我们需要参考别人的 APP 的布局来写自己的应用，常常有时候我们自己写的界面需要调试一些隐藏界面。难，怎么办，我来教你一个办法。\n\n### 正题\n\n在 Android 开发者选项里面有几个设置大家可能没注意到过，我要说的就是通过那里面的设置来分析，首先打开开发者选项，勾上显示布局界限，然后如下图：\n\n![](http://oneylt1vv.bkt.clouddn.com/20150725141853.png)\n\n上图中图四个蓝色尖角包着的就是这个组件的大小，矩形外面的紫色（粉色）部分就是 margin 的宽度，而组件内部如果有空白的话一般就是 padding，但是不排除是图片的白色边框，同时，如果有隐藏组件的话也会在这个模式下显示出来，读者可以自己亲自测试一下，另外呢，也可以用这个模式来区分组件是原生的还是嵌进去的 web 页，查看组件变化的时候的移动过程等，尤其是在 UI 显示异常的时候特别有用。总之，用处多多。\n\n### 其他\n\n除了这个功能，在开发者选项里面还有一些其他的功能也挺有用的，比如:\n> * 保持唤醒状态———— 可以让你在测试的实惠手机不锁屏。\n> * 指针位置————这个不多说啦，除了位置还可以看出来速度，比自己用 Log 看方便些。\n> * 显示所有ANR————这个我觉得还是有用的，要不只是一闪而过。\n> * 不保持活动项————这个建议不要开，因为有时候需要调试一些后台的程序。","slug":"你试过这样分析Android界面么","published":1,"updated":"2018-05-05T08:38:43.984Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzs000qoky0ga7rsmg6","content":"<p>常常有时候界面不是我们自己写的需要我们去改，常常有时候我们需要参考别人的 APP 的布局来写自己的应用，常常有时候我们自己写的界面需要调试一些隐藏界面。难，怎么办，我来教你一个办法。</p>\n<h3 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h3><p>在 Android 开发者选项里面有几个设置大家可能没注意到过，我要说的就是通过那里面的设置来分析，首先打开开发者选项，勾上显示布局界限，然后如下图：</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20150725141853.png\" alt=\"\"></p>\n<p>上图中图四个蓝色尖角包着的就是这个组件的大小，矩形外面的紫色（粉色）部分就是 margin 的宽度，而组件内部如果有空白的话一般就是 padding，但是不排除是图片的白色边框，同时，如果有隐藏组件的话也会在这个模式下显示出来，读者可以自己亲自测试一下，另外呢，也可以用这个模式来区分组件是原生的还是嵌进去的 web 页，查看组件变化的时候的移动过程等，尤其是在 UI 显示异常的时候特别有用。总之，用处多多。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>除了这个功能，在开发者选项里面还有一些其他的功能也挺有用的，比如:</p>\n<blockquote>\n<ul>\n<li>保持唤醒状态———— 可以让你在测试的实惠手机不锁屏。</li>\n<li>指针位置————这个不多说啦，除了位置还可以看出来速度，比自己用 Log 看方便些。</li>\n<li>显示所有ANR————这个我觉得还是有用的，要不只是一闪而过。</li>\n<li>不保持活动项————这个建议不要开，因为有时候需要调试一些后台的程序。</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>常常有时候界面不是我们自己写的需要我们去改，常常有时候我们需要参考别人的 APP 的布局来写自己的应用，常常有时候我们自己写的界面需要调试一些隐藏界面。难，怎么办，我来教你一个办法。</p>\n<h3 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h3><p>在 Android 开发者选项里面有几个设置大家可能没注意到过，我要说的就是通过那里面的设置来分析，首先打开开发者选项，勾上显示布局界限，然后如下图：</p>\n<p><img src=\"http://oneylt1vv.bkt.clouddn.com/20150725141853.png\" alt=\"\"></p>\n<p>上图中图四个蓝色尖角包着的就是这个组件的大小，矩形外面的紫色（粉色）部分就是 margin 的宽度，而组件内部如果有空白的话一般就是 padding，但是不排除是图片的白色边框，同时，如果有隐藏组件的话也会在这个模式下显示出来，读者可以自己亲自测试一下，另外呢，也可以用这个模式来区分组件是原生的还是嵌进去的 web 页，查看组件变化的时候的移动过程等，尤其是在 UI 显示异常的时候特别有用。总之，用处多多。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>除了这个功能，在开发者选项里面还有一些其他的功能也挺有用的，比如:</p>\n<blockquote>\n<ul>\n<li>保持唤醒状态———— 可以让你在测试的实惠手机不锁屏。</li>\n<li>指针位置————这个不多说啦，除了位置还可以看出来速度，比自己用 Log 看方便些。</li>\n<li>显示所有ANR————这个我觉得还是有用的，要不只是一闪而过。</li>\n<li>不保持活动项————这个建议不要开，因为有时候需要调试一些后台的程序。</li>\n</ul>\n</blockquote>\n"},{"title":"关于使用 commons-codec.jar 出现方法找不到的问题","layout":"post","date":"2014-11-01T17:43:09.000Z","_content":"\n最近项目里要做非即时一对一消息功能，图省事我就直接用了友盟提供的sdk，接收直接用友盟提供的 android 的 sdk，发送方使用友盟服务端 Java api，一个挺简单的功能，理论是可以行得通的，实践证明也是可以行得通的，只是中途出现一个很坑的问题让我不得不记录下来。\n\n### 经过\n\n事情是这样的，在我使用发送消息的api 的时候需要获得 validationToken，而这个值是 appkey + appMasterSecret + 时间戳 经过 DigestUtils.md5Hex 算法得来的，而 md5Hex 这个方法在使用的时候竟然找不到，我看了一下在android.jar 文件里面只有声明却没有实现，这可苦了我了。于是乎我找来了commons-codec-1.6.jar 心想这就可以了吧，结果又出了包名重复的错，这下难办了，我又不能修改android.jar。咋办呢，只能拿 commons-codec 的源码改包名了。果然，问题解决。\n\n### 结果\n\n写的很简单，可当时却足足花了我半天的时间才解决，如果你也碰到了这样的问题，直接下源码改包名便可轻松解决，包我就不传了，网上很多。顺便支持一下友盟，真的很方便!!","source":"_posts/关于使用commons-codec.jar出现方法找不到的问题.md","raw":"---\ntitle: 关于使用 commons-codec.jar 出现方法找不到的问题\nlayout: post\ndate: 2014/11/02 01:43:09\ntags : 工作总结\n---\n\n最近项目里要做非即时一对一消息功能，图省事我就直接用了友盟提供的sdk，接收直接用友盟提供的 android 的 sdk，发送方使用友盟服务端 Java api，一个挺简单的功能，理论是可以行得通的，实践证明也是可以行得通的，只是中途出现一个很坑的问题让我不得不记录下来。\n\n### 经过\n\n事情是这样的，在我使用发送消息的api 的时候需要获得 validationToken，而这个值是 appkey + appMasterSecret + 时间戳 经过 DigestUtils.md5Hex 算法得来的，而 md5Hex 这个方法在使用的时候竟然找不到，我看了一下在android.jar 文件里面只有声明却没有实现，这可苦了我了。于是乎我找来了commons-codec-1.6.jar 心想这就可以了吧，结果又出了包名重复的错，这下难办了，我又不能修改android.jar。咋办呢，只能拿 commons-codec 的源码改包名了。果然，问题解决。\n\n### 结果\n\n写的很简单，可当时却足足花了我半天的时间才解决，如果你也碰到了这样的问题，直接下源码改包名便可轻松解决，包我就不传了，网上很多。顺便支持一下友盟，真的很方便!!","slug":"关于使用commons-codec.jar出现方法找不到的问题","published":1,"updated":"2018-05-05T08:35:44.421Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzu000toky0uvoo897q","content":"<p>最近项目里要做非即时一对一消息功能，图省事我就直接用了友盟提供的sdk，接收直接用友盟提供的 android 的 sdk，发送方使用友盟服务端 Java api，一个挺简单的功能，理论是可以行得通的，实践证明也是可以行得通的，只是中途出现一个很坑的问题让我不得不记录下来。</p>\n<h3 id=\"经过\"><a href=\"#经过\" class=\"headerlink\" title=\"经过\"></a>经过</h3><p>事情是这样的，在我使用发送消息的api 的时候需要获得 validationToken，而这个值是 appkey + appMasterSecret + 时间戳 经过 DigestUtils.md5Hex 算法得来的，而 md5Hex 这个方法在使用的时候竟然找不到，我看了一下在android.jar 文件里面只有声明却没有实现，这可苦了我了。于是乎我找来了commons-codec-1.6.jar 心想这就可以了吧，结果又出了包名重复的错，这下难办了，我又不能修改android.jar。咋办呢，只能拿 commons-codec 的源码改包名了。果然，问题解决。</p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p>写的很简单，可当时却足足花了我半天的时间才解决，如果你也碰到了这样的问题，直接下源码改包名便可轻松解决，包我就不传了，网上很多。顺便支持一下友盟，真的很方便!!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近项目里要做非即时一对一消息功能，图省事我就直接用了友盟提供的sdk，接收直接用友盟提供的 android 的 sdk，发送方使用友盟服务端 Java api，一个挺简单的功能，理论是可以行得通的，实践证明也是可以行得通的，只是中途出现一个很坑的问题让我不得不记录下来。</p>\n<h3 id=\"经过\"><a href=\"#经过\" class=\"headerlink\" title=\"经过\"></a>经过</h3><p>事情是这样的，在我使用发送消息的api 的时候需要获得 validationToken，而这个值是 appkey + appMasterSecret + 时间戳 经过 DigestUtils.md5Hex 算法得来的，而 md5Hex 这个方法在使用的时候竟然找不到，我看了一下在android.jar 文件里面只有声明却没有实现，这可苦了我了。于是乎我找来了commons-codec-1.6.jar 心想这就可以了吧，结果又出了包名重复的错，这下难办了，我又不能修改android.jar。咋办呢，只能拿 commons-codec 的源码改包名了。果然，问题解决。</p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p>写的很简单，可当时却足足花了我半天的时间才解决，如果你也碰到了这样的问题，直接下源码改包名便可轻松解决，包我就不传了，网上很多。顺便支持一下友盟，真的很方便!!</p>\n"},{"title":"策略枚举","layout":"post","date":"2015-02-27T15:06:12.000Z","description":"策略枚举","_content":"\n搞 Java 的一定听说过设计模式中的策略模式，具体这个模式的优点我就不细说了，这里讲的并非策略模式而是和策略模式类同却比策略模式简便的东西————策略枚举（strategy enum）\n\n### 举个栗子\n考虑用一个枚举表示薪资包中的工作天数，这个枚举有一个方法，根据给定某工人的基本工资(按小时)以及当天的工作时间，来计算他当天的报酬。在五个工作日中，超过正常八个小时的工作时间都会产生加班工资；在双休日中，所有的工作都产生加班工资。利用 switch 语句，很容易将多个 case 标签分别应用到两个代码片段中，来完成这一计算。\n\n```java\nenum PayrollDay {\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;\n    private static final int HOURS_PER_SHIFT = 8;\n\n    double pay(double hoursWorked, double payRate) {\n        double basePay = hoursWorked * payRate;\n        double overtimePay;\n        switch (this) {\n            case SATURDAY:\n            case SUNDAY:\n                overtimePay = hoursWorked * payRate / 2;\n            default:\n                overtimePay = hoursWorked <= HOURS_PER_SHIFT ?\n                0 : (hoursWorked - HOURS_PER_SHIFT) * payRate / 2;\n                break;\n        }\n        return basePay + overtimePay;\n    }\n}\n```\n\n不可否认，这段代码十分简洁，但是从维护的角度来看，它非常危险。假设将一个元素添加到该枚举中，或许是一个表示假期天数的特殊值，但是忘记给 switch 语句添加相应的 case。程序依然可以编译，但 pay 方法会悄悄的将假期工资计算成与正常工作日的相同。\n\n为了利用特定于常量的方法实现安全的执行工资计算，你可能必须重复计算每个常量的加班工资，或者将计算移到两个辅助方法中(一个用来计算工作日，一个用来计算双休日)，并从每个常量调用相应的辅助方法。这任何一种方法都会产生相当数量的样板代码，结果降低了可读性，并增加了出错的几率。\n\n通过用计算工作日加班工资的具体方法代替 PayrollDay 中抽象的 overtimePay 方法，可以减少样板代码。这样，就只有双休日必须覆盖该方法了。但是这样也有着与 switch 语句一样的不足：如果又增加了一天而没有覆盖 overtimePay 方法，就会悄悄的延续工作日的计算。\n\n你真正想要的就出每当添加一个枚举常量时，就强制选择一种加班报酬策略。幸运的是，有一种很好的办法可以实现这一点。这种想法就是将加班工资计算移到一个私有的嵌套枚举中，将这个策略枚举的实例传到 PayrollDay 枚举的构造器中。之后 PayrollDay 枚举将加班工资计算委托给策略枚举，PayrollDay 中就不需要switch语句或特定与常量的方法实现了。这种模式虽然没有 switch 语句那么简洁，但是更安全，也更加灵活。\n代码如下：\n\n```java\n\nenum PayrollDay {\n    MONDAY(PayType.WEEKDAY), TUESDAY(PayType.WEEKDAY),\n    WEDNESDAY(PayType.WEEKDAY), THURSDAY(PayType.WEEKDAY),\n    FRIDAY(PayType.WEEKDAY), SATURDAY(PayType.WEEKEND),\n    SUNDAY(PayType.WEEKEND);\n\n    private final PayType payType;\n\n    PayrollDay(PayType payType) {\n        this.payType = payType;\n    }\n\n    double pay(double hoursWorked, double payRate) {\n        double basePay = hoursWorked * payRate;\n        return basePay + payType.overtimePay(hoursWorked, payRate);\n    }\n\n    private enum PayType {\n        WEEKDAY {\n            double overtimePay(double hours, double payRate) {\n                return hours <= HOURS_PER_SHIFT ? \n                0 : (hours - HOURS_PER_SHIFT) * payRate / 2;\n            }\n        },\n        WEEKEND {\n            double overtimePay(double hours, double payRate) {\n                return hours * payRate / 2;\n            }\n        };\n\n        private static final int HOURS_PER_SHIFT = 8;\n\n        abstract double overtimePay(double hours, double payRate);\n\n        double pay(double hoursWorked, double payRate) {\n            double basePay = hoursWorked * payRate;\n            return basePay + overtimePay(hoursWorked, payRate);\n        }\n    }\n}\n\n```\n\n总而言之， 如果多个枚举常量同时共享相同的行为，则考虑策略枚举\n\n\n————摘自《Effective Java》 ","source":"_posts/策略枚举.md","raw":"---\ntitle: 策略枚举\nlayout: post\ndate: 2015/02/27 23:06:12\ndescription: 策略枚举\ntags : 读书笔记\n---\n\n搞 Java 的一定听说过设计模式中的策略模式，具体这个模式的优点我就不细说了，这里讲的并非策略模式而是和策略模式类同却比策略模式简便的东西————策略枚举（strategy enum）\n\n### 举个栗子\n考虑用一个枚举表示薪资包中的工作天数，这个枚举有一个方法，根据给定某工人的基本工资(按小时)以及当天的工作时间，来计算他当天的报酬。在五个工作日中，超过正常八个小时的工作时间都会产生加班工资；在双休日中，所有的工作都产生加班工资。利用 switch 语句，很容易将多个 case 标签分别应用到两个代码片段中，来完成这一计算。\n\n```java\nenum PayrollDay {\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;\n    private static final int HOURS_PER_SHIFT = 8;\n\n    double pay(double hoursWorked, double payRate) {\n        double basePay = hoursWorked * payRate;\n        double overtimePay;\n        switch (this) {\n            case SATURDAY:\n            case SUNDAY:\n                overtimePay = hoursWorked * payRate / 2;\n            default:\n                overtimePay = hoursWorked <= HOURS_PER_SHIFT ?\n                0 : (hoursWorked - HOURS_PER_SHIFT) * payRate / 2;\n                break;\n        }\n        return basePay + overtimePay;\n    }\n}\n```\n\n不可否认，这段代码十分简洁，但是从维护的角度来看，它非常危险。假设将一个元素添加到该枚举中，或许是一个表示假期天数的特殊值，但是忘记给 switch 语句添加相应的 case。程序依然可以编译，但 pay 方法会悄悄的将假期工资计算成与正常工作日的相同。\n\n为了利用特定于常量的方法实现安全的执行工资计算，你可能必须重复计算每个常量的加班工资，或者将计算移到两个辅助方法中(一个用来计算工作日，一个用来计算双休日)，并从每个常量调用相应的辅助方法。这任何一种方法都会产生相当数量的样板代码，结果降低了可读性，并增加了出错的几率。\n\n通过用计算工作日加班工资的具体方法代替 PayrollDay 中抽象的 overtimePay 方法，可以减少样板代码。这样，就只有双休日必须覆盖该方法了。但是这样也有着与 switch 语句一样的不足：如果又增加了一天而没有覆盖 overtimePay 方法，就会悄悄的延续工作日的计算。\n\n你真正想要的就出每当添加一个枚举常量时，就强制选择一种加班报酬策略。幸运的是，有一种很好的办法可以实现这一点。这种想法就是将加班工资计算移到一个私有的嵌套枚举中，将这个策略枚举的实例传到 PayrollDay 枚举的构造器中。之后 PayrollDay 枚举将加班工资计算委托给策略枚举，PayrollDay 中就不需要switch语句或特定与常量的方法实现了。这种模式虽然没有 switch 语句那么简洁，但是更安全，也更加灵活。\n代码如下：\n\n```java\n\nenum PayrollDay {\n    MONDAY(PayType.WEEKDAY), TUESDAY(PayType.WEEKDAY),\n    WEDNESDAY(PayType.WEEKDAY), THURSDAY(PayType.WEEKDAY),\n    FRIDAY(PayType.WEEKDAY), SATURDAY(PayType.WEEKEND),\n    SUNDAY(PayType.WEEKEND);\n\n    private final PayType payType;\n\n    PayrollDay(PayType payType) {\n        this.payType = payType;\n    }\n\n    double pay(double hoursWorked, double payRate) {\n        double basePay = hoursWorked * payRate;\n        return basePay + payType.overtimePay(hoursWorked, payRate);\n    }\n\n    private enum PayType {\n        WEEKDAY {\n            double overtimePay(double hours, double payRate) {\n                return hours <= HOURS_PER_SHIFT ? \n                0 : (hours - HOURS_PER_SHIFT) * payRate / 2;\n            }\n        },\n        WEEKEND {\n            double overtimePay(double hours, double payRate) {\n                return hours * payRate / 2;\n            }\n        };\n\n        private static final int HOURS_PER_SHIFT = 8;\n\n        abstract double overtimePay(double hours, double payRate);\n\n        double pay(double hoursWorked, double payRate) {\n            double basePay = hoursWorked * payRate;\n            return basePay + overtimePay(hoursWorked, payRate);\n        }\n    }\n}\n\n```\n\n总而言之， 如果多个枚举常量同时共享相同的行为，则考虑策略枚举\n\n\n————摘自《Effective Java》 ","slug":"策略枚举","published":1,"updated":"2018-05-05T08:37:19.610Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzv000voky0er0oxa6r","content":"<p>搞 Java 的一定听说过设计模式中的策略模式，具体这个模式的优点我就不细说了，这里讲的并非策略模式而是和策略模式类同却比策略模式简便的东西————策略枚举（strategy enum）</p>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><p>考虑用一个枚举表示薪资包中的工作天数，这个枚举有一个方法，根据给定某工人的基本工资(按小时)以及当天的工作时间，来计算他当天的报酬。在五个工作日中，超过正常八个小时的工作时间都会产生加班工资；在双休日中，所有的工作都产生加班工资。利用 switch 语句，很容易将多个 case 标签分别应用到两个代码片段中，来完成这一计算。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> PayrollDay &#123;</span><br><span class=\"line\">    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HOURS_PER_SHIFT = <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">double</span> hoursWorked, <span class=\"keyword\">double</span> payRate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> basePay = hoursWorked * payRate;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> overtimePay;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SATURDAY:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SUNDAY:</span><br><span class=\"line\">                overtimePay = hoursWorked * payRate / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                overtimePay = hoursWorked &lt;= HOURS_PER_SHIFT ?</span><br><span class=\"line\">                <span class=\"number\">0</span> : (hoursWorked - HOURS_PER_SHIFT) * payRate / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> basePay + overtimePay;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不可否认，这段代码十分简洁，但是从维护的角度来看，它非常危险。假设将一个元素添加到该枚举中，或许是一个表示假期天数的特殊值，但是忘记给 switch 语句添加相应的 case。程序依然可以编译，但 pay 方法会悄悄的将假期工资计算成与正常工作日的相同。</p>\n<p>为了利用特定于常量的方法实现安全的执行工资计算，你可能必须重复计算每个常量的加班工资，或者将计算移到两个辅助方法中(一个用来计算工作日，一个用来计算双休日)，并从每个常量调用相应的辅助方法。这任何一种方法都会产生相当数量的样板代码，结果降低了可读性，并增加了出错的几率。</p>\n<p>通过用计算工作日加班工资的具体方法代替 PayrollDay 中抽象的 overtimePay 方法，可以减少样板代码。这样，就只有双休日必须覆盖该方法了。但是这样也有着与 switch 语句一样的不足：如果又增加了一天而没有覆盖 overtimePay 方法，就会悄悄的延续工作日的计算。</p>\n<p>你真正想要的就出每当添加一个枚举常量时，就强制选择一种加班报酬策略。幸运的是，有一种很好的办法可以实现这一点。这种想法就是将加班工资计算移到一个私有的嵌套枚举中，将这个策略枚举的实例传到 PayrollDay 枚举的构造器中。之后 PayrollDay 枚举将加班工资计算委托给策略枚举，PayrollDay 中就不需要switch语句或特定与常量的方法实现了。这种模式虽然没有 switch 语句那么简洁，但是更安全，也更加灵活。<br>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> PayrollDay &#123;</span><br><span class=\"line\">    MONDAY(PayType.WEEKDAY), TUESDAY(PayType.WEEKDAY),</span><br><span class=\"line\">    WEDNESDAY(PayType.WEEKDAY), THURSDAY(PayType.WEEKDAY),</span><br><span class=\"line\">    FRIDAY(PayType.WEEKDAY), SATURDAY(PayType.WEEKEND),</span><br><span class=\"line\">    SUNDAY(PayType.WEEKEND);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PayType payType;</span><br><span class=\"line\"></span><br><span class=\"line\">    PayrollDay(PayType payType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.payType = payType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">double</span> hoursWorked, <span class=\"keyword\">double</span> payRate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> basePay = hoursWorked * payRate;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> basePay + payType.overtimePay(hoursWorked, payRate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> PayType &#123;</span><br><span class=\"line\">        WEEKDAY &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">overtimePay</span><span class=\"params\">(<span class=\"keyword\">double</span> hours, <span class=\"keyword\">double</span> payRate)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hours &lt;= HOURS_PER_SHIFT ? </span><br><span class=\"line\">                <span class=\"number\">0</span> : (hours - HOURS_PER_SHIFT) * payRate / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        WEEKEND &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">overtimePay</span><span class=\"params\">(<span class=\"keyword\">double</span> hours, <span class=\"keyword\">double</span> payRate)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hours * payRate / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HOURS_PER_SHIFT = <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">overtimePay</span><span class=\"params\">(<span class=\"keyword\">double</span> hours, <span class=\"keyword\">double</span> payRate)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">double</span> hoursWorked, <span class=\"keyword\">double</span> payRate)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> basePay = hoursWorked * payRate;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> basePay + overtimePay(hoursWorked, payRate);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总而言之， 如果多个枚举常量同时共享相同的行为，则考虑策略枚举</p>\n<p>————摘自《Effective Java》 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>搞 Java 的一定听说过设计模式中的策略模式，具体这个模式的优点我就不细说了，这里讲的并非策略模式而是和策略模式类同却比策略模式简便的东西————策略枚举（strategy enum）</p>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><p>考虑用一个枚举表示薪资包中的工作天数，这个枚举有一个方法，根据给定某工人的基本工资(按小时)以及当天的工作时间，来计算他当天的报酬。在五个工作日中，超过正常八个小时的工作时间都会产生加班工资；在双休日中，所有的工作都产生加班工资。利用 switch 语句，很容易将多个 case 标签分别应用到两个代码片段中，来完成这一计算。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> PayrollDay &#123;</span><br><span class=\"line\">    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HOURS_PER_SHIFT = <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">double</span> hoursWorked, <span class=\"keyword\">double</span> payRate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> basePay = hoursWorked * payRate;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> overtimePay;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SATURDAY:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SUNDAY:</span><br><span class=\"line\">                overtimePay = hoursWorked * payRate / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                overtimePay = hoursWorked &lt;= HOURS_PER_SHIFT ?</span><br><span class=\"line\">                <span class=\"number\">0</span> : (hoursWorked - HOURS_PER_SHIFT) * payRate / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> basePay + overtimePay;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不可否认，这段代码十分简洁，但是从维护的角度来看，它非常危险。假设将一个元素添加到该枚举中，或许是一个表示假期天数的特殊值，但是忘记给 switch 语句添加相应的 case。程序依然可以编译，但 pay 方法会悄悄的将假期工资计算成与正常工作日的相同。</p>\n<p>为了利用特定于常量的方法实现安全的执行工资计算，你可能必须重复计算每个常量的加班工资，或者将计算移到两个辅助方法中(一个用来计算工作日，一个用来计算双休日)，并从每个常量调用相应的辅助方法。这任何一种方法都会产生相当数量的样板代码，结果降低了可读性，并增加了出错的几率。</p>\n<p>通过用计算工作日加班工资的具体方法代替 PayrollDay 中抽象的 overtimePay 方法，可以减少样板代码。这样，就只有双休日必须覆盖该方法了。但是这样也有着与 switch 语句一样的不足：如果又增加了一天而没有覆盖 overtimePay 方法，就会悄悄的延续工作日的计算。</p>\n<p>你真正想要的就出每当添加一个枚举常量时，就强制选择一种加班报酬策略。幸运的是，有一种很好的办法可以实现这一点。这种想法就是将加班工资计算移到一个私有的嵌套枚举中，将这个策略枚举的实例传到 PayrollDay 枚举的构造器中。之后 PayrollDay 枚举将加班工资计算委托给策略枚举，PayrollDay 中就不需要switch语句或特定与常量的方法实现了。这种模式虽然没有 switch 语句那么简洁，但是更安全，也更加灵活。<br>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> PayrollDay &#123;</span><br><span class=\"line\">    MONDAY(PayType.WEEKDAY), TUESDAY(PayType.WEEKDAY),</span><br><span class=\"line\">    WEDNESDAY(PayType.WEEKDAY), THURSDAY(PayType.WEEKDAY),</span><br><span class=\"line\">    FRIDAY(PayType.WEEKDAY), SATURDAY(PayType.WEEKEND),</span><br><span class=\"line\">    SUNDAY(PayType.WEEKEND);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PayType payType;</span><br><span class=\"line\"></span><br><span class=\"line\">    PayrollDay(PayType payType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.payType = payType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">double</span> hoursWorked, <span class=\"keyword\">double</span> payRate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> basePay = hoursWorked * payRate;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> basePay + payType.overtimePay(hoursWorked, payRate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> PayType &#123;</span><br><span class=\"line\">        WEEKDAY &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">overtimePay</span><span class=\"params\">(<span class=\"keyword\">double</span> hours, <span class=\"keyword\">double</span> payRate)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hours &lt;= HOURS_PER_SHIFT ? </span><br><span class=\"line\">                <span class=\"number\">0</span> : (hours - HOURS_PER_SHIFT) * payRate / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        WEEKEND &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">overtimePay</span><span class=\"params\">(<span class=\"keyword\">double</span> hours, <span class=\"keyword\">double</span> payRate)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> hours * payRate / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HOURS_PER_SHIFT = <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">overtimePay</span><span class=\"params\">(<span class=\"keyword\">double</span> hours, <span class=\"keyword\">double</span> payRate)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">double</span> hoursWorked, <span class=\"keyword\">double</span> payRate)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> basePay = hoursWorked * payRate;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> basePay + overtimePay(hoursWorked, payRate);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总而言之， 如果多个枚举常量同时共享相同的行为，则考虑策略枚举</p>\n<p>————摘自《Effective Java》 </p>\n"},{"title":"自己修改的 GustureLock","layout":"post","date":"2015-03-04T13:40:39.000Z","_content":"\n今天分享一个我修改过样式的 GustureLock 的源码，该库的出处我已经找不到了，当时是我朋友给我的一个 zip 包，我拿到源码之后，做了一些样式的调整，具体逻辑没有做处理，风格是模仿的 JDME 软件的风格\n\n### 使用\n\n在需要检查手势锁的地方加入如下代码，考虑到会需要随时修改切换动画，我并没有吧跳转逻辑写死，而是添加了一个回调接口\n\n```java\nLockUtil.checkLock(this,new OnCheckLockCallback() {\n    @Override\n    public void onHasLockCallback() {\n        Intent intent = new Intent(this, LockActivity.class);\n        startActivityForResult(intent, GO_LOCK);\n        overridePendingTransition(R.anim.mi_right_in, R.anim.mi_left_out);\n    }\n\n    @Override\n    public void onUnHasLockCallback() {\n        //do something\n    }\n});\n```\n\n注意：一定要使用 startActivityForResult 方法来启动，该 Activity 会返回不同的 resuldCode 来通知你如何处理；\n\n```java\n@Override\nprotected void onActivityResult(int requestCode, int resuldCode, Intent date) {\n    if (requestCode == GO_LOCK && resuldCode == 404) {\n        //无手势密码进不去而退出\n        finish();\n    } else if (requestCode == GO_LOCK && resuldCode == 200) {\n        //解锁成功\n    } else if (requestCode == GO_LOCK && resuldCode == 401) {\n        //忘记密码重新登录\n    } \n    super.onActivityResult(requestCode, resuldCode, date);\n}\n```\n\n设置手势密码的跳转代码如下\n\n```java\nIntent i = new Intent(this, LockSetupActivity.class);\nstartActivity(i);\n```\n\n### 效果\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150304132203.jpg)\n\n[源码地址](https://github.com/BenjyAir/Sack) \n","source":"_posts/自己修改的GustureLock.md","raw":"---\ntitle: 自己修改的 GustureLock\nlayout: post\ndate: 2015/03/04 21:40:39\ntags : 工作总结\n---\n\n今天分享一个我修改过样式的 GustureLock 的源码，该库的出处我已经找不到了，当时是我朋友给我的一个 zip 包，我拿到源码之后，做了一些样式的调整，具体逻辑没有做处理，风格是模仿的 JDME 软件的风格\n\n### 使用\n\n在需要检查手势锁的地方加入如下代码，考虑到会需要随时修改切换动画，我并没有吧跳转逻辑写死，而是添加了一个回调接口\n\n```java\nLockUtil.checkLock(this,new OnCheckLockCallback() {\n    @Override\n    public void onHasLockCallback() {\n        Intent intent = new Intent(this, LockActivity.class);\n        startActivityForResult(intent, GO_LOCK);\n        overridePendingTransition(R.anim.mi_right_in, R.anim.mi_left_out);\n    }\n\n    @Override\n    public void onUnHasLockCallback() {\n        //do something\n    }\n});\n```\n\n注意：一定要使用 startActivityForResult 方法来启动，该 Activity 会返回不同的 resuldCode 来通知你如何处理；\n\n```java\n@Override\nprotected void onActivityResult(int requestCode, int resuldCode, Intent date) {\n    if (requestCode == GO_LOCK && resuldCode == 404) {\n        //无手势密码进不去而退出\n        finish();\n    } else if (requestCode == GO_LOCK && resuldCode == 200) {\n        //解锁成功\n    } else if (requestCode == GO_LOCK && resuldCode == 401) {\n        //忘记密码重新登录\n    } \n    super.onActivityResult(requestCode, resuldCode, date);\n}\n```\n\n设置手势密码的跳转代码如下\n\n```java\nIntent i = new Intent(this, LockSetupActivity.class);\nstartActivity(i);\n```\n\n### 效果\n\n![tool-editor](http://oneylt1vv.bkt.clouddn.com/20150304132203.jpg)\n\n[源码地址](https://github.com/BenjyAir/Sack) \n","slug":"自己修改的GustureLock","published":1,"updated":"2018-05-05T08:37:39.969Z","comments":1,"photos":[],"link":"","_id":"cjgw8vdzw000yoky0aqeqpd97","content":"<p>今天分享一个我修改过样式的 GustureLock 的源码，该库的出处我已经找不到了，当时是我朋友给我的一个 zip 包，我拿到源码之后，做了一些样式的调整，具体逻辑没有做处理，风格是模仿的 JDME 软件的风格</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在需要检查手势锁的地方加入如下代码，考虑到会需要随时修改切换动画，我并没有吧跳转逻辑写死，而是添加了一个回调接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LockUtil.checkLock(<span class=\"keyword\">this</span>,<span class=\"keyword\">new</span> OnCheckLockCallback() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onHasLockCallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, LockActivity.class);</span><br><span class=\"line\">        startActivityForResult(intent, GO_LOCK);</span><br><span class=\"line\">        overridePendingTransition(R.anim.mi_right_in, R.anim.mi_left_out);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUnHasLockCallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意：一定要使用 startActivityForResult 方法来启动，该 Activity 会返回不同的 resuldCode 来通知你如何处理；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resuldCode, Intent date)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestCode == GO_LOCK &amp;&amp; resuldCode == <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//无手势密码进不去而退出</span></span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requestCode == GO_LOCK &amp;&amp; resuldCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//解锁成功</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requestCode == GO_LOCK &amp;&amp; resuldCode == <span class=\"number\">401</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//忘记密码重新登录</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resuldCode, date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置手势密码的跳转代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent i = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, LockSetupActivity.class);</span><br><span class=\"line\">startActivity(i);</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20150304132203.jpg\" alt=\"tool-editor\"></p>\n<p><a href=\"https://github.com/BenjyAir/Sack\" target=\"_blank\" rel=\"noopener\">源码地址</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天分享一个我修改过样式的 GustureLock 的源码，该库的出处我已经找不到了，当时是我朋友给我的一个 zip 包，我拿到源码之后，做了一些样式的调整，具体逻辑没有做处理，风格是模仿的 JDME 软件的风格</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在需要检查手势锁的地方加入如下代码，考虑到会需要随时修改切换动画，我并没有吧跳转逻辑写死，而是添加了一个回调接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LockUtil.checkLock(<span class=\"keyword\">this</span>,<span class=\"keyword\">new</span> OnCheckLockCallback() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onHasLockCallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, LockActivity.class);</span><br><span class=\"line\">        startActivityForResult(intent, GO_LOCK);</span><br><span class=\"line\">        overridePendingTransition(R.anim.mi_right_in, R.anim.mi_left_out);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUnHasLockCallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意：一定要使用 startActivityForResult 方法来启动，该 Activity 会返回不同的 resuldCode 来通知你如何处理；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resuldCode, Intent date)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestCode == GO_LOCK &amp;&amp; resuldCode == <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//无手势密码进不去而退出</span></span><br><span class=\"line\">        finish();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requestCode == GO_LOCK &amp;&amp; resuldCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//解锁成功</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requestCode == GO_LOCK &amp;&amp; resuldCode == <span class=\"number\">401</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//忘记密码重新登录</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resuldCode, date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置手势密码的跳转代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent i = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, LockSetupActivity.class);</span><br><span class=\"line\">startActivity(i);</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oneylt1vv.bkt.clouddn.com/20150304132203.jpg\" alt=\"tool-editor\"></p>\n<p><a href=\"https://github.com/BenjyAir/Sack\" target=\"_blank\" rel=\"noopener\">源码地址</a> </p>\n"},{"title":"下拉刷新封装","layout":"post","date":"2014-10-21T14:09:19.000Z","_content":"\n忙了两周，楼里 app 终于完成了，25号正式上线，顺便吐槽一下接私活果然好坑，特别是这种工期比较着急的，不过今天款项下来了，拿到 money 之后感觉整个人萌萌哒~~ 废话不多说，今天分享一下自己在工作中对 [Android-PullToRefresh](https://github.com/chrisbanes/Android-PullToRefresh)的封装\n \n## 简介\n目前 Android 上实现下拉刷新的方式主要有两种:\n> * 通过修改 HeaderView 的 Padding 实现，常见作法是使用自定义组件继承 ListView，一个类就可以搞定\n> * 在 istview 底部套一层 ScrollView 或者 LinearLayout，通过移动 ListView 来实现\n\n第一种方法简单但是碰到复杂的 ListView，特别是带有图片的的item就会特别卡，因为主线程刷新界面也需要时间，而改变之后的效果只有刷新之后才能看到，所以给人的感觉是一顿一顿的。第二种方法就不会出现这样的效果，这里推荐的是 Android-PullToRefresh，具体使用大家可以看该项目的 demo，该项目对常见的带滑动的组件都有支持，很强大，而且可以定制。\n\n## 使用\n\n我的封装主要是对消息处理的封装和页码计算的封装，使你只用写自己逻辑而不用管这些细节\n直接看代码， 首先是封装类\n\n```java\npackage com.louli.activity.louli;\n\nimport java.text.SimpleDateFormat;\nimport java.util.List;\nimport android.app.Activity;\nimport android.os.Message;\nimport android.widget.BaseAdapter;\nimport android.widget.ListView;\nimport android.widget.Toast;\n\nimport com.handmark.pulltorefresh.library.PullToRefreshBase;\nimport com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;\nimport com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;\nimport com.handmark.pulltorefresh.library.PullToRefreshListView;\nimport com.louli.community.R;\n\n/**\n * 带下拉刷新的activity 需要继承该类\n * \n * @author KokerWang\n * \n */\npublic abstract class ListViewBaseActivity extends Activity {\n\n    /**\n     * 分页的页码，当前第几页\n     */\n    public int pageCount = 1;\n\n    /**\n     * 当前刷新状态　　-1　下拉　，　1　　上拉 ， 0 默认值\n     */\n    public int status;\n\n    /**\n     * 获取页码   如果界面里有1个以上的 PullToRefreshListView组件需要重重写 pageCount的get set 方法，自己记录页码\n     * \n     * @return\n     */\n    public int getPageCount() {\n        return pageCount;\n    }\n\n    /**\n     * 设置页码  如果界面里有1个以上的 PullToRefreshListView组件需要重重写 pageCount的get set 方法，自己记录页码\n     * \n     * @param pageCount\n     */\n    public void setPageCount(int pageCount) {\n        this.pageCount = pageCount;\n    }\n\n    /**\n     * 返回数据内容的集合\n     * \n     * @return\n     */\n    public abstract List<?> getList();\n\n    /**\n     * 返回ListView\n     * \n     * @return\n     */\n    public abstract PullToRefreshListView getListView();\n\n    /**\n     * 返回适配器\n     * \n     * @return\n     */\n    public abstract BaseAdapter getAdapter();\n\n    /**\n     * 该方法主要完成异步获取数据分别需要处理三种结果 获取成功 msg.what=LOAD_SUCCESS 获取失败\n     * msg.what=LOAD_FAIL 没有数据 msg.what=LOAD_NODATA 获取成功的数据放在msg.obj 里 ，List 类型\n     */\n    public abstract void loadData();\n\n    /**\n     * 初始化带刷新的ListView\n     * \n     * @param id\n     *            组件id\n     * @return\n     */\n    protected PullToRefreshListView initListView(int id) {\n        PullToRefreshListView listView = (PullToRefreshListView) findViewById(id);\n        if (listView == null) {\n            return null;\n        }\n        return initListView(listView);\n    }\n\n    /**\n     * 初始化带刷新的ListView\n     * \n     * @param listView\n     *            帅新组件\n     * @return\n     */\n    protected PullToRefreshListView initListView(PullToRefreshListView listView) {\n        if (listView == null) {\n            return null;\n        }\n        listView.setMode(Mode.BOTH);\n        //以下为自定义提示语 可以不写使用默认的\n        listView.getLoadingLayoutProxy(false， true).setPullLabel(getResources().getString(R.string.push_label));\n        listView.getLoadingLayoutProxy(false， true).setRefreshingLabel(getResources().getString(R.string.refreshing_label));\n        listView.getLoadingLayoutProxy(false， true).setReleaseLabel(getResources().getString(R.string.release_label));\n        listView.getLoadingLayoutProxy(true， false).setPullLabel(getResources().getString(R.string.pull_label));\n        listView.getLoadingLayoutProxy(true， false).setRefreshingLabel(getResources().getString(R.string.refreshing_label));\n        listView.getLoadingLayoutProxy(true， false).setReleaseLabel(getResources().getString(R.string.release_label));\n        \n        listView.setOnRefreshListener(new OnRefreshListener2Impl());\n        return listView;\n    }\n\n    /**\n     * 获取成功的处理， 主要在handler 里面调用\n     * \n     * @param msg\n     */\n    @SuppressWarnings({ \"unchecked\"， \"rawtypes\" })\n    protected void loadSucess(Message msg) {\n        List ls = (List) msg.obj;\n        if (getPageCount() == 1) {\n            getList().clear();\n            getListView().setMode(Mode.BOTH);\n        }\n        if (ls != null) {\n            getList().addAll(ls);\n        }\n        getAdapter().notifyDataSetChanged();\n        getListView().onRefreshComplete();\n    };\n\n    /**\n     * 获取成功但是没有数据的处理， 主要在handler 里面调用\n     * \n     * @param msg\n     */\n    protected void loadZeroDate(Message msg) {\n        if (getPageCount() == 1) {\n            Toast.makeText(this， R.string.zero_date， Toast.LENGTH_SHORT).show();\n\n        } else {\n            Toast.makeText(this， R.string.msg_last， Toast.LENGTH_SHORT).show();\n        }\n        getAdapter().notifyDataSetChanged();\n        getListView().onRefreshComplete();\n        getListView().setMode(Mode.PULL_FROM_START);\n    };\n\n    /**\n     * 获取失败的处理， 主要在handler 里面调用\n     * \n     * @param msg\n     */\n    protected void loadFalt(Message msg) {\n        Toast.makeText(this， R.string.load_error， Toast.LENGTH_SHORT).show();\n        getAdapter().notifyDataSetChanged();\n        getListView().onRefreshComplete();\n    };\n\n    /**\n     * 上拉刷新及加载更多的回调接口实现类\n     * \n     * @author tom\n     * \n     */\n    private class OnRefreshListener2Impl implements OnRefreshListener2<ListView> {\n        SimpleDateFormat sdf = new SimpleDateFormat(getResources().getString(R.string.refresh_for) + \":MM-dd hh:mm\");\n\n        @Override\n        public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {\n            //下拉\n            status = 1;\n            setPageCount(1);\n            loadData();\n            String label = sdf.format(System.currentTimeMillis());\n            refreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);\n        }\n\n        @Override\n        public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {\n            //上拉\n            status = -1;\n            setPageCount(getPageCount() + 1);\n            loadData();\n            String label = sdf.format(System.currentTimeMillis());\n            refreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);\n        }\n    }\n\n}\n\n```\n\n如果你的界面里有一个以上的 PullToRefreshListView 组件，那你需要额外重写 getPageCount 和 setPageCount 来自己控制页码，当然这个时候其他几个重写的方法也需要你加上判断，具体示例我会在文章最后附上\n\n下面看例子代码\n\n```java\npackage com.test;\n\nimport android.os.Message;\n\n\npublic class ChannelExhibitionListActivity extends ListViewBaseActivity {\n\n    // 界面组件\n    PullToRefreshListView _listView;\n    List<ChannelExhibitionListItem> _list;\n    ChannelExhibitionListAdapter _adapter;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.channel_exhibition_list_activity);\n        init();\n    }\n\n    private void init() {\n        // 初始化组件及适配器\n        _listView = initListView(R.id.listView);\n        // 获取内部listview 推荐这样用而不是直接给_listview设置参数\n        ListView actualListView = _listView.getRefreshableView();\n        _adapter = new ChannelExhibitionListAdapter(this);\n        _list = new ArrayList<ChannelExhibitionListItem>();\n        _adapter.setList(_list);\n        actualListView.setOnItemClickListener(new OnItemClickListener() {\n\n            @Override\n            public void onItemClick(AdapterView<?> parent， View view， int position， long id) {\n                // 不要忘了这一行代码　　因为自带了headview 所以postiton加了1 这里要减去\n                position--;\n            }\n        });\n        actualListView.setAdapter(_adapter);\n\n    }\n\n    // 异步任务接受处理\n    Handler _handler = new Handler() {\n        public void handleMessage(android.os.Message msg) {\n            switch (msg.what) {\n            case LOAD_SUCCESS:\n                loadSucess(msg);\n                break;\n            case LOAD_FAIL:\n                loadFalt(msg);\n                break;\n            case LOAD_NODATA:\n                loadZeroDate(msg);\n                break;\n            }\n        }\n    };\n\n    // 获取数据的线程\n    Thread loadThread;\n\n    /**\n     * 更改数据并刷新adapter\n     */\n    @Override\n    public void loadData() {\n        createCountryThread();\n        loadThread.start();\n    }\n\n    /**\n     * 初始化线程\n     */\n    private void createCountryThread() {\n        loadThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                List<ChannelExhibitionListItem> channels = new ArrayList<ChannelExhibitionListItem>();\n                try {\n                    // 把页码拼接到url\n                    StringBuffer loadService = new StringBuffer(); \n                    loadService.append(\"?r=findlist&pagesize=15&pagenow=\" + getPageCount());\n                    \n                    String res = HttpConstants.getPHPRequest(\"url\"， loadService.toString());\n                    if (res == null || res.equals(\"\")) {\n                        throw new Exception(\"resoult=\" + res);\n                    }\n                    JSONObject resultJsonObject = new JSONObject(res);\n                    int code = resultJsonObject.getInt(\"returncode\");\n                    if (code == 0) {\n                        // 业务处理　　大概就是解析出list\n                        JSONArray datas = resultJsonObject.getJSONArray(\"result\");\n                        if (datas.length() == 0) {\n                            Message m = _handler.obtainMessage(LOAD_NODATA);\n                            _handler.sendMessage(m);\n                            return;\n                        }\n                        int size = datas.length();\n                        for (int i = 0; i < size; i++) {\n                            JSONObject obj = (JSONObject) datas.get(i);\n                            ChannelExhibitionListItem item = new ChannelExhibitionListItem();\n                            item.setId(\"\");\n                     \n                            channels.add(item);\n                        }\n                        Message message = _handler.obtainMessage(LOAD_SUCCESS);\n                        message.obj = channels;\n                        _handler.sendMessage(message);\n                        return;\n                    }else if(code == 1){\n                        Message m = _handler.obtainMessage(LOAD_NODATA);\n                        _handler.sendMessage(m);\n                        return;\n                    }\n                    // 获取失败\n                    Message m = _handler.obtainMessage(LOAD_FAIL);\n                    _handler.sendMessage(m);\n                } catch (Exception e) {\n                    Message m = _handler.obtainMessage(LOAD_FAIL);\n                    _handler.sendMessage(m);\n                } finally {\n                    //关闭进度条\n                    //Util.dismissWaitingDialog(pd);\n                }\n            }\n        });\n    }\n\n    @Override\n    public List<?> getList() {\n        return _list;\n    }\n\n    @Override\n    public PullToRefreshListView getListView() {\n        return _listView;\n    }\n\n    @Override\n    public BaseAdapter getAdapter() {\n        return _adapter;\n    }\n}\n\n```\n\n以上代码只是逻辑代码，复制在自己的项目中是不能运行的，参考着就可以写了，因为我们的项目是使用的 httpClient+Handler 回调，所以用这个特别方便， 如果你们项目使用 Volley 那就更简单了，稍微修改一下就能用。\n\n最后是布局  布局只需要把 ListView 替换实现就可以 其他的一下属性和 ListView 通用。\n\n```xml\n  <com.handmark.pulltorefresh.library.PullToRefreshListView\n        android:id=\"@+id/listView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:cacheColorHint=\"#00000000\"\n        android:divider=\"#19000000\"\n        android:dividerHeight=\"1dp\"\n        android:fadingEdge=\"none\"\n        android:fastScrollEnabled=\"false\"\n        android:footerDividersEnabled=\"true\"\n        android:headerDividersEnabled=\"true\"\n        android:smoothScrollbar=\"true\" >\n    </com.handmark.pulltorefresh.library.PullToRefreshListView>\n```\n\n## 附\n\n多个 PullToRefreshListView 组件时的示例代码 ， 其他几个重写的方法也要这样修改\n\n```java\n/**\n *当前第几个PullToRefreshListView的标示\n */\nint num=1;\n/**\n * 页码\n */\nprivate int count_p = 1;\nprivate int count_r = 1;\n\n\n/**\n * 获取页码\n * \n * @return\n */\npublic int getPageCount() {\n    if (num ==1) {\n        return count_p;\n    }else{\n        return count_r;\n    }\n}\n\n/**\n * 设置页码\n * \n * @param pageCount\n */\npublic void setPageCount(int pageCount) {\n    if (num ==1) {\n        this.count_p = pageCount;\n    }else{\n        this.count_r = pageCount;\n    }\n}\n```\n\n写完啦，我要去腐败喽。","source":"_posts/下拉刷新封装.md","raw":"---\ntitle: 下拉刷新封装\nlayout: post\ndate: 2014/10/21 22:09:19\ntags : 工作总结\n---\n\n忙了两周，楼里 app 终于完成了，25号正式上线，顺便吐槽一下接私活果然好坑，特别是这种工期比较着急的，不过今天款项下来了，拿到 money 之后感觉整个人萌萌哒~~ 废话不多说，今天分享一下自己在工作中对 [Android-PullToRefresh](https://github.com/chrisbanes/Android-PullToRefresh)的封装\n \n## 简介\n目前 Android 上实现下拉刷新的方式主要有两种:\n> * 通过修改 HeaderView 的 Padding 实现，常见作法是使用自定义组件继承 ListView，一个类就可以搞定\n> * 在 istview 底部套一层 ScrollView 或者 LinearLayout，通过移动 ListView 来实现\n\n第一种方法简单但是碰到复杂的 ListView，特别是带有图片的的item就会特别卡，因为主线程刷新界面也需要时间，而改变之后的效果只有刷新之后才能看到，所以给人的感觉是一顿一顿的。第二种方法就不会出现这样的效果，这里推荐的是 Android-PullToRefresh，具体使用大家可以看该项目的 demo，该项目对常见的带滑动的组件都有支持，很强大，而且可以定制。\n\n## 使用\n\n我的封装主要是对消息处理的封装和页码计算的封装，使你只用写自己逻辑而不用管这些细节\n直接看代码， 首先是封装类\n\n```java\npackage com.louli.activity.louli;\n\nimport java.text.SimpleDateFormat;\nimport java.util.List;\nimport android.app.Activity;\nimport android.os.Message;\nimport android.widget.BaseAdapter;\nimport android.widget.ListView;\nimport android.widget.Toast;\n\nimport com.handmark.pulltorefresh.library.PullToRefreshBase;\nimport com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;\nimport com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;\nimport com.handmark.pulltorefresh.library.PullToRefreshListView;\nimport com.louli.community.R;\n\n/**\n * 带下拉刷新的activity 需要继承该类\n * \n * @author KokerWang\n * \n */\npublic abstract class ListViewBaseActivity extends Activity {\n\n    /**\n     * 分页的页码，当前第几页\n     */\n    public int pageCount = 1;\n\n    /**\n     * 当前刷新状态　　-1　下拉　，　1　　上拉 ， 0 默认值\n     */\n    public int status;\n\n    /**\n     * 获取页码   如果界面里有1个以上的 PullToRefreshListView组件需要重重写 pageCount的get set 方法，自己记录页码\n     * \n     * @return\n     */\n    public int getPageCount() {\n        return pageCount;\n    }\n\n    /**\n     * 设置页码  如果界面里有1个以上的 PullToRefreshListView组件需要重重写 pageCount的get set 方法，自己记录页码\n     * \n     * @param pageCount\n     */\n    public void setPageCount(int pageCount) {\n        this.pageCount = pageCount;\n    }\n\n    /**\n     * 返回数据内容的集合\n     * \n     * @return\n     */\n    public abstract List<?> getList();\n\n    /**\n     * 返回ListView\n     * \n     * @return\n     */\n    public abstract PullToRefreshListView getListView();\n\n    /**\n     * 返回适配器\n     * \n     * @return\n     */\n    public abstract BaseAdapter getAdapter();\n\n    /**\n     * 该方法主要完成异步获取数据分别需要处理三种结果 获取成功 msg.what=LOAD_SUCCESS 获取失败\n     * msg.what=LOAD_FAIL 没有数据 msg.what=LOAD_NODATA 获取成功的数据放在msg.obj 里 ，List 类型\n     */\n    public abstract void loadData();\n\n    /**\n     * 初始化带刷新的ListView\n     * \n     * @param id\n     *            组件id\n     * @return\n     */\n    protected PullToRefreshListView initListView(int id) {\n        PullToRefreshListView listView = (PullToRefreshListView) findViewById(id);\n        if (listView == null) {\n            return null;\n        }\n        return initListView(listView);\n    }\n\n    /**\n     * 初始化带刷新的ListView\n     * \n     * @param listView\n     *            帅新组件\n     * @return\n     */\n    protected PullToRefreshListView initListView(PullToRefreshListView listView) {\n        if (listView == null) {\n            return null;\n        }\n        listView.setMode(Mode.BOTH);\n        //以下为自定义提示语 可以不写使用默认的\n        listView.getLoadingLayoutProxy(false， true).setPullLabel(getResources().getString(R.string.push_label));\n        listView.getLoadingLayoutProxy(false， true).setRefreshingLabel(getResources().getString(R.string.refreshing_label));\n        listView.getLoadingLayoutProxy(false， true).setReleaseLabel(getResources().getString(R.string.release_label));\n        listView.getLoadingLayoutProxy(true， false).setPullLabel(getResources().getString(R.string.pull_label));\n        listView.getLoadingLayoutProxy(true， false).setRefreshingLabel(getResources().getString(R.string.refreshing_label));\n        listView.getLoadingLayoutProxy(true， false).setReleaseLabel(getResources().getString(R.string.release_label));\n        \n        listView.setOnRefreshListener(new OnRefreshListener2Impl());\n        return listView;\n    }\n\n    /**\n     * 获取成功的处理， 主要在handler 里面调用\n     * \n     * @param msg\n     */\n    @SuppressWarnings({ \"unchecked\"， \"rawtypes\" })\n    protected void loadSucess(Message msg) {\n        List ls = (List) msg.obj;\n        if (getPageCount() == 1) {\n            getList().clear();\n            getListView().setMode(Mode.BOTH);\n        }\n        if (ls != null) {\n            getList().addAll(ls);\n        }\n        getAdapter().notifyDataSetChanged();\n        getListView().onRefreshComplete();\n    };\n\n    /**\n     * 获取成功但是没有数据的处理， 主要在handler 里面调用\n     * \n     * @param msg\n     */\n    protected void loadZeroDate(Message msg) {\n        if (getPageCount() == 1) {\n            Toast.makeText(this， R.string.zero_date， Toast.LENGTH_SHORT).show();\n\n        } else {\n            Toast.makeText(this， R.string.msg_last， Toast.LENGTH_SHORT).show();\n        }\n        getAdapter().notifyDataSetChanged();\n        getListView().onRefreshComplete();\n        getListView().setMode(Mode.PULL_FROM_START);\n    };\n\n    /**\n     * 获取失败的处理， 主要在handler 里面调用\n     * \n     * @param msg\n     */\n    protected void loadFalt(Message msg) {\n        Toast.makeText(this， R.string.load_error， Toast.LENGTH_SHORT).show();\n        getAdapter().notifyDataSetChanged();\n        getListView().onRefreshComplete();\n    };\n\n    /**\n     * 上拉刷新及加载更多的回调接口实现类\n     * \n     * @author tom\n     * \n     */\n    private class OnRefreshListener2Impl implements OnRefreshListener2<ListView> {\n        SimpleDateFormat sdf = new SimpleDateFormat(getResources().getString(R.string.refresh_for) + \":MM-dd hh:mm\");\n\n        @Override\n        public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {\n            //下拉\n            status = 1;\n            setPageCount(1);\n            loadData();\n            String label = sdf.format(System.currentTimeMillis());\n            refreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);\n        }\n\n        @Override\n        public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {\n            //上拉\n            status = -1;\n            setPageCount(getPageCount() + 1);\n            loadData();\n            String label = sdf.format(System.currentTimeMillis());\n            refreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);\n        }\n    }\n\n}\n\n```\n\n如果你的界面里有一个以上的 PullToRefreshListView 组件，那你需要额外重写 getPageCount 和 setPageCount 来自己控制页码，当然这个时候其他几个重写的方法也需要你加上判断，具体示例我会在文章最后附上\n\n下面看例子代码\n\n```java\npackage com.test;\n\nimport android.os.Message;\n\n\npublic class ChannelExhibitionListActivity extends ListViewBaseActivity {\n\n    // 界面组件\n    PullToRefreshListView _listView;\n    List<ChannelExhibitionListItem> _list;\n    ChannelExhibitionListAdapter _adapter;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.channel_exhibition_list_activity);\n        init();\n    }\n\n    private void init() {\n        // 初始化组件及适配器\n        _listView = initListView(R.id.listView);\n        // 获取内部listview 推荐这样用而不是直接给_listview设置参数\n        ListView actualListView = _listView.getRefreshableView();\n        _adapter = new ChannelExhibitionListAdapter(this);\n        _list = new ArrayList<ChannelExhibitionListItem>();\n        _adapter.setList(_list);\n        actualListView.setOnItemClickListener(new OnItemClickListener() {\n\n            @Override\n            public void onItemClick(AdapterView<?> parent， View view， int position， long id) {\n                // 不要忘了这一行代码　　因为自带了headview 所以postiton加了1 这里要减去\n                position--;\n            }\n        });\n        actualListView.setAdapter(_adapter);\n\n    }\n\n    // 异步任务接受处理\n    Handler _handler = new Handler() {\n        public void handleMessage(android.os.Message msg) {\n            switch (msg.what) {\n            case LOAD_SUCCESS:\n                loadSucess(msg);\n                break;\n            case LOAD_FAIL:\n                loadFalt(msg);\n                break;\n            case LOAD_NODATA:\n                loadZeroDate(msg);\n                break;\n            }\n        }\n    };\n\n    // 获取数据的线程\n    Thread loadThread;\n\n    /**\n     * 更改数据并刷新adapter\n     */\n    @Override\n    public void loadData() {\n        createCountryThread();\n        loadThread.start();\n    }\n\n    /**\n     * 初始化线程\n     */\n    private void createCountryThread() {\n        loadThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                List<ChannelExhibitionListItem> channels = new ArrayList<ChannelExhibitionListItem>();\n                try {\n                    // 把页码拼接到url\n                    StringBuffer loadService = new StringBuffer(); \n                    loadService.append(\"?r=findlist&pagesize=15&pagenow=\" + getPageCount());\n                    \n                    String res = HttpConstants.getPHPRequest(\"url\"， loadService.toString());\n                    if (res == null || res.equals(\"\")) {\n                        throw new Exception(\"resoult=\" + res);\n                    }\n                    JSONObject resultJsonObject = new JSONObject(res);\n                    int code = resultJsonObject.getInt(\"returncode\");\n                    if (code == 0) {\n                        // 业务处理　　大概就是解析出list\n                        JSONArray datas = resultJsonObject.getJSONArray(\"result\");\n                        if (datas.length() == 0) {\n                            Message m = _handler.obtainMessage(LOAD_NODATA);\n                            _handler.sendMessage(m);\n                            return;\n                        }\n                        int size = datas.length();\n                        for (int i = 0; i < size; i++) {\n                            JSONObject obj = (JSONObject) datas.get(i);\n                            ChannelExhibitionListItem item = new ChannelExhibitionListItem();\n                            item.setId(\"\");\n                     \n                            channels.add(item);\n                        }\n                        Message message = _handler.obtainMessage(LOAD_SUCCESS);\n                        message.obj = channels;\n                        _handler.sendMessage(message);\n                        return;\n                    }else if(code == 1){\n                        Message m = _handler.obtainMessage(LOAD_NODATA);\n                        _handler.sendMessage(m);\n                        return;\n                    }\n                    // 获取失败\n                    Message m = _handler.obtainMessage(LOAD_FAIL);\n                    _handler.sendMessage(m);\n                } catch (Exception e) {\n                    Message m = _handler.obtainMessage(LOAD_FAIL);\n                    _handler.sendMessage(m);\n                } finally {\n                    //关闭进度条\n                    //Util.dismissWaitingDialog(pd);\n                }\n            }\n        });\n    }\n\n    @Override\n    public List<?> getList() {\n        return _list;\n    }\n\n    @Override\n    public PullToRefreshListView getListView() {\n        return _listView;\n    }\n\n    @Override\n    public BaseAdapter getAdapter() {\n        return _adapter;\n    }\n}\n\n```\n\n以上代码只是逻辑代码，复制在自己的项目中是不能运行的，参考着就可以写了，因为我们的项目是使用的 httpClient+Handler 回调，所以用这个特别方便， 如果你们项目使用 Volley 那就更简单了，稍微修改一下就能用。\n\n最后是布局  布局只需要把 ListView 替换实现就可以 其他的一下属性和 ListView 通用。\n\n```xml\n  <com.handmark.pulltorefresh.library.PullToRefreshListView\n        android:id=\"@+id/listView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:cacheColorHint=\"#00000000\"\n        android:divider=\"#19000000\"\n        android:dividerHeight=\"1dp\"\n        android:fadingEdge=\"none\"\n        android:fastScrollEnabled=\"false\"\n        android:footerDividersEnabled=\"true\"\n        android:headerDividersEnabled=\"true\"\n        android:smoothScrollbar=\"true\" >\n    </com.handmark.pulltorefresh.library.PullToRefreshListView>\n```\n\n## 附\n\n多个 PullToRefreshListView 组件时的示例代码 ， 其他几个重写的方法也要这样修改\n\n```java\n/**\n *当前第几个PullToRefreshListView的标示\n */\nint num=1;\n/**\n * 页码\n */\nprivate int count_p = 1;\nprivate int count_r = 1;\n\n\n/**\n * 获取页码\n * \n * @return\n */\npublic int getPageCount() {\n    if (num ==1) {\n        return count_p;\n    }else{\n        return count_r;\n    }\n}\n\n/**\n * 设置页码\n * \n * @param pageCount\n */\npublic void setPageCount(int pageCount) {\n    if (num ==1) {\n        this.count_p = pageCount;\n    }else{\n        this.count_r = pageCount;\n    }\n}\n```\n\n写完啦，我要去腐败喽。","slug":"下拉刷新封装","published":1,"updated":"2018-05-05T08:35:14.974Z","comments":1,"photos":[],"link":"","_id":"cjgw8ve0n0017oky0c58qywzp","content":"<p>忙了两周，楼里 app 终于完成了，25号正式上线，顺便吐槽一下接私活果然好坑，特别是这种工期比较着急的，不过今天款项下来了，拿到 money 之后感觉整个人萌萌哒~~ 废话不多说，今天分享一下自己在工作中对 <a href=\"https://github.com/chrisbanes/Android-PullToRefresh\" target=\"_blank\" rel=\"noopener\">Android-PullToRefresh</a>的封装</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>目前 Android 上实现下拉刷新的方式主要有两种:</p>\n<blockquote>\n<ul>\n<li>通过修改 HeaderView 的 Padding 实现，常见作法是使用自定义组件继承 ListView，一个类就可以搞定</li>\n<li>在 istview 底部套一层 ScrollView 或者 LinearLayout，通过移动 ListView 来实现</li>\n</ul>\n</blockquote>\n<p>第一种方法简单但是碰到复杂的 ListView，特别是带有图片的的item就会特别卡，因为主线程刷新界面也需要时间，而改变之后的效果只有刷新之后才能看到，所以给人的感觉是一顿一顿的。第二种方法就不会出现这样的效果，这里推荐的是 Android-PullToRefresh，具体使用大家可以看该项目的 demo，该项目对常见的带滑动的组件都有支持，很强大，而且可以定制。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>我的封装主要是对消息处理的封装和页码计算的封装，使你只用写自己逻辑而不用管这些细节<br>直接看代码， 首先是封装类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.louli.activity.louli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.BaseAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.handmark.pulltorefresh.library.PullToRefreshBase;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.handmark.pulltorefresh.library.PullToRefreshListView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.louli.community.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 带下拉刷新的activity 需要继承该类</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> KokerWang</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListViewBaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页的页码，当前第几页</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> pageCount = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前刷新状态　　-1　下拉　，　1　　上拉 ， 0 默认值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取页码   如果界面里有1个以上的 PullToRefreshListView组件需要重重写 pageCount的get set 方法，自己记录页码</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPageCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pageCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置页码  如果界面里有1个以上的 PullToRefreshListView组件需要重重写 pageCount的get set 方法，自己记录页码</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pageCount</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageCount</span><span class=\"params\">(<span class=\"keyword\">int</span> pageCount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pageCount = pageCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回数据内容的集合</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> List&lt;?&gt; getList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回ListView</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> PullToRefreshListView <span class=\"title\">getListView</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回适配器</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> BaseAdapter <span class=\"title\">getAdapter</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 该方法主要完成异步获取数据分别需要处理三种结果 获取成功 msg.what=LOAD_SUCCESS 获取失败</span></span><br><span class=\"line\"><span class=\"comment\">     * msg.what=LOAD_FAIL 没有数据 msg.what=LOAD_NODATA 获取成功的数据放在msg.obj 里 ，List 类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">loadData</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化带刷新的ListView</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     *            组件id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> PullToRefreshListView <span class=\"title\">initListView</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        PullToRefreshListView listView = (PullToRefreshListView) findViewById(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listView == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> initListView(listView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化带刷新的ListView</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> listView</span></span><br><span class=\"line\"><span class=\"comment\">     *            帅新组件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> PullToRefreshListView <span class=\"title\">initListView</span><span class=\"params\">(PullToRefreshListView listView)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listView == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        listView.setMode(Mode.BOTH);</span><br><span class=\"line\">        <span class=\"comment\">//以下为自定义提示语 可以不写使用默认的</span></span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">false</span>， <span class=\"keyword\">true</span>).setPullLabel(getResources().getString(R.string.push_label));</span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">false</span>， <span class=\"keyword\">true</span>).setRefreshingLabel(getResources().getString(R.string.refreshing_label));</span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">false</span>， <span class=\"keyword\">true</span>).setReleaseLabel(getResources().getString(R.string.release_label));</span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">true</span>， <span class=\"keyword\">false</span>).setPullLabel(getResources().getString(R.string.pull_label));</span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">true</span>， <span class=\"keyword\">false</span>).setRefreshingLabel(getResources().getString(R.string.refreshing_label));</span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">true</span>， <span class=\"keyword\">false</span>).setReleaseLabel(getResources().getString(R.string.release_label));</span><br><span class=\"line\">        </span><br><span class=\"line\">        listView.setOnRefreshListener(<span class=\"keyword\">new</span> OnRefreshListener2Impl());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取成功的处理， 主要在handler 里面调用</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"unchecked\"</span>， <span class=\"string\">\"rawtypes\"</span> &#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadSucess</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        List ls = (List) msg.obj;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getPageCount() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            getList().clear();</span><br><span class=\"line\">            getListView().setMode(Mode.BOTH);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ls != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            getList().addAll(ls);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        getAdapter().notifyDataSetChanged();</span><br><span class=\"line\">        getListView().onRefreshComplete();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取成功但是没有数据的处理， 主要在handler 里面调用</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadZeroDate</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getPageCount() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>， R.string.zero_date， Toast.LENGTH_SHORT).show();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>， R.string.msg_last， Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        getAdapter().notifyDataSetChanged();</span><br><span class=\"line\">        getListView().onRefreshComplete();</span><br><span class=\"line\">        getListView().setMode(Mode.PULL_FROM_START);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取失败的处理， 主要在handler 里面调用</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadFalt</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>， R.string.load_error， Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        getAdapter().notifyDataSetChanged();</span><br><span class=\"line\">        getListView().onRefreshComplete();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上拉刷新及加载更多的回调接口实现类</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> tom</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OnRefreshListener2Impl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OnRefreshListener2</span>&lt;<span class=\"title\">ListView</span>&gt; </span>&#123;</span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(getResources().getString(R.string.refresh_for) + <span class=\"string\">\":MM-dd hh:mm\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPullDownToRefresh</span><span class=\"params\">(PullToRefreshBase&lt;ListView&gt; refreshView)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//下拉</span></span><br><span class=\"line\">            status = <span class=\"number\">1</span>;</span><br><span class=\"line\">            setPageCount(<span class=\"number\">1</span>);</span><br><span class=\"line\">            loadData();</span><br><span class=\"line\">            String label = sdf.format(System.currentTimeMillis());</span><br><span class=\"line\">            refreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPullUpToRefresh</span><span class=\"params\">(PullToRefreshBase&lt;ListView&gt; refreshView)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//上拉</span></span><br><span class=\"line\">            status = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            setPageCount(getPageCount() + <span class=\"number\">1</span>);</span><br><span class=\"line\">            loadData();</span><br><span class=\"line\">            String label = sdf.format(System.currentTimeMillis());</span><br><span class=\"line\">            refreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你的界面里有一个以上的 PullToRefreshListView 组件，那你需要额外重写 getPageCount 和 setPageCount 来自己控制页码，当然这个时候其他几个重写的方法也需要你加上判断，具体示例我会在文章最后附上</p>\n<p>下面看例子代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelExhibitionListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListViewBaseActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 界面组件</span></span><br><span class=\"line\">    PullToRefreshListView _listView;</span><br><span class=\"line\">    List&lt;ChannelExhibitionListItem&gt; _list;</span><br><span class=\"line\">    ChannelExhibitionListAdapter _adapter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.channel_exhibition_list_activity);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化组件及适配器</span></span><br><span class=\"line\">        _listView = initListView(R.id.listView);</span><br><span class=\"line\">        <span class=\"comment\">// 获取内部listview 推荐这样用而不是直接给_listview设置参数</span></span><br><span class=\"line\">        ListView actualListView = _listView.getRefreshableView();</span><br><span class=\"line\">        _adapter = <span class=\"keyword\">new</span> ChannelExhibitionListAdapter(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        _list = <span class=\"keyword\">new</span> ArrayList&lt;ChannelExhibitionListItem&gt;();</span><br><span class=\"line\">        _adapter.setList(_list);</span><br><span class=\"line\">        actualListView.setOnItemClickListener(<span class=\"keyword\">new</span> OnItemClickListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; parent， View view， <span class=\"keyword\">int</span> position， <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 不要忘了这一行代码　　因为自带了headview 所以postiton加了1 这里要减去</span></span><br><span class=\"line\">                position--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        actualListView.setAdapter(_adapter);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 异步任务接受处理</span></span><br><span class=\"line\">    Handler _handler = <span class=\"keyword\">new</span> Handler() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(android.os.Message msg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LOAD_SUCCESS:</span><br><span class=\"line\">                loadSucess(msg);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LOAD_FAIL:</span><br><span class=\"line\">                loadFalt(msg);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LOAD_NODATA:</span><br><span class=\"line\">                loadZeroDate(msg);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取数据的线程</span></span><br><span class=\"line\">    Thread loadThread;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更改数据并刷新adapter</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        createCountryThread();</span><br><span class=\"line\">        loadThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化线程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createCountryThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        loadThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                List&lt;ChannelExhibitionListItem&gt; channels = <span class=\"keyword\">new</span> ArrayList&lt;ChannelExhibitionListItem&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 把页码拼接到url</span></span><br><span class=\"line\">                    StringBuffer loadService = <span class=\"keyword\">new</span> StringBuffer(); </span><br><span class=\"line\">                    loadService.append(<span class=\"string\">\"?r=findlist&amp;pagesize=15&amp;pagenow=\"</span> + getPageCount());</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    String res = HttpConstants.getPHPRequest(<span class=\"string\">\"url\"</span>， loadService.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (res == <span class=\"keyword\">null</span> || res.equals(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"resoult=\"</span> + res);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    JSONObject resultJsonObject = <span class=\"keyword\">new</span> JSONObject(res);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> code = resultJsonObject.getInt(<span class=\"string\">\"returncode\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (code == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 业务处理　　大概就是解析出list</span></span><br><span class=\"line\">                        JSONArray datas = resultJsonObject.getJSONArray(<span class=\"string\">\"result\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (datas.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            Message m = _handler.obtainMessage(LOAD_NODATA);</span><br><span class=\"line\">                            _handler.sendMessage(m);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> size = datas.length();</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                            JSONObject obj = (JSONObject) datas.get(i);</span><br><span class=\"line\">                            ChannelExhibitionListItem item = <span class=\"keyword\">new</span> ChannelExhibitionListItem();</span><br><span class=\"line\">                            item.setId(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                     </span><br><span class=\"line\">                            channels.add(item);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        Message message = _handler.obtainMessage(LOAD_SUCCESS);</span><br><span class=\"line\">                        message.obj = channels;</span><br><span class=\"line\">                        _handler.sendMessage(message);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(code == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        Message m = _handler.obtainMessage(LOAD_NODATA);</span><br><span class=\"line\">                        _handler.sendMessage(m);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 获取失败</span></span><br><span class=\"line\">                    Message m = _handler.obtainMessage(LOAD_FAIL);</span><br><span class=\"line\">                    _handler.sendMessage(m);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    Message m = _handler.obtainMessage(LOAD_FAIL);</span><br><span class=\"line\">                    _handler.sendMessage(m);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//关闭进度条</span></span><br><span class=\"line\">                    <span class=\"comment\">//Util.dismissWaitingDialog(pd);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;?&gt; getList() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PullToRefreshListView <span class=\"title\">getListView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _listView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BaseAdapter <span class=\"title\">getAdapter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _adapter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码只是逻辑代码，复制在自己的项目中是不能运行的，参考着就可以写了，因为我们的项目是使用的 httpClient+Handler 回调，所以用这个特别方便， 如果你们项目使用 Volley 那就更简单了，稍微修改一下就能用。</p>\n<p>最后是布局  布局只需要把 ListView 替换实现就可以 其他的一下属性和 ListView 通用。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.handmark.pulltorefresh.library.PullToRefreshListView</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/listView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:cacheColorHint</span>=<span class=\"string\">\"#00000000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:divider</span>=<span class=\"string\">\"#19000000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:dividerHeight</span>=<span class=\"string\">\"1dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:fadingEdge</span>=<span class=\"string\">\"none\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:fastScrollEnabled</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:footerDividersEnabled</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:headerDividersEnabled</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:smoothScrollbar</span>=<span class=\"string\">\"true\"</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">com.handmark.pulltorefresh.library.PullToRefreshListView</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>多个 PullToRefreshListView 组件时的示例代码 ， 其他几个重写的方法也要这样修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *当前第几个PullToRefreshListView的标示</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 页码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count_p = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count_r = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取页码</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPageCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count_p;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count_r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置页码</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageCount</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageCount</span><span class=\"params\">(<span class=\"keyword\">int</span> pageCount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count_p = pageCount;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count_r = pageCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写完啦，我要去腐败喽。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>忙了两周，楼里 app 终于完成了，25号正式上线，顺便吐槽一下接私活果然好坑，特别是这种工期比较着急的，不过今天款项下来了，拿到 money 之后感觉整个人萌萌哒~~ 废话不多说，今天分享一下自己在工作中对 <a href=\"https://github.com/chrisbanes/Android-PullToRefresh\" target=\"_blank\" rel=\"noopener\">Android-PullToRefresh</a>的封装</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>目前 Android 上实现下拉刷新的方式主要有两种:</p>\n<blockquote>\n<ul>\n<li>通过修改 HeaderView 的 Padding 实现，常见作法是使用自定义组件继承 ListView，一个类就可以搞定</li>\n<li>在 istview 底部套一层 ScrollView 或者 LinearLayout，通过移动 ListView 来实现</li>\n</ul>\n</blockquote>\n<p>第一种方法简单但是碰到复杂的 ListView，特别是带有图片的的item就会特别卡，因为主线程刷新界面也需要时间，而改变之后的效果只有刷新之后才能看到，所以给人的感觉是一顿一顿的。第二种方法就不会出现这样的效果，这里推荐的是 Android-PullToRefresh，具体使用大家可以看该项目的 demo，该项目对常见的带滑动的组件都有支持，很强大，而且可以定制。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>我的封装主要是对消息处理的封装和页码计算的封装，使你只用写自己逻辑而不用管这些细节<br>直接看代码， 首先是封装类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.louli.activity.louli;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.BaseAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.handmark.pulltorefresh.library.PullToRefreshBase;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.handmark.pulltorefresh.library.PullToRefreshListView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.louli.community.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 带下拉刷新的activity 需要继承该类</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> KokerWang</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListViewBaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页的页码，当前第几页</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> pageCount = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前刷新状态　　-1　下拉　，　1　　上拉 ， 0 默认值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取页码   如果界面里有1个以上的 PullToRefreshListView组件需要重重写 pageCount的get set 方法，自己记录页码</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPageCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pageCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置页码  如果界面里有1个以上的 PullToRefreshListView组件需要重重写 pageCount的get set 方法，自己记录页码</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pageCount</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageCount</span><span class=\"params\">(<span class=\"keyword\">int</span> pageCount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pageCount = pageCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回数据内容的集合</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> List&lt;?&gt; getList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回ListView</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> PullToRefreshListView <span class=\"title\">getListView</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回适配器</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> BaseAdapter <span class=\"title\">getAdapter</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 该方法主要完成异步获取数据分别需要处理三种结果 获取成功 msg.what=LOAD_SUCCESS 获取失败</span></span><br><span class=\"line\"><span class=\"comment\">     * msg.what=LOAD_FAIL 没有数据 msg.what=LOAD_NODATA 获取成功的数据放在msg.obj 里 ，List 类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">loadData</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化带刷新的ListView</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     *            组件id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> PullToRefreshListView <span class=\"title\">initListView</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        PullToRefreshListView listView = (PullToRefreshListView) findViewById(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listView == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> initListView(listView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化带刷新的ListView</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> listView</span></span><br><span class=\"line\"><span class=\"comment\">     *            帅新组件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> PullToRefreshListView <span class=\"title\">initListView</span><span class=\"params\">(PullToRefreshListView listView)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listView == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        listView.setMode(Mode.BOTH);</span><br><span class=\"line\">        <span class=\"comment\">//以下为自定义提示语 可以不写使用默认的</span></span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">false</span>， <span class=\"keyword\">true</span>).setPullLabel(getResources().getString(R.string.push_label));</span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">false</span>， <span class=\"keyword\">true</span>).setRefreshingLabel(getResources().getString(R.string.refreshing_label));</span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">false</span>， <span class=\"keyword\">true</span>).setReleaseLabel(getResources().getString(R.string.release_label));</span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">true</span>， <span class=\"keyword\">false</span>).setPullLabel(getResources().getString(R.string.pull_label));</span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">true</span>， <span class=\"keyword\">false</span>).setRefreshingLabel(getResources().getString(R.string.refreshing_label));</span><br><span class=\"line\">        listView.getLoadingLayoutProxy(<span class=\"keyword\">true</span>， <span class=\"keyword\">false</span>).setReleaseLabel(getResources().getString(R.string.release_label));</span><br><span class=\"line\">        </span><br><span class=\"line\">        listView.setOnRefreshListener(<span class=\"keyword\">new</span> OnRefreshListener2Impl());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取成功的处理， 主要在handler 里面调用</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"unchecked\"</span>， <span class=\"string\">\"rawtypes\"</span> &#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadSucess</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        List ls = (List) msg.obj;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getPageCount() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            getList().clear();</span><br><span class=\"line\">            getListView().setMode(Mode.BOTH);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ls != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            getList().addAll(ls);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        getAdapter().notifyDataSetChanged();</span><br><span class=\"line\">        getListView().onRefreshComplete();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取成功但是没有数据的处理， 主要在handler 里面调用</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadZeroDate</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getPageCount() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>， R.string.zero_date， Toast.LENGTH_SHORT).show();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>， R.string.msg_last， Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        getAdapter().notifyDataSetChanged();</span><br><span class=\"line\">        getListView().onRefreshComplete();</span><br><span class=\"line\">        getListView().setMode(Mode.PULL_FROM_START);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取失败的处理， 主要在handler 里面调用</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadFalt</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>， R.string.load_error， Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        getAdapter().notifyDataSetChanged();</span><br><span class=\"line\">        getListView().onRefreshComplete();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上拉刷新及加载更多的回调接口实现类</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> tom</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OnRefreshListener2Impl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OnRefreshListener2</span>&lt;<span class=\"title\">ListView</span>&gt; </span>&#123;</span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(getResources().getString(R.string.refresh_for) + <span class=\"string\">\":MM-dd hh:mm\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPullDownToRefresh</span><span class=\"params\">(PullToRefreshBase&lt;ListView&gt; refreshView)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//下拉</span></span><br><span class=\"line\">            status = <span class=\"number\">1</span>;</span><br><span class=\"line\">            setPageCount(<span class=\"number\">1</span>);</span><br><span class=\"line\">            loadData();</span><br><span class=\"line\">            String label = sdf.format(System.currentTimeMillis());</span><br><span class=\"line\">            refreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPullUpToRefresh</span><span class=\"params\">(PullToRefreshBase&lt;ListView&gt; refreshView)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//上拉</span></span><br><span class=\"line\">            status = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            setPageCount(getPageCount() + <span class=\"number\">1</span>);</span><br><span class=\"line\">            loadData();</span><br><span class=\"line\">            String label = sdf.format(System.currentTimeMillis());</span><br><span class=\"line\">            refreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你的界面里有一个以上的 PullToRefreshListView 组件，那你需要额外重写 getPageCount 和 setPageCount 来自己控制页码，当然这个时候其他几个重写的方法也需要你加上判断，具体示例我会在文章最后附上</p>\n<p>下面看例子代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChannelExhibitionListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListViewBaseActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 界面组件</span></span><br><span class=\"line\">    PullToRefreshListView _listView;</span><br><span class=\"line\">    List&lt;ChannelExhibitionListItem&gt; _list;</span><br><span class=\"line\">    ChannelExhibitionListAdapter _adapter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.channel_exhibition_list_activity);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化组件及适配器</span></span><br><span class=\"line\">        _listView = initListView(R.id.listView);</span><br><span class=\"line\">        <span class=\"comment\">// 获取内部listview 推荐这样用而不是直接给_listview设置参数</span></span><br><span class=\"line\">        ListView actualListView = _listView.getRefreshableView();</span><br><span class=\"line\">        _adapter = <span class=\"keyword\">new</span> ChannelExhibitionListAdapter(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        _list = <span class=\"keyword\">new</span> ArrayList&lt;ChannelExhibitionListItem&gt;();</span><br><span class=\"line\">        _adapter.setList(_list);</span><br><span class=\"line\">        actualListView.setOnItemClickListener(<span class=\"keyword\">new</span> OnItemClickListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; parent， View view， <span class=\"keyword\">int</span> position， <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 不要忘了这一行代码　　因为自带了headview 所以postiton加了1 这里要减去</span></span><br><span class=\"line\">                position--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        actualListView.setAdapter(_adapter);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 异步任务接受处理</span></span><br><span class=\"line\">    Handler _handler = <span class=\"keyword\">new</span> Handler() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(android.os.Message msg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LOAD_SUCCESS:</span><br><span class=\"line\">                loadSucess(msg);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LOAD_FAIL:</span><br><span class=\"line\">                loadFalt(msg);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LOAD_NODATA:</span><br><span class=\"line\">                loadZeroDate(msg);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取数据的线程</span></span><br><span class=\"line\">    Thread loadThread;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更改数据并刷新adapter</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        createCountryThread();</span><br><span class=\"line\">        loadThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化线程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createCountryThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        loadThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                List&lt;ChannelExhibitionListItem&gt; channels = <span class=\"keyword\">new</span> ArrayList&lt;ChannelExhibitionListItem&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 把页码拼接到url</span></span><br><span class=\"line\">                    StringBuffer loadService = <span class=\"keyword\">new</span> StringBuffer(); </span><br><span class=\"line\">                    loadService.append(<span class=\"string\">\"?r=findlist&amp;pagesize=15&amp;pagenow=\"</span> + getPageCount());</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    String res = HttpConstants.getPHPRequest(<span class=\"string\">\"url\"</span>， loadService.toString());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (res == <span class=\"keyword\">null</span> || res.equals(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"resoult=\"</span> + res);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    JSONObject resultJsonObject = <span class=\"keyword\">new</span> JSONObject(res);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> code = resultJsonObject.getInt(<span class=\"string\">\"returncode\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (code == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 业务处理　　大概就是解析出list</span></span><br><span class=\"line\">                        JSONArray datas = resultJsonObject.getJSONArray(<span class=\"string\">\"result\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (datas.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            Message m = _handler.obtainMessage(LOAD_NODATA);</span><br><span class=\"line\">                            _handler.sendMessage(m);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> size = datas.length();</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                            JSONObject obj = (JSONObject) datas.get(i);</span><br><span class=\"line\">                            ChannelExhibitionListItem item = <span class=\"keyword\">new</span> ChannelExhibitionListItem();</span><br><span class=\"line\">                            item.setId(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                     </span><br><span class=\"line\">                            channels.add(item);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        Message message = _handler.obtainMessage(LOAD_SUCCESS);</span><br><span class=\"line\">                        message.obj = channels;</span><br><span class=\"line\">                        _handler.sendMessage(message);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(code == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                        Message m = _handler.obtainMessage(LOAD_NODATA);</span><br><span class=\"line\">                        _handler.sendMessage(m);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 获取失败</span></span><br><span class=\"line\">                    Message m = _handler.obtainMessage(LOAD_FAIL);</span><br><span class=\"line\">                    _handler.sendMessage(m);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    Message m = _handler.obtainMessage(LOAD_FAIL);</span><br><span class=\"line\">                    _handler.sendMessage(m);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//关闭进度条</span></span><br><span class=\"line\">                    <span class=\"comment\">//Util.dismissWaitingDialog(pd);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;?&gt; getList() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PullToRefreshListView <span class=\"title\">getListView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _listView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BaseAdapter <span class=\"title\">getAdapter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _adapter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码只是逻辑代码，复制在自己的项目中是不能运行的，参考着就可以写了，因为我们的项目是使用的 httpClient+Handler 回调，所以用这个特别方便， 如果你们项目使用 Volley 那就更简单了，稍微修改一下就能用。</p>\n<p>最后是布局  布局只需要把 ListView 替换实现就可以 其他的一下属性和 ListView 通用。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.handmark.pulltorefresh.library.PullToRefreshListView</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/listView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:cacheColorHint</span>=<span class=\"string\">\"#00000000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:divider</span>=<span class=\"string\">\"#19000000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:dividerHeight</span>=<span class=\"string\">\"1dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:fadingEdge</span>=<span class=\"string\">\"none\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:fastScrollEnabled</span>=<span class=\"string\">\"false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:footerDividersEnabled</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:headerDividersEnabled</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:smoothScrollbar</span>=<span class=\"string\">\"true\"</span> &gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">com.handmark.pulltorefresh.library.PullToRefreshListView</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>多个 PullToRefreshListView 组件时的示例代码 ， 其他几个重写的方法也要这样修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *当前第几个PullToRefreshListView的标示</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 页码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count_p = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count_r = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取页码</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPageCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count_p;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count_r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置页码</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageCount</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageCount</span><span class=\"params\">(<span class=\"keyword\">int</span> pageCount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count_p = pageCount;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count_r = pageCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写完啦，我要去腐败喽。</p>\n"},{"title":"爬坑IOS——第一季","layout":"post","date":"2015-05-04T14:20:19.000Z","_content":"\n辛苦了将近一个多月，公司应用的 IOS 第一个版本终于发布啦。从无到有，一步一个坑的走到了现在。自信心受到了前所未有的打击，不过还好坚持了下来。分享下爬坑的经验。\n\n### 爬坑 —— String 类\nSwift 语法对 String 支持的并不如 Java 全面，有好多方法调用都好麻烦，对于熟悉 Java 开发的我来说哪怕做个简单的字符串截取甚至都要查API，不过 Swift 有个特别的地方就是可以对类进行扩展（不是继承），下面是我对 Java String 类的常用方法的封装，用 Swift 来实现了几个 Java String 类的几个常用 API。\n\n```swift\n\n/**\n*  @author KokerWang, 15-04-22 14:04:35\n*\n*  拓展String\n*/\nextension String {\n    \n    /// 返回长度\n    var length: Int {\n        return count(self)\n    }\n    \n    func trim() -> String {\n        return self.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\n    }\n    \n    func split(regularExpression : String) -> [String] {\n        return self.componentsSeparatedByString(regularExpression)\n    }\n    \n    func substring(start : Int, end : Int) -> String {\n        var si = getRange(start)!\n        var ei = getRange(end)!\n        return self.substringWithRange(Range<String.Index>(start: si, end: ei))\n    }\n    \n    func replace(oldChary : String, newChart : String) -> String {\n        return self.stringByReplacingOccurrencesOfString(oldChary, withString: newChart, options: nil, range: nil)\n    }\n    \n    func getRange(index : Int) -> String.Index?{\n        if(index > length){\n            return nil\n        }else{\n            return advance(self.startIndex, index)\n        }\n    }\n\n```\n\n### 爬坑 —— 3DES，BASE64，SHA1 算法\n出于安全性的考虑，用到的加密算法较多，组合模式也比较特殊，因为直接调用的和 Android 一样的接口，所以也就是说 IOS 端的加密方式要和 Android 端一致，但是我并没有找到 Swift 合适的类库来使用，后来只能使用了 OC 的算法来用。遇到的问题还是挺多的，这里我只说几个典型的问题。\n> 1 、BASE64 加密每 76 个字符增加一个换行符\n\n> 2 、BASE64 加密如果被加密字符串正好是 76 的整数倍最后一个不加换行符\n\n> 3 、3DES 加密使用一种加密方式而不是使用三种加密\n\n第一，二个问题因为我并没有找到如何切换 BASE64 加密选项的参数（ Java 内是有这个 Option 的）。所以最后我的解决方法是手动用 Swift 来实现了这个功能。\n\n第三个问题我查 OC 的源码发现可以修改了 CCCrypt() 方法第三个参数的值来修改加密方式，源码里只有 2 个枚举，我先是直接传 nil 发现不行后来改传 0x0003 得以解决。代码如下\n\n```swift\n\nenum {\n    /* options for block ciphers */\n    kCCOptionPKCS7Padding   = 0x0001,\n    kCCOptionECBMode        = 0x0002\n    /* stream ciphers currently have no options */\n};\n\n```\n\n```swift\n\nvar ccStatus = CCCrypt(encryptOrDecrypt,\n                       kCCAlgorithm3DES,\n                       0x0003,\n                       vkey,\n                       kCCKeySize3DES,\n                       nil,\n                       vplainText,\n                       plainTextBufferSize,\n                       (void *)bufferPtr,\n                       bufferPtrSize,\n                       &movedBytes);\n\n```\n\n以上代码并非完整代码，只是我拿出来的具体修改部分，有需要的可以在网上找对应的算法下载下来对比即可。\n\n其他几个算法修改的幅度不大，出于安全考虑我也不多说了\n\n### 爬坑——UI\n1、上篇文章里我介绍了如何从 Storyboard 中加载出来一个 ViewController，但是如果要在 Storyboard 中给这些 VeiwController 添加上苹果推荐的 Navigation Controller 并顺利拿出来展示可就难办了，开始的时候我使用代码的方式来加上导航栏，这个没有难度。可是既然已经使用了 Storyboard 还是用代码编写实在说不过去，后来我想了个点子，那就是在 ViewController 的 Navigation Controller 上加一个 id 在通过上篇文章介绍的方式拿出来，如果需要设置 delegate 的话在从该 Controller 内拿出 childViewControllers[0] 来设置。 这样就既有导航栏，又没有写代码，可谓一举两得，具体代码看第三条。\n\n2、网络请求处理\n因为多数界面都有网络请求，对于多种请求结果的回调，还是需要合理的构思一下代码逻辑，我的做法和 Android 的处理类似，在所有的 ViewController 加一个基类，通过这个类来处理所有通用回调的处理在发送 HTTP 请求的时候把 self 作为 delegate 传过去。我在项目里并没用第三方网络请求类库，因为我感觉原生的已经足够满足我的需求了。看代码：\n\n```swift\nimport UIKit\n\nprotocol NetCell{\n    func noNet()\n    func noCoonection()\n    func noCell(str : String)\n}\n\nclass BaseViewController: UIViewController, NetCell{\n    \n    func noNet(){\n        self.presentViewController(buildAlert(\"网络不通，请检查后再试！\"), animated: true, completion: nil)\n    }\n    \n    func noCoonection(){\n        self.presentViewController(buildAlert(\"网络异常，请稍后再试！\"), animated: true, completion: nil)\n    }\n    \n    func noCell(str : String){\n        self.presentViewController(buildAlert(str), animated: true, completion: nil)\n    }\n    \n}\n\n```\n\n代码中 buildAlert 方法是我写的一个工具类，效果是弹出一个提示框。具体我回在后面拿出来。\n下面是 HTTP 请求的工具类\n\n```swift\nimport UIKit\nclass NetUtil: NSObject{\n\n}\n\nfunc sendPost (url : String , data : String, delegate : NetCell, cell : (result: NSDictionary) -> Void) {\n    if checkNetWork() {\n        delegate.noNet()\n        return\n    }\n    var url = NSURL(string: url)\n    var request = NSMutableURLRequest(URL: url!, cachePolicy: NSURLRequestCachePolicy.ReloadIgnoringLocalAndRemoteCacheData, timeoutInterval: 10)\n    request.HTTPMethod = \"POST\"\n    request.addValue(\"application/json; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")\n    request.HTTPBody = data.dataUsingEncoding(NSUTF8StringEncoding)\n    NSURLConnection.sendAsynchronousRequest(request, queue: NSOperationQueue.mainQueue(), completionHandler: {\n        (response:NSURLResponse!, data : NSData!,error : NSError!) -> Void in\n        if data != nil && data.length > 0 {\n            var jsonResult:NSDictionary = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers, error: nil) as! NSDictionary\n            var code = jsonResult[\"code\"] as! String\n            if code.hasPrefix(\"1\") {\n                cell(result: jsonResult)\n            }else{\n              delegate.noCell(jsonResult[\"msg\"] as! String)\n            }\n\n        }else{\n            delegate.noCoonection()\n        }\n    })\n}\n\n```\n\n有一小部分的逻辑代码可以忽略，这里只是为了说明调用的过程。\n\n3、未登录自动跳转实现\n这样的逻辑在常见 APP 中应用的很广泛，我的做法是重写了 UIViewController 的 viewWillAppear 方法\n\n```swift\n\n    override func viewWillAppear(animated: Bool) {\n        login()\n    }\n    \n    /**\n    检查登陆\n    */\n    func login(){\n        \n        if /* 你的逻辑 */ {\n            var controller = getController(\"reg_nav\") as! UINavigationController\n            var reg = controller.childViewControllers[0] as! RegisterController\n            reg.delegate = self\n            self.presentViewController(controller, animated: true,completion: nil)\n        }\n    }\n    \n```\n\n4、工具类\n在开发过程中还是抽象出来了好多的工具类，如下\n\n```swift\nimport UIKit\n\n/**\n获取缓存数据\n\n:param: key key\n\n:returns: value\n*/\nfunc getData (key : String) -> String {\n    var ud = NSUserDefaults.standardUserDefaults()\n    if let value: AnyObject = ud.objectForKey(key) {\n        return value as! String\n    }else {\n        return \"\"\n    }\n}\n\n/**\n保存缓存数据\n\n:param: key   key\n:param: value value\n*/\nfunc setDate(key : String, value : String){\n    var ud = NSUserDefaults.standardUserDefaults()\n    ud.setObject(value, forKey: key)\n}\n\n/**\n获取Storyboard内的UI组件\n\n:param: name 组件Storyboard ID\n\n:returns: UIViewController\n*/\nfunc getController(name : String) -> UIViewController{\n    var story =  UIStoryboard(name: \"Main\", bundle: nil)\n    return story.instantiateViewControllerWithIdentifier(name) as! UIViewController\n}\n\n/**\nLog 日志\n\n:param: obj 日志输出对象\n*/\nfunc myLog (obj : AnyObject) {\n    println(\"****************************************************************************\")\n    println(\"****\")\n    println(\"****log:  \\(obj)\")\n    println(\"****\")\n    println(\"****************************************************************************\")\n}\n\n/**\n返回UIAlertController 对象 通过 self.presentViewController(buildAlert(msg as String), animated: true, completion: nil) 展示\n\n:param: msg 提示信息\n\n:returns:\n*/\nfunc buildAlert (msg : String) -> UIAlertController {\n    let alert = UIAlertController(title: \"提示\", message: msg, preferredStyle: UIAlertControllerStyle.Alert)\n    alert.addAction(UIAlertAction(title: \"确定\", style: UIAlertActionStyle.Default, handler: nil))\n    return alert\n}\n\n/**\n获取随机数\n\n:param: length 随机数的长度\n\n:returns: 指定长度的随机数\n*/\nfunc getVerificationCode(length : Int) -> String{\n    if(length < 1 ){\n        return \"\"\n    }\n    var str = \"\"\n    for index in 1...length{\n        str += (\"\\(arc4random_uniform(10))\")\n    }\n    return str\n}\n\nprivate var hindenExtCellView : UIView?\n\n/**\n隐藏多余的table line\n\n:param: tableview UITableView\n*/\nfunc hindenExtCellLine (tableview : UITableView){\n    if hindenExtCellView == nil {\n        hindenExtCellView = UIView()\n        hindenExtCellView!.backgroundColor = UIColor.clearColor()\n    }\n    tableview.tableFooterView = hindenExtCellView\n}\n\n```\n\n好啦，将近 2 个月的积累就说到这里啦，爬坑系类第一季到此结束。","source":"_posts/爬坑IOS——第一季.md","raw":"---\ntitle: 爬坑IOS——第一季\nlayout: post\ndate: 2015/05/04 22:20:19\ntags : Swift\n---\n\n辛苦了将近一个多月，公司应用的 IOS 第一个版本终于发布啦。从无到有，一步一个坑的走到了现在。自信心受到了前所未有的打击，不过还好坚持了下来。分享下爬坑的经验。\n\n### 爬坑 —— String 类\nSwift 语法对 String 支持的并不如 Java 全面，有好多方法调用都好麻烦，对于熟悉 Java 开发的我来说哪怕做个简单的字符串截取甚至都要查API，不过 Swift 有个特别的地方就是可以对类进行扩展（不是继承），下面是我对 Java String 类的常用方法的封装，用 Swift 来实现了几个 Java String 类的几个常用 API。\n\n```swift\n\n/**\n*  @author KokerWang, 15-04-22 14:04:35\n*\n*  拓展String\n*/\nextension String {\n    \n    /// 返回长度\n    var length: Int {\n        return count(self)\n    }\n    \n    func trim() -> String {\n        return self.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceCharacterSet())\n    }\n    \n    func split(regularExpression : String) -> [String] {\n        return self.componentsSeparatedByString(regularExpression)\n    }\n    \n    func substring(start : Int, end : Int) -> String {\n        var si = getRange(start)!\n        var ei = getRange(end)!\n        return self.substringWithRange(Range<String.Index>(start: si, end: ei))\n    }\n    \n    func replace(oldChary : String, newChart : String) -> String {\n        return self.stringByReplacingOccurrencesOfString(oldChary, withString: newChart, options: nil, range: nil)\n    }\n    \n    func getRange(index : Int) -> String.Index?{\n        if(index > length){\n            return nil\n        }else{\n            return advance(self.startIndex, index)\n        }\n    }\n\n```\n\n### 爬坑 —— 3DES，BASE64，SHA1 算法\n出于安全性的考虑，用到的加密算法较多，组合模式也比较特殊，因为直接调用的和 Android 一样的接口，所以也就是说 IOS 端的加密方式要和 Android 端一致，但是我并没有找到 Swift 合适的类库来使用，后来只能使用了 OC 的算法来用。遇到的问题还是挺多的，这里我只说几个典型的问题。\n> 1 、BASE64 加密每 76 个字符增加一个换行符\n\n> 2 、BASE64 加密如果被加密字符串正好是 76 的整数倍最后一个不加换行符\n\n> 3 、3DES 加密使用一种加密方式而不是使用三种加密\n\n第一，二个问题因为我并没有找到如何切换 BASE64 加密选项的参数（ Java 内是有这个 Option 的）。所以最后我的解决方法是手动用 Swift 来实现了这个功能。\n\n第三个问题我查 OC 的源码发现可以修改了 CCCrypt() 方法第三个参数的值来修改加密方式，源码里只有 2 个枚举，我先是直接传 nil 发现不行后来改传 0x0003 得以解决。代码如下\n\n```swift\n\nenum {\n    /* options for block ciphers */\n    kCCOptionPKCS7Padding   = 0x0001,\n    kCCOptionECBMode        = 0x0002\n    /* stream ciphers currently have no options */\n};\n\n```\n\n```swift\n\nvar ccStatus = CCCrypt(encryptOrDecrypt,\n                       kCCAlgorithm3DES,\n                       0x0003,\n                       vkey,\n                       kCCKeySize3DES,\n                       nil,\n                       vplainText,\n                       plainTextBufferSize,\n                       (void *)bufferPtr,\n                       bufferPtrSize,\n                       &movedBytes);\n\n```\n\n以上代码并非完整代码，只是我拿出来的具体修改部分，有需要的可以在网上找对应的算法下载下来对比即可。\n\n其他几个算法修改的幅度不大，出于安全考虑我也不多说了\n\n### 爬坑——UI\n1、上篇文章里我介绍了如何从 Storyboard 中加载出来一个 ViewController，但是如果要在 Storyboard 中给这些 VeiwController 添加上苹果推荐的 Navigation Controller 并顺利拿出来展示可就难办了，开始的时候我使用代码的方式来加上导航栏，这个没有难度。可是既然已经使用了 Storyboard 还是用代码编写实在说不过去，后来我想了个点子，那就是在 ViewController 的 Navigation Controller 上加一个 id 在通过上篇文章介绍的方式拿出来，如果需要设置 delegate 的话在从该 Controller 内拿出 childViewControllers[0] 来设置。 这样就既有导航栏，又没有写代码，可谓一举两得，具体代码看第三条。\n\n2、网络请求处理\n因为多数界面都有网络请求，对于多种请求结果的回调，还是需要合理的构思一下代码逻辑，我的做法和 Android 的处理类似，在所有的 ViewController 加一个基类，通过这个类来处理所有通用回调的处理在发送 HTTP 请求的时候把 self 作为 delegate 传过去。我在项目里并没用第三方网络请求类库，因为我感觉原生的已经足够满足我的需求了。看代码：\n\n```swift\nimport UIKit\n\nprotocol NetCell{\n    func noNet()\n    func noCoonection()\n    func noCell(str : String)\n}\n\nclass BaseViewController: UIViewController, NetCell{\n    \n    func noNet(){\n        self.presentViewController(buildAlert(\"网络不通，请检查后再试！\"), animated: true, completion: nil)\n    }\n    \n    func noCoonection(){\n        self.presentViewController(buildAlert(\"网络异常，请稍后再试！\"), animated: true, completion: nil)\n    }\n    \n    func noCell(str : String){\n        self.presentViewController(buildAlert(str), animated: true, completion: nil)\n    }\n    \n}\n\n```\n\n代码中 buildAlert 方法是我写的一个工具类，效果是弹出一个提示框。具体我回在后面拿出来。\n下面是 HTTP 请求的工具类\n\n```swift\nimport UIKit\nclass NetUtil: NSObject{\n\n}\n\nfunc sendPost (url : String , data : String, delegate : NetCell, cell : (result: NSDictionary) -> Void) {\n    if checkNetWork() {\n        delegate.noNet()\n        return\n    }\n    var url = NSURL(string: url)\n    var request = NSMutableURLRequest(URL: url!, cachePolicy: NSURLRequestCachePolicy.ReloadIgnoringLocalAndRemoteCacheData, timeoutInterval: 10)\n    request.HTTPMethod = \"POST\"\n    request.addValue(\"application/json; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")\n    request.HTTPBody = data.dataUsingEncoding(NSUTF8StringEncoding)\n    NSURLConnection.sendAsynchronousRequest(request, queue: NSOperationQueue.mainQueue(), completionHandler: {\n        (response:NSURLResponse!, data : NSData!,error : NSError!) -> Void in\n        if data != nil && data.length > 0 {\n            var jsonResult:NSDictionary = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers, error: nil) as! NSDictionary\n            var code = jsonResult[\"code\"] as! String\n            if code.hasPrefix(\"1\") {\n                cell(result: jsonResult)\n            }else{\n              delegate.noCell(jsonResult[\"msg\"] as! String)\n            }\n\n        }else{\n            delegate.noCoonection()\n        }\n    })\n}\n\n```\n\n有一小部分的逻辑代码可以忽略，这里只是为了说明调用的过程。\n\n3、未登录自动跳转实现\n这样的逻辑在常见 APP 中应用的很广泛，我的做法是重写了 UIViewController 的 viewWillAppear 方法\n\n```swift\n\n    override func viewWillAppear(animated: Bool) {\n        login()\n    }\n    \n    /**\n    检查登陆\n    */\n    func login(){\n        \n        if /* 你的逻辑 */ {\n            var controller = getController(\"reg_nav\") as! UINavigationController\n            var reg = controller.childViewControllers[0] as! RegisterController\n            reg.delegate = self\n            self.presentViewController(controller, animated: true,completion: nil)\n        }\n    }\n    \n```\n\n4、工具类\n在开发过程中还是抽象出来了好多的工具类，如下\n\n```swift\nimport UIKit\n\n/**\n获取缓存数据\n\n:param: key key\n\n:returns: value\n*/\nfunc getData (key : String) -> String {\n    var ud = NSUserDefaults.standardUserDefaults()\n    if let value: AnyObject = ud.objectForKey(key) {\n        return value as! String\n    }else {\n        return \"\"\n    }\n}\n\n/**\n保存缓存数据\n\n:param: key   key\n:param: value value\n*/\nfunc setDate(key : String, value : String){\n    var ud = NSUserDefaults.standardUserDefaults()\n    ud.setObject(value, forKey: key)\n}\n\n/**\n获取Storyboard内的UI组件\n\n:param: name 组件Storyboard ID\n\n:returns: UIViewController\n*/\nfunc getController(name : String) -> UIViewController{\n    var story =  UIStoryboard(name: \"Main\", bundle: nil)\n    return story.instantiateViewControllerWithIdentifier(name) as! UIViewController\n}\n\n/**\nLog 日志\n\n:param: obj 日志输出对象\n*/\nfunc myLog (obj : AnyObject) {\n    println(\"****************************************************************************\")\n    println(\"****\")\n    println(\"****log:  \\(obj)\")\n    println(\"****\")\n    println(\"****************************************************************************\")\n}\n\n/**\n返回UIAlertController 对象 通过 self.presentViewController(buildAlert(msg as String), animated: true, completion: nil) 展示\n\n:param: msg 提示信息\n\n:returns:\n*/\nfunc buildAlert (msg : String) -> UIAlertController {\n    let alert = UIAlertController(title: \"提示\", message: msg, preferredStyle: UIAlertControllerStyle.Alert)\n    alert.addAction(UIAlertAction(title: \"确定\", style: UIAlertActionStyle.Default, handler: nil))\n    return alert\n}\n\n/**\n获取随机数\n\n:param: length 随机数的长度\n\n:returns: 指定长度的随机数\n*/\nfunc getVerificationCode(length : Int) -> String{\n    if(length < 1 ){\n        return \"\"\n    }\n    var str = \"\"\n    for index in 1...length{\n        str += (\"\\(arc4random_uniform(10))\")\n    }\n    return str\n}\n\nprivate var hindenExtCellView : UIView?\n\n/**\n隐藏多余的table line\n\n:param: tableview UITableView\n*/\nfunc hindenExtCellLine (tableview : UITableView){\n    if hindenExtCellView == nil {\n        hindenExtCellView = UIView()\n        hindenExtCellView!.backgroundColor = UIColor.clearColor()\n    }\n    tableview.tableFooterView = hindenExtCellView\n}\n\n```\n\n好啦，将近 2 个月的积累就说到这里啦，爬坑系类第一季到此结束。","slug":"爬坑IOS——第一季","published":1,"updated":"2018-05-05T08:43:24.449Z","comments":1,"photos":[],"link":"","_id":"cjgw8ve0o0019oky0si1avd89","content":"<p>辛苦了将近一个多月，公司应用的 IOS 第一个版本终于发布啦。从无到有，一步一个坑的走到了现在。自信心受到了前所未有的打击，不过还好坚持了下来。分享下爬坑的经验。</p>\n<h3 id=\"爬坑-——-String-类\"><a href=\"#爬坑-——-String-类\" class=\"headerlink\" title=\"爬坑 —— String 类\"></a>爬坑 —— String 类</h3><p>Swift 语法对 String 支持的并不如 Java 全面，有好多方法调用都好麻烦，对于熟悉 Java 开发的我来说哪怕做个简单的字符串截取甚至都要查API，不过 Swift 有个特别的地方就是可以对类进行扩展（不是继承），下面是我对 Java String 类的常用方法的封装，用 Swift 来实现了几个 Java String 类的几个常用 API。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  @author KokerWang, 15-04-22 14:04:35</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*  拓展String</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">String</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 返回长度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> length: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trim</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.stringByTrimmingCharactersInSet(<span class=\"type\">NSCharacterSet</span>.whitespaceCharacterSet())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">split</span><span class=\"params\">(regularExpression : String)</span></span> -&gt; [<span class=\"type\">String</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.componentsSeparatedByString(regularExpression)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">substring</span><span class=\"params\">(start : Int, end : Int)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> si = getRange(start)!</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ei = getRange(end)!</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.substringWithRange(<span class=\"type\">Range</span>&lt;<span class=\"type\">String</span>.<span class=\"type\">Index</span>&gt;(start: si, end: ei))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">replace</span><span class=\"params\">(oldChary : String, newChart : String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.stringByReplacingOccurrencesOfString(oldChary, withString: newChart, options: <span class=\"literal\">nil</span>, range: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getRange</span><span class=\"params\">(index : Int)</span></span> -&gt; <span class=\"type\">String</span>.<span class=\"type\">Index</span>?&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt; length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">advance</span>(<span class=\"keyword\">self</span>.startIndex, index)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"爬坑-——-3DES，BASE64，SHA1-算法\"><a href=\"#爬坑-——-3DES，BASE64，SHA1-算法\" class=\"headerlink\" title=\"爬坑 —— 3DES，BASE64，SHA1 算法\"></a>爬坑 —— 3DES，BASE64，SHA1 算法</h3><p>出于安全性的考虑，用到的加密算法较多，组合模式也比较特殊，因为直接调用的和 Android 一样的接口，所以也就是说 IOS 端的加密方式要和 Android 端一致，但是我并没有找到 Swift 合适的类库来使用，后来只能使用了 OC 的算法来用。遇到的问题还是挺多的，这里我只说几个典型的问题。</p>\n<blockquote>\n<p>1 、BASE64 加密每 76 个字符增加一个换行符</p>\n</blockquote>\n<blockquote>\n<p>2 、BASE64 加密如果被加密字符串正好是 76 的整数倍最后一个不加换行符</p>\n</blockquote>\n<blockquote>\n<p>3 、3DES 加密使用一种加密方式而不是使用三种加密</p>\n</blockquote>\n<p>第一，二个问题因为我并没有找到如何切换 BASE64 加密选项的参数（ Java 内是有这个 Option 的）。所以最后我的解决方法是手动用 Swift 来实现了这个功能。</p>\n<p>第三个问题我查 OC 的源码发现可以修改了 CCCrypt() 方法第三个参数的值来修改加密方式，源码里只有 2 个枚举，我先是直接传 nil 发现不行后来改传 0x0003 得以解决。代码如下</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* options for block ciphers */</span></span><br><span class=\"line\">    kCCOptionPKCS7Padding   = <span class=\"number\">0x0001</span>,</span><br><span class=\"line\">    kCCOptionECBMode        = <span class=\"number\">0x0002</span></span><br><span class=\"line\">    <span class=\"comment\">/* stream ciphers currently have no options */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ccStatus = <span class=\"type\">CCCrypt</span>(encryptOrDecrypt,</span><br><span class=\"line\">                       kCCAlgorithm3DES,</span><br><span class=\"line\">                       <span class=\"number\">0x0003</span>,</span><br><span class=\"line\">                       vkey,</span><br><span class=\"line\">                       kCCKeySize3DES,</span><br><span class=\"line\">                       <span class=\"literal\">nil</span>,</span><br><span class=\"line\">                       vplainText,</span><br><span class=\"line\">                       plainTextBufferSize,</span><br><span class=\"line\">                       (void *)bufferPtr,</span><br><span class=\"line\">                       bufferPtrSize,</span><br><span class=\"line\">                       &amp;movedBytes);</span><br></pre></td></tr></table></figure>\n<p>以上代码并非完整代码，只是我拿出来的具体修改部分，有需要的可以在网上找对应的算法下载下来对比即可。</p>\n<p>其他几个算法修改的幅度不大，出于安全考虑我也不多说了</p>\n<h3 id=\"爬坑——UI\"><a href=\"#爬坑——UI\" class=\"headerlink\" title=\"爬坑——UI\"></a>爬坑——UI</h3><p>1、上篇文章里我介绍了如何从 Storyboard 中加载出来一个 ViewController，但是如果要在 Storyboard 中给这些 VeiwController 添加上苹果推荐的 Navigation Controller 并顺利拿出来展示可就难办了，开始的时候我使用代码的方式来加上导航栏，这个没有难度。可是既然已经使用了 Storyboard 还是用代码编写实在说不过去，后来我想了个点子，那就是在 ViewController 的 Navigation Controller 上加一个 id 在通过上篇文章介绍的方式拿出来，如果需要设置 delegate 的话在从该 Controller 内拿出 childViewControllers[0] 来设置。 这样就既有导航栏，又没有写代码，可谓一举两得，具体代码看第三条。</p>\n<p>2、网络请求处理<br>因为多数界面都有网络请求，对于多种请求结果的回调，还是需要合理的构思一下代码逻辑，我的做法和 Android 的处理类似，在所有的 ViewController 加一个基类，通过这个类来处理所有通用回调的处理在发送 HTTP 请求的时候把 self 作为 delegate 传过去。我在项目里并没用第三方网络请求类库，因为我感觉原生的已经足够满足我的需求了。看代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">NetCell</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noNet</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noCoonection</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noCell</span><span class=\"params\">(str : String)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseViewController</span>: <span class=\"title\">UIViewController</span>, <span class=\"title\">NetCell</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noNet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.presentViewController(buildAlert(<span class=\"string\">\"网络不通，请检查后再试！\"</span>), animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noCoonection</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.presentViewController(buildAlert(<span class=\"string\">\"网络异常，请稍后再试！\"</span>), animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noCell</span><span class=\"params\">(str : String)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.presentViewController(buildAlert(str), animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码中 buildAlert 方法是我写的一个工具类，效果是弹出一个提示框。具体我回在后面拿出来。<br>下面是 HTTP 请求的工具类</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetUtil</span>: <span class=\"title\">NSObject</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sendPost</span> <span class=\"params\">(url : String , data : String, delegate : NetCell, cell : <span class=\"params\">(result: NSDictionary)</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> checkNetWork() &#123;</span><br><span class=\"line\">        delegate.noNet()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"type\">NSURL</span>(string: url)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> request = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>: url!, cachePolicy: <span class=\"type\">NSURLRequestCachePolicy</span>.<span class=\"type\">ReloadIgnoringLocalAndRemoteCacheData</span>, timeoutInterval: <span class=\"number\">10</span>)</span><br><span class=\"line\">    request.<span class=\"type\">HTTPMethod</span> = <span class=\"string\">\"POST\"</span></span><br><span class=\"line\">    request.addValue(<span class=\"string\">\"application/json; charset=utf-8\"</span>, forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span>)</span><br><span class=\"line\">    request.<span class=\"type\">HTTPBody</span> = data.dataUsingEncoding(<span class=\"type\">NSUTF8StringEncoding</span>)</span><br><span class=\"line\">    <span class=\"type\">NSURLConnection</span>.sendAsynchronousRequest(request, queue: <span class=\"type\">NSOperationQueue</span>.mainQueue(), completionHandler: &#123;</span><br><span class=\"line\">        (response:<span class=\"type\">NSURLResponse</span>!, data : <span class=\"type\">NSData</span>!,error : <span class=\"type\">NSError</span>!) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> data != <span class=\"literal\">nil</span> &amp;&amp; data.length &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> jsonResult:<span class=\"type\">NSDictionary</span> = <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>(data, options: <span class=\"type\">NSJSONReadingOptions</span>.<span class=\"type\">MutableContainers</span>, error: <span class=\"literal\">nil</span>) <span class=\"keyword\">as</span>! <span class=\"type\">NSDictionary</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> code = jsonResult[<span class=\"string\">\"code\"</span>] <span class=\"keyword\">as</span>! <span class=\"type\">String</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> code.hasPrefix(<span class=\"string\">\"1\"</span>) &#123;</span><br><span class=\"line\">                cell(result: jsonResult)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              delegate.noCell(jsonResult[<span class=\"string\">\"msg\"</span>] <span class=\"keyword\">as</span>! <span class=\"type\">String</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            delegate.noCoonection()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有一小部分的逻辑代码可以忽略，这里只是为了说明调用的过程。</p>\n<p>3、未登录自动跳转实现<br>这样的逻辑在常见 APP 中应用的很广泛，我的做法是重写了 UIViewController 的 viewWillAppear 方法</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillAppear</span><span class=\"params\">(animated: Bool)</span></span> &#123;</span><br><span class=\"line\">    login()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">检查登陆</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">login</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"comment\">/* 你的逻辑 */</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> controller = getController(<span class=\"string\">\"reg_nav\"</span>) <span class=\"keyword\">as</span>! <span class=\"type\">UINavigationController</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = controller.childViewControllers[<span class=\"number\">0</span>] <span class=\"keyword\">as</span>! <span class=\"type\">RegisterController</span></span><br><span class=\"line\">        reg.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.presentViewController(controller, animated: <span class=\"literal\">true</span>,completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、工具类<br>在开发过程中还是抽象出来了好多的工具类，如下</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">获取缓存数据</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: key key</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:returns: value</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getData</span> <span class=\"params\">(key : String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ud = <span class=\"type\">NSUserDefaults</span>.standardUserDefaults()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> value: <span class=\"type\">AnyObject</span> = ud.objectForKey(key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value <span class=\"keyword\">as</span>! <span class=\"type\">String</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">保存缓存数据</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: key   key</span></span><br><span class=\"line\"><span class=\"comment\">:param: value value</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setDate</span><span class=\"params\">(key : String, value : String)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ud = <span class=\"type\">NSUserDefaults</span>.standardUserDefaults()</span><br><span class=\"line\">    ud.setObject(value, forKey: key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">获取Storyboard内的UI组件</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: name 组件Storyboard ID</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:returns: UIViewController</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getController</span><span class=\"params\">(name : String)</span></span> -&gt; <span class=\"type\">UIViewController</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> story =  <span class=\"type\">UIStoryboard</span>(name: <span class=\"string\">\"Main\"</span>, bundle: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> story.instantiateViewControllerWithIdentifier(name) <span class=\"keyword\">as</span>! <span class=\"type\">UIViewController</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">Log 日志</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: obj 日志输出对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myLog</span> <span class=\"params\">(obj : AnyObject)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"****************************************************************************\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"****\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"****log:  \\(obj)\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"****\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"****************************************************************************\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">返回UIAlertController 对象 通过 self.presentViewController(buildAlert(msg as String), animated: true, completion: nil) 展示</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: msg 提示信息</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:returns:</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildAlert</span> <span class=\"params\">(msg : String)</span></span> -&gt; <span class=\"type\">UIAlertController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> alert = <span class=\"type\">UIAlertController</span>(title: <span class=\"string\">\"提示\"</span>, message: msg, preferredStyle: <span class=\"type\">UIAlertControllerStyle</span>.<span class=\"type\">Alert</span>)</span><br><span class=\"line\">    alert.addAction(<span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"确定\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Default</span>, handler: <span class=\"literal\">nil</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> alert</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">获取随机数</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: length 随机数的长度</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:returns: 指定长度的随机数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getVerificationCode</span><span class=\"params\">(length : Int)</span></span> -&gt; <span class=\"type\">String</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(length &lt; <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span>...length&#123;</span><br><span class=\"line\">        str += (<span class=\"string\">\"\\(arc4random_uniform(10))\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">var</span> hindenExtCellView : <span class=\"type\">UIView</span>?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">隐藏多余的table line</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: tableview UITableView</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hindenExtCellLine</span> <span class=\"params\">(tableview : UITableView)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> hindenExtCellView == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        hindenExtCellView = <span class=\"type\">UIView</span>()</span><br><span class=\"line\">        hindenExtCellView!.backgroundColor = <span class=\"type\">UIColor</span>.clearColor()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tableview.tableFooterView = hindenExtCellView</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好啦，将近 2 个月的积累就说到这里啦，爬坑系类第一季到此结束。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>辛苦了将近一个多月，公司应用的 IOS 第一个版本终于发布啦。从无到有，一步一个坑的走到了现在。自信心受到了前所未有的打击，不过还好坚持了下来。分享下爬坑的经验。</p>\n<h3 id=\"爬坑-——-String-类\"><a href=\"#爬坑-——-String-类\" class=\"headerlink\" title=\"爬坑 —— String 类\"></a>爬坑 —— String 类</h3><p>Swift 语法对 String 支持的并不如 Java 全面，有好多方法调用都好麻烦，对于熟悉 Java 开发的我来说哪怕做个简单的字符串截取甚至都要查API，不过 Swift 有个特别的地方就是可以对类进行扩展（不是继承），下面是我对 Java String 类的常用方法的封装，用 Swift 来实现了几个 Java String 类的几个常用 API。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  @author KokerWang, 15-04-22 14:04:35</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*  拓展String</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">String</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 返回长度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> length: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">trim</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.stringByTrimmingCharactersInSet(<span class=\"type\">NSCharacterSet</span>.whitespaceCharacterSet())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">split</span><span class=\"params\">(regularExpression : String)</span></span> -&gt; [<span class=\"type\">String</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.componentsSeparatedByString(regularExpression)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">substring</span><span class=\"params\">(start : Int, end : Int)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> si = getRange(start)!</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ei = getRange(end)!</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.substringWithRange(<span class=\"type\">Range</span>&lt;<span class=\"type\">String</span>.<span class=\"type\">Index</span>&gt;(start: si, end: ei))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">replace</span><span class=\"params\">(oldChary : String, newChart : String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.stringByReplacingOccurrencesOfString(oldChary, withString: newChart, options: <span class=\"literal\">nil</span>, range: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getRange</span><span class=\"params\">(index : Int)</span></span> -&gt; <span class=\"type\">String</span>.<span class=\"type\">Index</span>?&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt; length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">advance</span>(<span class=\"keyword\">self</span>.startIndex, index)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"爬坑-——-3DES，BASE64，SHA1-算法\"><a href=\"#爬坑-——-3DES，BASE64，SHA1-算法\" class=\"headerlink\" title=\"爬坑 —— 3DES，BASE64，SHA1 算法\"></a>爬坑 —— 3DES，BASE64，SHA1 算法</h3><p>出于安全性的考虑，用到的加密算法较多，组合模式也比较特殊，因为直接调用的和 Android 一样的接口，所以也就是说 IOS 端的加密方式要和 Android 端一致，但是我并没有找到 Swift 合适的类库来使用，后来只能使用了 OC 的算法来用。遇到的问题还是挺多的，这里我只说几个典型的问题。</p>\n<blockquote>\n<p>1 、BASE64 加密每 76 个字符增加一个换行符</p>\n</blockquote>\n<blockquote>\n<p>2 、BASE64 加密如果被加密字符串正好是 76 的整数倍最后一个不加换行符</p>\n</blockquote>\n<blockquote>\n<p>3 、3DES 加密使用一种加密方式而不是使用三种加密</p>\n</blockquote>\n<p>第一，二个问题因为我并没有找到如何切换 BASE64 加密选项的参数（ Java 内是有这个 Option 的）。所以最后我的解决方法是手动用 Swift 来实现了这个功能。</p>\n<p>第三个问题我查 OC 的源码发现可以修改了 CCCrypt() 方法第三个参数的值来修改加密方式，源码里只有 2 个枚举，我先是直接传 nil 发现不行后来改传 0x0003 得以解决。代码如下</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* options for block ciphers */</span></span><br><span class=\"line\">    kCCOptionPKCS7Padding   = <span class=\"number\">0x0001</span>,</span><br><span class=\"line\">    kCCOptionECBMode        = <span class=\"number\">0x0002</span></span><br><span class=\"line\">    <span class=\"comment\">/* stream ciphers currently have no options */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ccStatus = <span class=\"type\">CCCrypt</span>(encryptOrDecrypt,</span><br><span class=\"line\">                       kCCAlgorithm3DES,</span><br><span class=\"line\">                       <span class=\"number\">0x0003</span>,</span><br><span class=\"line\">                       vkey,</span><br><span class=\"line\">                       kCCKeySize3DES,</span><br><span class=\"line\">                       <span class=\"literal\">nil</span>,</span><br><span class=\"line\">                       vplainText,</span><br><span class=\"line\">                       plainTextBufferSize,</span><br><span class=\"line\">                       (void *)bufferPtr,</span><br><span class=\"line\">                       bufferPtrSize,</span><br><span class=\"line\">                       &amp;movedBytes);</span><br></pre></td></tr></table></figure>\n<p>以上代码并非完整代码，只是我拿出来的具体修改部分，有需要的可以在网上找对应的算法下载下来对比即可。</p>\n<p>其他几个算法修改的幅度不大，出于安全考虑我也不多说了</p>\n<h3 id=\"爬坑——UI\"><a href=\"#爬坑——UI\" class=\"headerlink\" title=\"爬坑——UI\"></a>爬坑——UI</h3><p>1、上篇文章里我介绍了如何从 Storyboard 中加载出来一个 ViewController，但是如果要在 Storyboard 中给这些 VeiwController 添加上苹果推荐的 Navigation Controller 并顺利拿出来展示可就难办了，开始的时候我使用代码的方式来加上导航栏，这个没有难度。可是既然已经使用了 Storyboard 还是用代码编写实在说不过去，后来我想了个点子，那就是在 ViewController 的 Navigation Controller 上加一个 id 在通过上篇文章介绍的方式拿出来，如果需要设置 delegate 的话在从该 Controller 内拿出 childViewControllers[0] 来设置。 这样就既有导航栏，又没有写代码，可谓一举两得，具体代码看第三条。</p>\n<p>2、网络请求处理<br>因为多数界面都有网络请求，对于多种请求结果的回调，还是需要合理的构思一下代码逻辑，我的做法和 Android 的处理类似，在所有的 ViewController 加一个基类，通过这个类来处理所有通用回调的处理在发送 HTTP 请求的时候把 self 作为 delegate 传过去。我在项目里并没用第三方网络请求类库，因为我感觉原生的已经足够满足我的需求了。看代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">NetCell</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noNet</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noCoonection</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noCell</span><span class=\"params\">(str : String)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseViewController</span>: <span class=\"title\">UIViewController</span>, <span class=\"title\">NetCell</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noNet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.presentViewController(buildAlert(<span class=\"string\">\"网络不通，请检查后再试！\"</span>), animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noCoonection</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.presentViewController(buildAlert(<span class=\"string\">\"网络异常，请稍后再试！\"</span>), animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">noCell</span><span class=\"params\">(str : String)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.presentViewController(buildAlert(str), animated: <span class=\"literal\">true</span>, completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码中 buildAlert 方法是我写的一个工具类，效果是弹出一个提示框。具体我回在后面拿出来。<br>下面是 HTTP 请求的工具类</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetUtil</span>: <span class=\"title\">NSObject</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sendPost</span> <span class=\"params\">(url : String , data : String, delegate : NetCell, cell : <span class=\"params\">(result: NSDictionary)</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> checkNetWork() &#123;</span><br><span class=\"line\">        delegate.noNet()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"type\">NSURL</span>(string: url)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> request = <span class=\"type\">NSMutableURLRequest</span>(<span class=\"type\">URL</span>: url!, cachePolicy: <span class=\"type\">NSURLRequestCachePolicy</span>.<span class=\"type\">ReloadIgnoringLocalAndRemoteCacheData</span>, timeoutInterval: <span class=\"number\">10</span>)</span><br><span class=\"line\">    request.<span class=\"type\">HTTPMethod</span> = <span class=\"string\">\"POST\"</span></span><br><span class=\"line\">    request.addValue(<span class=\"string\">\"application/json; charset=utf-8\"</span>, forHTTPHeaderField: <span class=\"string\">\"Content-Type\"</span>)</span><br><span class=\"line\">    request.<span class=\"type\">HTTPBody</span> = data.dataUsingEncoding(<span class=\"type\">NSUTF8StringEncoding</span>)</span><br><span class=\"line\">    <span class=\"type\">NSURLConnection</span>.sendAsynchronousRequest(request, queue: <span class=\"type\">NSOperationQueue</span>.mainQueue(), completionHandler: &#123;</span><br><span class=\"line\">        (response:<span class=\"type\">NSURLResponse</span>!, data : <span class=\"type\">NSData</span>!,error : <span class=\"type\">NSError</span>!) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> data != <span class=\"literal\">nil</span> &amp;&amp; data.length &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> jsonResult:<span class=\"type\">NSDictionary</span> = <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>(data, options: <span class=\"type\">NSJSONReadingOptions</span>.<span class=\"type\">MutableContainers</span>, error: <span class=\"literal\">nil</span>) <span class=\"keyword\">as</span>! <span class=\"type\">NSDictionary</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> code = jsonResult[<span class=\"string\">\"code\"</span>] <span class=\"keyword\">as</span>! <span class=\"type\">String</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> code.hasPrefix(<span class=\"string\">\"1\"</span>) &#123;</span><br><span class=\"line\">                cell(result: jsonResult)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              delegate.noCell(jsonResult[<span class=\"string\">\"msg\"</span>] <span class=\"keyword\">as</span>! <span class=\"type\">String</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            delegate.noCoonection()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有一小部分的逻辑代码可以忽略，这里只是为了说明调用的过程。</p>\n<p>3、未登录自动跳转实现<br>这样的逻辑在常见 APP 中应用的很广泛，我的做法是重写了 UIViewController 的 viewWillAppear 方法</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewWillAppear</span><span class=\"params\">(animated: Bool)</span></span> &#123;</span><br><span class=\"line\">    login()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">检查登陆</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">login</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"comment\">/* 你的逻辑 */</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> controller = getController(<span class=\"string\">\"reg_nav\"</span>) <span class=\"keyword\">as</span>! <span class=\"type\">UINavigationController</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> reg = controller.childViewControllers[<span class=\"number\">0</span>] <span class=\"keyword\">as</span>! <span class=\"type\">RegisterController</span></span><br><span class=\"line\">        reg.delegate = <span class=\"keyword\">self</span></span><br><span class=\"line\">        <span class=\"keyword\">self</span>.presentViewController(controller, animated: <span class=\"literal\">true</span>,completion: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、工具类<br>在开发过程中还是抽象出来了好多的工具类，如下</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">获取缓存数据</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: key key</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:returns: value</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getData</span> <span class=\"params\">(key : String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ud = <span class=\"type\">NSUserDefaults</span>.standardUserDefaults()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> value: <span class=\"type\">AnyObject</span> = ud.objectForKey(key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value <span class=\"keyword\">as</span>! <span class=\"type\">String</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">保存缓存数据</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: key   key</span></span><br><span class=\"line\"><span class=\"comment\">:param: value value</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setDate</span><span class=\"params\">(key : String, value : String)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ud = <span class=\"type\">NSUserDefaults</span>.standardUserDefaults()</span><br><span class=\"line\">    ud.setObject(value, forKey: key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">获取Storyboard内的UI组件</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: name 组件Storyboard ID</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:returns: UIViewController</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getController</span><span class=\"params\">(name : String)</span></span> -&gt; <span class=\"type\">UIViewController</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> story =  <span class=\"type\">UIStoryboard</span>(name: <span class=\"string\">\"Main\"</span>, bundle: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> story.instantiateViewControllerWithIdentifier(name) <span class=\"keyword\">as</span>! <span class=\"type\">UIViewController</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">Log 日志</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: obj 日志输出对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myLog</span> <span class=\"params\">(obj : AnyObject)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"****************************************************************************\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"****\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"****log:  \\(obj)\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"****\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"****************************************************************************\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">返回UIAlertController 对象 通过 self.presentViewController(buildAlert(msg as String), animated: true, completion: nil) 展示</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: msg 提示信息</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:returns:</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildAlert</span> <span class=\"params\">(msg : String)</span></span> -&gt; <span class=\"type\">UIAlertController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> alert = <span class=\"type\">UIAlertController</span>(title: <span class=\"string\">\"提示\"</span>, message: msg, preferredStyle: <span class=\"type\">UIAlertControllerStyle</span>.<span class=\"type\">Alert</span>)</span><br><span class=\"line\">    alert.addAction(<span class=\"type\">UIAlertAction</span>(title: <span class=\"string\">\"确定\"</span>, style: <span class=\"type\">UIAlertActionStyle</span>.<span class=\"type\">Default</span>, handler: <span class=\"literal\">nil</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> alert</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">获取随机数</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: length 随机数的长度</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:returns: 指定长度的随机数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getVerificationCode</span><span class=\"params\">(length : Int)</span></span> -&gt; <span class=\"type\">String</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(length &lt; <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span>...length&#123;</span><br><span class=\"line\">        str += (<span class=\"string\">\"\\(arc4random_uniform(10))\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">var</span> hindenExtCellView : <span class=\"type\">UIView</span>?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">隐藏多余的table line</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">:param: tableview UITableView</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hindenExtCellLine</span> <span class=\"params\">(tableview : UITableView)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> hindenExtCellView == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        hindenExtCellView = <span class=\"type\">UIView</span>()</span><br><span class=\"line\">        hindenExtCellView!.backgroundColor = <span class=\"type\">UIColor</span>.clearColor()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tableview.tableFooterView = hindenExtCellView</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好啦，将近 2 个月的积累就说到这里啦，爬坑系类第一季到此结束。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjgw8vdz00000oky0ll26lmbl","tag_id":"cjgw8vdz80004oky0vzg0wd7q","_id":"cjgw8vdzg0009oky0k25a4fo6"},{"post_id":"cjgw8vdze0007oky0vpmw7ovi","tag_id":"cjgw8vdz80004oky0vzg0wd7q","_id":"cjgw8vdzh000boky0z7xa9m3k"},{"post_id":"cjgw8vdz50002oky01mc8nmio","tag_id":"cjgw8vdz80004oky0vzg0wd7q","_id":"cjgw8vdzk000eoky0tmpwx6f3"},{"post_id":"cjgw8vdzk000foky0c8gcm2g3","tag_id":"cjgw8vdz80004oky0vzg0wd7q","_id":"cjgw8vdzo000ioky0swf1o51k"},{"post_id":"cjgw8vdzb0005oky0v75tvery","tag_id":"cjgw8vdz80004oky0vzg0wd7q","_id":"cjgw8vdzq000koky0gvgywmkx"},{"post_id":"cjgw8vdzn000goky0iz71ulur","tag_id":"cjgw8vdz80004oky0vzg0wd7q","_id":"cjgw8vdzr000noky0rkit06ug"},{"post_id":"cjgw8vdzc0006oky0u2wsplv0","tag_id":"cjgw8vdzo000hoky0tbg6fzap","_id":"cjgw8vdzs000poky0lrd1rpt5"},{"post_id":"cjgw8vdzq000loky0ngltmb28","tag_id":"cjgw8vdz80004oky0vzg0wd7q","_id":"cjgw8vdzt000soky0c6wekgc2"},{"post_id":"cjgw8vdzg000aoky0eoli9i57","tag_id":"cjgw8vdzr000moky0ee22xlyd","_id":"cjgw8vdzv000uoky083uixuqn"},{"post_id":"cjgw8vdzs000qoky0ga7rsmg6","tag_id":"cjgw8vdz80004oky0vzg0wd7q","_id":"cjgw8vdzw000xoky0ac340cor"},{"post_id":"cjgw8vdzu000toky0uvoo897q","tag_id":"cjgw8vdz80004oky0vzg0wd7q","_id":"cjgw8vdzx000zoky0up71u1ff"},{"post_id":"cjgw8vdzi000coky0d0aawv43","tag_id":"cjgw8vdzo000hoky0tbg6fzap","_id":"cjgw8vdzx0010oky0jl1qwt5q"},{"post_id":"cjgw8vdzw000yoky0aqeqpd97","tag_id":"cjgw8vdz80004oky0vzg0wd7q","_id":"cjgw8vdzy0012oky0114t4cg8"},{"post_id":"cjgw8vdzo000joky0uwrbfqxt","tag_id":"cjgw8vdzw000woky01q4q0jan","_id":"cjgw8vdzz0013oky0tlvxp78x"},{"post_id":"cjgw8vdzr000ooky0dbz6h5xt","tag_id":"cjgw8vdzx0011oky0i07q5pst","_id":"cjgw8vdzz0015oky0c545ti24"},{"post_id":"cjgw8vdzv000voky0er0oxa6r","tag_id":"cjgw8vdzw000woky01q4q0jan","_id":"cjgw8ve000016oky00asit65w"},{"post_id":"cjgw8ve0n0017oky0c58qywzp","tag_id":"cjgw8vdz80004oky0vzg0wd7q","_id":"cjgw8ve0p001boky0p6zwup5s"},{"post_id":"cjgw8ve0o0019oky0si1avd89","tag_id":"cjgw8vdzo000hoky0tbg6fzap","_id":"cjgw8ve0q001coky0rcg2ds70"}],"Tag":[{"name":"工作总结","_id":"cjgw8vdz80004oky0vzg0wd7q"},{"name":"Swift","_id":"cjgw8vdzo000hoky0tbg6fzap"},{"name":"我的开源","_id":"cjgw8vdzr000moky0ee22xlyd"},{"name":"读书笔记","_id":"cjgw8vdzw000woky01q4q0jan"},{"name":"Shell","_id":"cjgw8vdzx0011oky0i07q5pst"}]}}