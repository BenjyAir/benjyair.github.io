<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title>KokerWang‘s bloggg</title>
    <link href="http://www.kokerwang.com/rss.xml" rel="self"/>
    <link href="http://www.kokerwang.com/"/>
    <updated>2014-10-13T23:58:56+08:00</updated>
    <id>http://www.kokerwang.com</id>
    <author>
        <name>kokerwang</name>
        <email>kokerwang@gmail.com</email>
    </author>

    
    <entry>
        <title>Android简单实现圆形头像(续)</title>
        <link href="http://www.kokerwang.com/android/Android%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%9C%86%E5%BD%A2%E5%A4%B4%E5%83%8F(%E7%BB%AD).html"/>
        <updated>2014-10-11T00:00:00+08:00</updated>
        <id>http://www.kokerwang.com/android/Android简单实现圆形头像(续)</id>
        <content type="html">&lt;hr /&gt;

&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;上一篇文章里面详细讲解了用自己的方式实现圆形头像，如今发现之前的代码效率并不高,因为每次都要createBitmap和转换图片,createBitmap是一件很费内存的事,而频繁转换是一件很费cpu的事,这样费手机资源肯定必然是不行的,并且随着自己对imageloader的深入使用,发现使用imageloader还有另外一种更简单的方法来实现这样的效果,或许能解决这样的问题.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;下面我详细介绍下,先看代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; DisplayImageOptions options = new DisplayImageOptions.Builder()
    .showImageForEmptyUri(R.drawable.default_image)
    .showImageOnFail(R.drawable.default_image)
    .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)
    .bitmapConfig(Config.RGB_565)
    .cacheInMemory(true)
    .cacheOnDisk(true)
    .resetViewBeforeLoading(true)
    .displayer(new RoundedBitmapDisplayer(112)).build();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里面的displayer方法可以接收实现BitmapDisplayer接口的对象,关键点就在这里,imageloader有默认的可以实现圆角的Displayer 那就是 FadeInBitmapDisplayer（int durationMillis）,durationMillis就是圆角的半径. 用他就不用之前自己那么麻烦的方法了.&lt;/p&gt;

&lt;h2&gt;完整代码&lt;/h2&gt;

&lt;p&gt;imageloader 的初始化方法没变，同上一篇blog,这里只展示一下显示的工具类.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;//显示圆角的option
public static DisplayImageOptions options ;

public static &amp;lt;T extends ImageView&amp;gt; void displayImage2Circle(T container, String url) {
    if(options == null){
        options = new DisplayImageOptions.Builder()
            .showImageForEmptyUri(R.drawable.default_image)
            .showImageOnFail(R.drawable.default_image)
            .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)
            .bitmapConfig(Config.RGB_565)
            .cacheInMemory(true)
            .cacheOnDisk(true)
            .resetViewBeforeLoading(true)
            // 我们的图片大小是70dp 所以我这里半径=70*1.6 ,其他情况可以自己算,或者动态设置
            .displayer(new RoundedBitmapDisplayer(112)) 
            .build();
    }
    ImageLoader.getInstance().displayImage(url, container, options);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;附 :&lt;/h2&gt;

&lt;p&gt;其他displayer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;displayer：  
        RoundedBitmapDisplayer（int roundPixels）设置圆角图片  
        FakeBitmapDisplayer（）这个类什么都没做  
        FadeInBitmapDisplayer（int durationMillis）设置图片渐显的时间  
        SimpleBitmapDisplayer()正常显示一张图片
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;疑问&lt;/h2&gt;

&lt;p&gt;imageloader缓存的图片是转换之前的bitmap呢还是之后的呢?&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;如果是之前的,那执行效率并不会较之前我实现的方法提高多少,只是转换的工作交给了imageloader, 每次还是要转换.&lt;/li&gt;
&lt;li&gt;如果缓存的是转换之后的圆角bitmap 那效率就会大大提高,而我也希望是这样的,但这样拓展性可能会降低.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;等有时间了我会深入研究一下imageloader 的源码,把结果写出来&lt;/p&gt;

&lt;hr /&gt;
</content>
        <summary type="html">&lt;hr /&gt;

&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;上一篇文章里面详细讲解了用自己的方式实现圆形头像，如今发现之前的代码效率并不高,因为每次都要createBitmap和转换图片,createBitmap是一件很费内存的事,而频繁转换是一件很费cpu的事,这样费手机资源肯定必然是不行的,并且随着自己对imageloader的深入使用,发现使用imageloader还有另外一种更简单的方法来实现这样的效果,或许能解决这样的问题.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;下面我详细介绍下,先看代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; DisplayImageOptions options = new DisplayImageOptions.Builder()
    .showImageForEmptyUri(R.drawable.default_image)
    .showImageOnFail(R.drawable.default_image)
    .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)
    .bitmapConfig(Config.RGB_565)
    .cacheInMemory(true)
    .cacheOnDisk(true)
    .resetViewBeforeLoading(true)
    .displayer(new RoundedBitmapDisplayer(112)).build();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里面的displayer方法可以接收实现BitmapDisplayer接口的对象,关键点就在这里,imageloader有默认的可以实现圆角的Displayer 那就是 FadeInBitmapDisplayer（int durationMillis）,durationMillis就是圆角的半径. 用他就不用之前自己那么麻烦的方法了.&lt;/p&gt;

&lt;h2&gt;完整代码&lt;/h2&gt;

&lt;p&gt;imageloader 的初始化方法没变，同上一篇blog,这里只展示一下显示的工具类.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;//显示圆角的option
public static DisplayImageOptions options ;

public static &amp;lt;T extends ImageView&amp;gt; void displayImage2Circle(T container, String url) {
    if(options == null){
        options = new DisplayImageOptions.Builder()
            .showImageForEmptyUri(R.drawable.default_image)
            .showImageOnFail(R.drawable.default_image)
            .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)
            .bitmapConfig(Config.RGB_565)
            .cacheInMemory(true)
            .cacheOnDisk(true)
            .resetViewBeforeLoading(true)
            // 我们的图片大小是70dp 所以我这里半径=70*1.6 ,其他情况可以自己算,或者动态设置
            .displayer(new RoundedBitmapDisplayer(112)) 
            .build();
    }
    ImageLoader.getInstance().displayImage(url, container, options);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;附 :&lt;/h2&gt;

&lt;p&gt;其他displayer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;displayer：  
        RoundedBitmapDisplayer（int roundPixels）设置圆角图片  
        FakeBitmapDisplayer（）这个类什么都没做  
        FadeInBitmapDisplayer（int durationMillis）设置图片渐显的时间  
        SimpleBitmapDisplayer()正常显示一张图片
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;疑问&lt;/h2&gt;

&lt;p&gt;imageloader缓存的图片是转换之前的bitmap呢还是之后的呢?&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;如果是之前的,那执行效率并不会较之前我实现的方法提高多少,只是转换的工作交给了imageloader, 每次还是要转换.&lt;/li&gt;
&lt;li&gt;如果缓存的是转换之后的圆角bitmap 那效率就会大大提高,而我也希望是这样的,但这样拓展性可能会降低.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;等有时间了我会深入研究一下imageloader 的源码,把结果写出来&lt;/p&gt;

&lt;hr /&gt;
</summary>
    </entry>
    
    <entry>
        <title>Android简单实现圆形头像</title>
        <link href="http://www.kokerwang.com/android/Android%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%9C%86%E5%BD%A2%E5%A4%B4%E5%83%8F.html"/>
        <updated>2014-09-30T00:00:00+08:00</updated>
        <id>http://www.kokerwang.com/android/Android简单实现圆形头像</id>
        <content type="html">&lt;hr /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;今天项目中即时通信工具部分要把好友头像由方形转换成圆形,大概也是跟上时代的潮流吧,毕竟连qq都开始使用圆形头像了,我在这里记录一下修改过程.&lt;/p&gt;

&lt;p&gt;在网上找了一番之后,大概解决方法有两种&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;使用自定义组件继承ImageView&lt;/li&gt;
&lt;li&gt;通过对BitMap重绘得到&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;第一种方式,有许多开源框架可以实现,如&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;&lt;strong&gt;CircleImageView&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;,由于我们项目中图片缓存及显示使用的是&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;&lt;strong&gt;Android-Universal-Image-Loader&lt;/strong&gt;&lt;/a&gt;,而他本身支持在获取到网络图片之后增加回调,那我毫无疑问的选择了第二种方式实现,&lt;/p&gt;

&lt;p&gt;首先是圆形图片转换的方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;/**
 * 将图片转为圆型  不标准的图形从中心截取
 * 
 * @param bitmap
 * @return
 */
public static Bitmap getRoundedCornerBitmap(Bitmap bitmap) {
    int width = bitmap.getWidth();
    int height = bitmap.getHeight();
    Bitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);
    Canvas canvas = new Canvas(output);
    // 切圆的直径
    int minLength = width &amp;gt; height ? height : width;
    final int color = 0xff424242;
    final Paint paint = new Paint();
    int x = (width - minLength) / 2;
    int y = (height - minLength) / 2;
    final Rect rect = new Rect(x, y, x + minLength, y + minLength);
    final RectF rectF = new RectF(rect);
    final float roundPx = minLength / 2;

    paint.setAntiAlias(true);
    canvas.drawARGB(0, 0, 0, 0);
    paint.setColor(color);
    canvas.drawRoundRect(rectF, roundPx, roundPx, paint);
    paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
    canvas.drawBitmap(bitmap, rect, rect, paint);
    return output;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再然后是显示图片工具类&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static SimpleImageLoadingListener listener;

public static &amp;lt;T extends ImageView&amp;gt; void displayImage2Circle(T container, String url) {
    if (listener == null) {
        listener = new SimpleImageLoadingListener() {
            @Override
            public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                super.onLoadingComplete(imageUri, view, loadedImage);
                ((ImageView) view).setImageBitmap(getRoundedCornerBitmap(loadedImage));
            }
        };
    }
    ImageLoader.getInstance().displayImage(url, container, listener);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样只要是需要把图片显示为圆形的地方直接调用&lt;code&gt;displayImage2Circle&lt;/code&gt;这个方法即可&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本以为已经大功告成,没想到使用之后却发现图片四周仿佛被切掉一部分一样,如图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/20140930151619.png&quot; alt=&quot;tool-editor&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;起先以为是图片有白边,后来发现不是,&lt;a href=&quot;http://img0.bdstatic.com/img/image/shouye/mxzyq-11795342220.jpg&quot;&gt;图片地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后又以为是半径没算对,验证之后再次被排除&lt;/li&gt;
&lt;li&gt;最终把原因定位到了Image-Loader上,解决办法如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ImageLoaderConfiguration的defaultDisplayImageOptions方法需要一个DisplayImageOptions参数而DisplayImageOptions的参数的imageScaleType属性默认的是ImageScaleType.IN_SAMPLE_POWER_OF_2就是这个属性导致的图片不圆,查了一下文档&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;/** 
 * 图片的缩放方式 
 */  
imageScaleType(ImageScaleType imageScaleType)  
imageScaleType:  
    EXACTLY :图像将完全按比例缩小的目标大小  
    EXACTLY_STRETCHED:图片会完全缩放到目标大小  
    IN_SAMPLE_INT:图像将被二次采样,并且倍数为整数倍  
    IN_SAMPLE_POWER_OF_2:图片将降低2倍，直到下一减少步骤，使图像更小的目标大小  
    NONE:图片不会调整  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IN_SAMPLE_POWER_OF_2模式下缩放是成倍缩放的所以导致实际显示的要比我设定的宽一些,改成EXACTLY_STRETCHED之后问题得到解决&lt;/p&gt;

&lt;p&gt;最后展示一下最终效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/20140930154619.png&quot; alt=&quot;tool-editor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以及Image-Loader的完整设置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private void initImageLoader() {
    DisplayImageOptions options = new DisplayImageOptions.Builder()
    .showImageForEmptyUri(R.drawable.default_image) 
    .showImageOnFail(R.drawable.default_image) 
    .imageScaleType(ImageScaleType.EXACTLY_STRETCHED) 
    .bitmapConfig(Config.RGB_565) 
    .cacheInMemory(true)
    .cacheOnDisk(true)
    .resetViewBeforeLoading(true)
    .build();

    File cacheDir = StorageUtils.getOwnCacheDirectory(getApplicationContext(), Util.getCachePath()); 

    ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this)
    .denyCacheImageMultipleSizesInMemory()
    .memoryCache(new LruMemoryCache(2 * 1024 * 1024))
    .threadPoolSize(4)
    .memoryCacheSize(2 * 1024 * 1024)
    .diskCache(new UnlimitedDiscCache(cacheDir)) // 缓存路径
    .diskCacheSize(50 * 1024 * 1024)
    .diskCacheFileCount(100)
    .defaultDisplayImageOptions(options) 
    .build();

     ImageLoader.getInstance().init(config);  

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;公司项目我就不放源码了,核心代码都在上面了.有问题可以和我联系&lt;/p&gt;

&lt;hr /&gt;
</content>
        <summary type="html">&lt;hr /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;今天项目中即时通信工具部分要把好友头像由方形转换成圆形,大概也是跟上时代的潮流吧,毕竟连qq都开始使用圆形头像了,我在这里记录一下修改过程.&lt;/p&gt;

&lt;p&gt;在网上找了一番之后,大概解决方法有两种&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;使用自定义组件继承ImageView&lt;/li&gt;
&lt;li&gt;通过对BitMap重绘得到&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;第一种方式,有许多开源框架可以实现,如&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;&lt;strong&gt;CircleImageView&lt;/strong&gt;&lt;/a&gt;&amp;nbsp;,由于我们项目中图片缓存及显示使用的是&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;&lt;strong&gt;Android-Universal-Image-Loader&lt;/strong&gt;&lt;/a&gt;,而他本身支持在获取到网络图片之后增加回调,那我毫无疑问的选择了第二种方式实现,&lt;/p&gt;

&lt;p&gt;首先是圆形图片转换的方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;/**
 * 将图片转为圆型  不标准的图形从中心截取
 * 
 * @param bitmap
 * @return
 */
public static Bitmap getRoundedCornerBitmap(Bitmap bitmap) {
    int width = bitmap.getWidth();
    int height = bitmap.getHeight();
    Bitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);
    Canvas canvas = new Canvas(output);
    // 切圆的直径
    int minLength = width &amp;gt; height ? height : width;
    final int color = 0xff424242;
    final Paint paint = new Paint();
    int x = (width - minLength) / 2;
    int y = (height - minLength) / 2;
    final Rect rect = new Rect(x, y, x + minLength, y + minLength);
    final RectF rectF = new RectF(rect);
    final float roundPx = minLength / 2;

    paint.setAntiAlias(true);
    canvas.drawARGB(0, 0, 0, 0);
    paint.setColor(color);
    canvas.drawRoundRect(rectF, roundPx, roundPx, paint);
    paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));
    canvas.drawBitmap(bitmap, rect, rect, paint);
    return output;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再然后是显示图片工具类&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static SimpleImageLoadingListener listener;

public static &amp;lt;T extends ImageView&amp;gt; void displayImage2Circle(T container, String url) {
    if (listener == null) {
        listener = new SimpleImageLoadingListener() {
            @Override
            public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                super.onLoadingComplete(imageUri, view, loadedImage);
                ((ImageView) view).setImageBitmap(getRoundedCornerBitmap(loadedImage));
            }
        };
    }
    ImageLoader.getInstance().displayImage(url, container, listener);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样只要是需要把图片显示为圆形的地方直接调用&lt;code&gt;displayImage2Circle&lt;/code&gt;这个方法即可&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本以为已经大功告成,没想到使用之后却发现图片四周仿佛被切掉一部分一样,如图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/20140930151619.png&quot; alt=&quot;tool-editor&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;起先以为是图片有白边,后来发现不是,&lt;a href=&quot;http://img0.bdstatic.com/img/image/shouye/mxzyq-11795342220.jpg&quot;&gt;图片地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后又以为是半径没算对,验证之后再次被排除&lt;/li&gt;
&lt;li&gt;最终把原因定位到了Image-Loader上,解决办法如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ImageLoaderConfiguration的defaultDisplayImageOptions方法需要一个DisplayImageOptions参数而DisplayImageOptions的参数的imageScaleType属性默认的是ImageScaleType.IN_SAMPLE_POWER_OF_2就是这个属性导致的图片不圆,查了一下文档&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;/** 
 * 图片的缩放方式 
 */  
imageScaleType(ImageScaleType imageScaleType)  
imageScaleType:  
    EXACTLY :图像将完全按比例缩小的目标大小  
    EXACTLY_STRETCHED:图片会完全缩放到目标大小  
    IN_SAMPLE_INT:图像将被二次采样,并且倍数为整数倍  
    IN_SAMPLE_POWER_OF_2:图片将降低2倍，直到下一减少步骤，使图像更小的目标大小  
    NONE:图片不会调整  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IN_SAMPLE_POWER_OF_2模式下缩放是成倍缩放的所以导致实际显示的要比我设定的宽一些,改成EXACTLY_STRETCHED之后问题得到解决&lt;/p&gt;

&lt;p&gt;最后展示一下最终效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/20140930154619.png&quot; alt=&quot;tool-editor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以及Image-Loader的完整设置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private void initImageLoader() {
    DisplayImageOptions options = new DisplayImageOptions.Builder()
    .showImageForEmptyUri(R.drawable.default_image) 
    .showImageOnFail(R.drawable.default_image) 
    .imageScaleType(ImageScaleType.EXACTLY_STRETCHED) 
    .bitmapConfig(Config.RGB_565) 
    .cacheInMemory(true)
    .cacheOnDisk(true)
    .resetViewBeforeLoading(true)
    .build();

    File cacheDir = StorageUtils.getOwnCacheDirectory(getApplicationContext(), Util.getCachePath()); 

    ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(this)
    .denyCacheImageMultipleSizesInMemory()
    .memoryCache(new LruMemoryCache(2 * 1024 * 1024))
    .threadPoolSize(4)
    .memoryCacheSize(2 * 1024 * 1024)
    .diskCache(new UnlimitedDiscCache(cacheDir)) // 缓存路径
    .diskCacheSize(50 * 1024 * 1024)
    .diskCacheFileCount(100)
    .defaultDisplayImageOptions(options) 
    .build();

     ImageLoader.getInstance().init(config);  

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;公司项目我就不放源码了,核心代码都在上面了.有问题可以和我联系&lt;/p&gt;

&lt;hr /&gt;
</summary>
    </entry>
    
    <entry>
        <title>Android BroadcastReceiver 接收顺序</title>
        <link href="http://www.kokerwang.com/android/Android%20BroadcastReceiver%20%E6%8E%A5%E6%94%B6%E9%A1%BA%E5%BA%8F.html"/>
        <updated>2014-09-28T00:00:00+08:00</updated>
        <id>http://www.kokerwang.com/android/Android BroadcastReceiver 接收顺序</id>
        <content type="html">&lt;hr /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;今天项目里有这样一个需求，访问一个请求并把手机号作为参数传过去，同时拦截收到的短信验证码，自动填进EditText，一个看似很简单的功能。然而在真机上测试竟然没有拦截到，把优先级调到最大也无济于事。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;四处寻访，原来BroadcastReceiver除了有优先级顺序之外，还有注册的顺序。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;大家都知道广播分有序广播和无序广播，有序广播和无序广播的区别就是，有序广播可以被任何一个接受者消耗掉，而无序广播则不可以，注册的话既可以在代码里面动态注册，也可以在Manifest里面直接声明，屌丝青年大多会直接在Manifest里面定义注册，文艺青年一般使用代码动态注册。这两种方式接受的广播的顺序是不一样的。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一般来说有序广播在同等优先级的情况下有这样的顺序&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;动态注册的BroadcastReceiver，先注册的先接收&lt;/li&gt;
&lt;li&gt;Manifest里注册的BroadcastReceiver，接收广播的顺序与String[] java.io.File.list()顺序一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在不同优先级的情况下&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;有序广播按优先级顺序接收&lt;/li&gt;
&lt;li&gt;无序广播因为是异步的所以接收broadcast的顺序不确定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt; 假设有如下优先级的5个接收器  并且B先于C注册     &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 1.动态A（优先级=1）      &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 2.动态B（优先级=2）      &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 3.动态C（优先级=2）      &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 4.静态D（优先级=1)       &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 5.静态E（优先级=2）      &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 那么实际接收顺序应为：  B C E A D  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;hr /&gt;

&lt;h2&gt;关于 String[] java.io.File.list()&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们以开机时候发出的广播android.intent.action.BOOT_COMPLETED为例，这是个无序广播。如果应用想要开启自启动，那么就要监听这个广播，程序启动之前，动态广播接收器肯定是无法使用的，只能在XML中静态注册。大家都知道，第三方应用是存放在/data/app目录下，当安装完毕之后，你会找到一个文件，他的名字是以与安装的应用包名开始的，然后可能会跟着&quot;-数字.apk&quot;，比如：com.android.test-1.apk。接收的顺序与这个名字是有关的！那么关系是怎样的呢？&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;系统在开机的时候，会按着一个顺序解析apk，首先，会解析手机中的/system/framework这个目录，原生系统中，这下面就一个apk - framework-res.apk，当然各个厂商也会加入自己的内容&lt;/li&gt;
&lt;li&gt;然后受到重视的文件夹按顺序分别为：
/system/app，
/vendor/app，
/data/app，
/drm/app-private
那么每个文件夹下解析的顺序是怎样的呢？我们先只看/data/app，也就是用户安装的第三方应用的存放位置，这与下面代码返回结果的顺序是一致的
File file = new File(&quot;/data/app/&quot;);
String[] files = file.list();
也就是说，我们按顺序打印这个数组，就能知道哪个接收器会先接收到这个广播，哪个会后接收到&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
</content>
        <summary type="html">&lt;hr /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;今天项目里有这样一个需求，访问一个请求并把手机号作为参数传过去，同时拦截收到的短信验证码，自动填进EditText，一个看似很简单的功能。然而在真机上测试竟然没有拦截到，把优先级调到最大也无济于事。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;四处寻访，原来BroadcastReceiver除了有优先级顺序之外，还有注册的顺序。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;大家都知道广播分有序广播和无序广播，有序广播和无序广播的区别就是，有序广播可以被任何一个接受者消耗掉，而无序广播则不可以，注册的话既可以在代码里面动态注册，也可以在Manifest里面直接声明，屌丝青年大多会直接在Manifest里面定义注册，文艺青年一般使用代码动态注册。这两种方式接受的广播的顺序是不一样的。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一般来说有序广播在同等优先级的情况下有这样的顺序&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;动态注册的BroadcastReceiver，先注册的先接收&lt;/li&gt;
&lt;li&gt;Manifest里注册的BroadcastReceiver，接收广播的顺序与String[] java.io.File.list()顺序一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在不同优先级的情况下&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;有序广播按优先级顺序接收&lt;/li&gt;
&lt;li&gt;无序广播因为是异步的所以接收broadcast的顺序不确定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt; 假设有如下优先级的5个接收器  并且B先于C注册     &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 1.动态A（优先级=1）      &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 2.动态B（优先级=2）      &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 3.动态C（优先级=2）      &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 4.静态D（优先级=1)       &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 5.静态E（优先级=2）      &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 那么实际接收顺序应为：  B C E A D  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;hr /&gt;

&lt;h2&gt;关于 String[] java.io.File.list()&lt;/h2&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们以开机时候发出的广播android.intent.action.BOOT_COMPLETED为例，这是个无序广播。如果应用想要开启自启动，那么就要监听这个广播，程序启动之前，动态广播接收器肯定是无法使用的，只能在XML中静态注册。大家都知道，第三方应用是存放在/data/app目录下，当安装完毕之后，你会找到一个文件，他的名字是以与安装的应用包名开始的，然后可能会跟着&quot;-数字.apk&quot;，比如：com.android.test-1.apk。接收的顺序与这个名字是有关的！那么关系是怎样的呢？&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;系统在开机的时候，会按着一个顺序解析apk，首先，会解析手机中的/system/framework这个目录，原生系统中，这下面就一个apk - framework-res.apk，当然各个厂商也会加入自己的内容&lt;/li&gt;
&lt;li&gt;然后受到重视的文件夹按顺序分别为：
/system/app，
/vendor/app，
/data/app，
/drm/app-private
那么每个文件夹下解析的顺序是怎样的呢？我们先只看/data/app，也就是用户安装的第三方应用的存放位置，这与下面代码返回结果的顺序是一致的
File file = new File(&quot;/data/app/&quot;);
String[] files = file.list();
也就是说，我们按顺序打印这个数组，就能知道哪个接收器会先接收到这个广播，哪个会后接收到&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
</summary>
    </entry>
    
    <entry>
        <title>My first blog</title>
        <link href="http://www.kokerwang.com/others/My%20first%20blog.html"/>
        <updated>2014-09-27T00:00:00+08:00</updated>
        <id>http://www.kokerwang.com/others/My first blog</id>
        <content type="html">&lt;hr /&gt;

&lt;h2&gt;历程&lt;/h2&gt;

&lt;p&gt;一直以来我都是只写笔记不写博客，总以为写博客很无聊。直到后来接触到了github，接触到了开源，我才发现了分享的乐趣，我想我的那些笔记一定也不喜欢孤独，那我也加入开源的世界吧。搭建自己的博客，分享自己在工作中的问题，这本身不就是一件快乐的事情么？从有想法到实现，辛辛苦苦花费了将近一周的时间，终于把博客搭建了起来，中间的辛苦和快乐也只有自己最清楚。&lt;/p&gt;

&lt;p&gt;大概步骤记录下来&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;搭建ruby环境，搭建python环境，搭建jekyll环境&lt;/li&gt;
&lt;li&gt;找模板，改模板（最辛苦的一件事）&lt;/li&gt;
&lt;li&gt;添加统计，评论等小功能&lt;/li&gt;
&lt;li&gt;发布到github&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;中途碰到了无数问题，只能自己解决，百度不行google，google不行，那就想别的办法，反正最后终于搞成了如今的样子，还有一些bug，慢慢在解决吧，重点应该是内容而不是界面。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;下一个目标&lt;/h2&gt;

&lt;p&gt;微信公众账号 lol&lt;/p&gt;

&lt;hr /&gt;
</content>
        <summary type="html">&lt;hr /&gt;

&lt;h2&gt;历程&lt;/h2&gt;

&lt;p&gt;一直以来我都是只写笔记不写博客，总以为写博客很无聊。直到后来接触到了github，接触到了开源，我才发现了分享的乐趣，我想我的那些笔记一定也不喜欢孤独，那我也加入开源的世界吧。搭建自己的博客，分享自己在工作中的问题，这本身不就是一件快乐的事情么？从有想法到实现，辛辛苦苦花费了将近一周的时间，终于把博客搭建了起来，中间的辛苦和快乐也只有自己最清楚。&lt;/p&gt;

&lt;p&gt;大概步骤记录下来&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;搭建ruby环境，搭建python环境，搭建jekyll环境&lt;/li&gt;
&lt;li&gt;找模板，改模板（最辛苦的一件事）&lt;/li&gt;
&lt;li&gt;添加统计，评论等小功能&lt;/li&gt;
&lt;li&gt;发布到github&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;中途碰到了无数问题，只能自己解决，百度不行google，google不行，那就想别的办法，反正最后终于搞成了如今的样子，还有一些bug，慢慢在解决吧，重点应该是内容而不是界面。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;下一个目标&lt;/h2&gt;

&lt;p&gt;微信公众账号 lol&lt;/p&gt;

&lt;hr /&gt;
</summary>
    </entry>
    

</feed>